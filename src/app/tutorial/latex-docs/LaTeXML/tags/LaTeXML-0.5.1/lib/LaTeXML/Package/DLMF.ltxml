# -*- CPERL -*-
# /=====================================================================\ #
# |  DLMF                                                               | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

#**********************************************************************
# Document
#**********************************************************************
DocType("ltx:document","-//NIST LaTeXML//LaTeXML DLMF Chapter",'DLMF.dtd',
	'#default'=>"http://dlmf.nist.gov/LaTeXML");


RequirePackage('graphicx');
RequirePackage('amsmath');
RequirePackage('amssymb');
RequirePackage('DLMFmath');
RequirePackage('url');
RequirePackage('comment');
RequirePackage('latexml');


# If we get this, we're doing a "chapter"
DefPrimitive('\thischapter{}', sub {
  my($stomach,$ch)=@_;
  $ch=$ch->toString;
  DefMacro('\thechapter',$ch); 
  DefMacro('\thechapter@ID',$ch); 
  DefMacro('\@currentlabel',$ch);
  AssignValue("\\c\@chapter"=>$ch,'global');
  AssignValue(current_counter=>'chapter','local');
  AssignValue(Chapter=>$ch,'global');
  AssignValue(ChapterLabel=>"ch:$ch",'global');  
  DocType("ltx:chapter","-//NIST LaTeXML//LaTeXML DLMF Chapter",'DLMF.dtd',
	  '#default'=>"http://dlmf.nist.gov/LaTeXML");
});

DefEnvironment('{document}',
	       "?&LookupValue(Chapter)"
	       .  "(<ltx:chapter id='&LookupValue(Chapter)' refnum='&LookupValue(Chapter)'"
	       .         " label='&LookupValue(ChapterLabel)'>#body</ltx:chapter>)"
	       .  "(<ltx:document>#body</ltx:document>)",
	       beforeDigest=> sub { AssignValue(inPreamble=>0); },
	       afterDigest=> sub { $_[0]->getGullet->flush; return; });

#======================================================================
# DLMF's Numbering scheme.
DefPrimitive('\subparagraph',sub { Error("Don't use \\subparagraph!!!"); });

NewCounter('chapter',      undef,       idprefix=>'');
NewCounter('part',         'chapter',   idprefix=>'PT');
NewCounter('section',      'chapter',   idprefix=>'');
NewCounter('subsection',   'section',   idprefix=>'SS');
NewCounter('subsubsection','subsection',idprefix=>'SSS');
NewCounter('paragraph',    'section',   idprefix=>'P');
NewCounter('sidebar',      'chapter',   idprefix=>'SB');

DefMacro('\thechapter',      'XX');
DefMacro('\thechapter@ID',   'XX');
DefMacro('\thepart',         '');
DefMacro('\thesection',      '\thechapter.\arabic{section}');
DefMacro('\thesubsection',   '\thesection(\roman{subsection})');
DefMacro('\thesubsubsection','\thesubsection(\roman{subsubsection})');
DefMacro('\theparagraph',    '');
DefMacro('\thesubparagraph', '');
DefMacro('\thesidebar',      '\thechapter.SB\arabic{sidebar}');

NewCounter('equation', 'section', idprefix=>'E');
NewCounter('equationgroup', 'section', idprefix=>'EG');
NewCounter('figure',   'section', idprefix=>'F');
NewCounter('table',    'section', idprefix=>'T');
# Note that these are ambiguous
DefMacro('\theequation','\thesection.\arabic{equation}');
DefMacro('\theequationgroup','');
DefMacro('\thefigure',  '\thesection.\arabic{figure}');
DefMacro('\thetable',   '\thesection.\arabic{table}');

NewCounter('@itemize', 'section', idprefix=>'I');
NewCounter('enumi');
NewCounter('enumii');
NewCounter('enumiii');
NewCounter('enumiv');
# Since we don't want enumi (necessarily) to be reset when @itemize is incremented,
# we've got to manually define the ID macros:
DefMacro('\theenumi@ID',   '\the@itemize@ID.\@enumi@ID');
DefMacro('\theenumii@ID',  '\the@itemize@ID.\@enumii@ID');
DefMacro('\theenumiii@ID', '\the@itemize@ID.\@enumiii@ID');
DefMacro('\theenumiv@ID',  '\the@itemize@ID.\@enumiv@ID');

DefMacro('\theenumi',           '\arabic{enumi}');
DefMacro('\theenumii',          '\alph{enumii}');
DefMacro('\theenumiii',         '\roman{enumiii}');
DefMacro('\theenumiv',          '\Alph{enumiv}');

#**********************************************************************
# Frontmatter

# NOTE: Need to redo author & affiliation to handle multiple authors.
# Need to handle token lists ??
DefPrimitive('\status{}', sub{ AssignValue(chapter_status=>$_[1]); });

DefMacro('\@authorinfo','');
# Let \author & \affiliation simply collect the constructors, in order.
DefMacro('\author{}', '\xdef\@authorinfo{\@authorinfo\fmt@author{#1}}');
DefMacro('\affiliation{}', '\xdef\@authorinfo{\@authorinfo\fmt@affiliation{#1}}');

DefConstructor('\fmt@affiliation{}',"<ltx:affiliation>#1</ltx:affiliation>");

DefConstructor('\email{}', "<ltx:email>#1</ltx:email>");
DefConstructor('\addCopyright{}{}','');#"<ltx:copyright year='#1'>#2</ltx:copyright>");

DefMacro('\@acknowledgements','');
DefPrimitive('\acknowledgements{}', sub { DefMacro('\@acknowledgements',$_[1])});
DefConstructor('\fmt@acknowledgements{}', "<ltx:acknowledgements>#1</ltx:acknowledgements>");

Tag('ltx:gallery', autoClose=>1, autoOpen=>1);
DefMacro('\@galleryitems','');
DefMacro('\galleryitem Semiverbatim Semiverbatim',
	 '\xdef\@galleryitems{\@galleryitems\fmt@galleryitem{sb:\thechapter.#1}{#2}}');

DefConstructor('\fmt@galleryitem Semiverbatim Semiverbatim',
	       "<ltx:galleryitem labelref='#1' graphic='#2'/>");

DefMacro('\maketitle', 
	 '\fmt@title{\@title}\@authorinfo'
	 .'\fmt@date{\@date}'
         .'\fmt@acknowledgements{\@acknowledgements}'
	 .'\@galleryitems');

#**********************************************************************
# More environments.
DefEnvironment('{figuregroup}', "<ltx:figuregroup>#body</ltx:figuregroup>");
DefEnvironment('{figuregroup*}',"<ltx:figuregroup>#body</ltx:figuregroup>");

#**********************************************************************
# Pseudo environments.
# Not really environments that transform to elements, since they
# don't necessarily nest properly with the more important document structure.
DefEnvironment('{onecolumn}', "<ltx:begin_onecolumn/>#body<ltx:end_onecolumn/>");
# Oh, what the heck, strip out printonly, and make electroniconly disappear!
DefEnvironment('{printonly}', "<ltx:printonly>#body</ltx:printonly>");
Tag('ltx:printonly', afterClose=>sub { $_[1]->getParentNode->removeChild($_[1]); });
DefConstructor('\onlyprint{}', "");

DefEnvironment('{electroniconly}','#body');
DefConstructor('\onlyelectronic{}',"#1");

DefEnvironment('{sidebar}{}{}{}',
	       "<ltx:sidebar name='#1' label='#label' id='#id'>"
	       . "<ltx:title>#2</ltx:title>"
	       . "<ltx:author>#3</ltx:author>"
	       . "#body"
	       ."</ltx:sidebar>",
	       beforeDigest=> sub { 
		 Let('\thesection','\thesidebar');
		 Let('\thesection@ID','\thesidebar@ID'); },
	       properties=> sub { (refStepCounter('sidebar'),
				   label => sub { "sb:".ToString(Digest(T_CS('\thechapter'))).".".ToString($_[1]); }); });

#**********************************************************************
# Metadata
DefConstructor('\note{}', "^<ltx:note>#1</ltx:note>", mode=>'text', reversion=>'');
DefConstructor('\origref[]{}', "^<ltx:origref ref='#2'>#1</ltx:origref>", mode=>'text', reversion=>'');

# New form of \index allows * (to hide from printed index)
DefExpandable('\index OptionalMatch:*{}', sub { my($gullet,$star,$phrases)=@_;
						process_index_phrases($gullet,$phrases); });

# NOTE: the "^" prefix allows these to float up out of math mode.
DefConstructor('\MarkDefn []{}',
	       "^<ltx:mark type='definition'>?#1(<ltx:tag>#1</ltx:tag>)#2</ltx:mark>",
	       mode=>'text', reversion=>'');
DefConstructor('\MarkNotation {}{}',
	       "^<ltx:mark type='notation'><ltx:tag>#1</ltx:tag>#2</ltx:mark>",
	       mode=>'text', reversion=>'');

#**********************************************************************
# More Math environments.

# Redefine to accept optional (ignored) arg.
DefEnvironment('{equation}[]',
	       "<ltx:equation id='#id' refnum='#refnum'>"
	       . "<ltx:Math mode='display'>"
	       .  "<ltx:XMath>"
	       .   "#body"
	       .  "</ltx:XMath>"
	       . "</ltx:Math>"
	       ."</ltx:equation>",
	       mode=>'display_math',
	       properties=> sub { refStepCounter('equation') });
DefEnvironment('{equation*}[]',
	       "<ltx:equation id='#id'>"
	       . "<ltx:Math mode='display'>"
	       .  "<ltx:XMath>"
	       .   "#body"
	       .  "</ltx:XMath>"
	       . "</ltx:Math>"
	       ."</ltx:equation>",
	       mode=>'display_math',
	       properties=> sub { refStepID('equation') });

# equationmix contains several math environments, 
# Each math produces inline math, BUT we've set displaystyle in them!
# Although equationmix is handled differently in LaTeX, <equation>'s model is adequate.
DefEnvironment('{equationmix}[]',
	       "<ltx:equation id='#id' refnum='#refnum'>#body</ltx:equation>",
	       properties=> sub { refStepCounter('equation') },
	       # NOTE: We'd like to have displaystyle (but NOT mode=display!) for enclosed math env!
	       # Use displaystyles for math environments within here.
	       beforeDigest => sub {
		 DefEnvironment('{math}',
				"<ltx:Math mode='inline'><ltx:XMath>#body</ltx:XMath></ltx:Math>",
				mode=>'inline_math',
				beforeDigest=>sub { AssignValue(mathstyle=>'display'); });
	       }
);
DefEnvironment('{equationmix*}[]',
	       "<ltx:equation id='#id'>#body</ltx:equation>",
	       properties=> sub { refStepID('equation') });
# NOTE: I haven't handled the subequation case!!! (where equations themselves get numbered!)
DefEnvironment('{equationgroup}[]', 
	       "<ltx:equationgroup id='#id' refnum='#refnum'>#body</ltx:equationgroup>",
	       properties=> sub { refStepCounter('equation') });
DefEnvironment('{equationgroup*}[]',
	       "<ltx:equationgroup id='#id'>#body</ltx:equationgroup>",
	       properties=> sub { refStepID('equationgroup') });
DefConstructor('\intertext{}',"#1");

DefConstructor('\@constraint OptionalMatch:* {}',
	       "^<ltx:constraint hidden='?#1(yes)(no)'>#2</ltx:constraint>",
	       mode=>'text', reversion=>'');

DefExpandable('\constraint OptionalMatch:* [Default:,]{}',sub { 
  my($gullet,$starred,$punct,$constraint)=@_;
  if($starred){			# hidden.
    (T_CS('\@constraint'),T_OTHER('*'),T_BEGIN,$constraint->unlist,T_END); }
  else {
    $gullet->skipSpaces();
    my $ppunct = $gullet->readMatch(T_OTHER('.'),T_OTHER(','),T_OTHER(';')) || Tokens();
    ($punct->unlist, T_CS('\@constraint'), T_BEGIN,$constraint->unlist,$ppunct->unlist,T_END); }});

#**********************************************************************
# Table enhancement
sub tabular_thinhline {
  my($document)=@_;
  # We'll already have started the next row (tr+td) when we see this.
  if(my @td = $document->findnodes("parent::ltx:tr/preceding-sibling::*[1][local-name()='tr']/ltx:td",
				   $document->getElement)){
    foreach my $td (@td){
      add_tabular_border($td,'B'); }}} # Sneak in an additional type!!!! Add to CSS!!!

DefConstructor('\thinhline',\&tabular_thinhline);

#**********************************************************************
DefConstructor('\VRML Semiverbatim', "<ltx:VRML href='#1'/>");
DefConstructor('\GAMSclass{}',         "<ltx:GAMS class='#1'/>");
DefConstructor('\GAMSpackage{}',       "<ltx:GAMS package='#1'/>");
DefConstructor('\GAMSclasspackage{}{}',"<ltx:GAMS class='#1' package='#2'/>");
DefConstructor('\GAMSmodule{}{}{}',    "<ltx:GAMS package='#1' module='#2' module_id='#3'/>");

#**********************************************************************
1;
