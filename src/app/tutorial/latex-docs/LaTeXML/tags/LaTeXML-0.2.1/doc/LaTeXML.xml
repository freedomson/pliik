<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//NIST LaTeXML//LaTeXML article" "LaTeXML.dtd">
<?latexml class="article"?>
<?latexml package="latexmldoc"?>
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 25 **** -->
<document xmlns="http://dlmf.nist.gov/LaTeXML">
  <title><a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a>: a LaTeX to <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> Converter; <emph>Preview</emph></title>
  <author>Bruce R. Miller</author>
  <creationdate>December 20, 2004</creationdate>
  <section refnum="1">
    <title>Overview</title>
    <p>For many, LaTeX is the prefered means for document authoring, particularly when
significant mathematical content is involved.
On the other hand, content-oriented <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> is an extremely useful storage format
allowing documents to be used, and reused, for a variety of purposes, not least,
presentation on the Web.  Given the rough mismatch between the two,
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 50 **** -->
particularly for mathematics, conversion  from LaTeX to <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> is a bit tricky.
Faced with this situation, and the lack of other suitable tools at that time,
the <a href="http://dlmf.nist.gov">Digital Library of Mathematical Functions</a>
proceeded to develop thier own tool, <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a>, to fill this need.
This document describes a <emph>preview</emph> release of <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a>.
</p>
    <p>The idealistic goals of <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> are:
</p>
    <itemize>
      <item>Faithful emulation of TeX's behaviour.
</item>
      <item>Easily extensible.
</item>
      <item>Lossless; preserving both semantic and presentation cues.
</item>
      <item>Uses abstract LaTeX-like, extensible, document type.
</item>
      <item>Determine the semantics of mathematical content
(Content <a href="http://www.w3c.org/Math/"><textstyle font="typewriter">MathML</textstyle></a>, <emph>Good</emph> Presentation <a href="http://www.w3c.org/Math/"><textstyle font="typewriter">MathML</textstyle></a>, eventually <a href="http://www.openmath.org/"><textstyle font="typewriter">OpenMath</textstyle></a>).
</item>
    </itemize>
    <p>As these goals are not entirely practical, or somewhat contradictory,
they are implicitly modified by “as much as possible.”
Completely mimicing TeX's behaviour would seem to require the sneakiest modifications
to TeX, itself.  `Ease of use,' of course, is in the eye of the beholder.
Few documents are likely to have completely unambiguous mathematics markup;
human understanding of both the topic and the surrounding text is needed to
properly interpret any particular mathematical fragment.
Thus, we expect that document-specific declarations or tuning to be necessary
to faithfully convert mathematical documents, rather than presuming to
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 75 **** -->
provide a `turn-key' solution. At the same time, we would encourage
a more content-oriented mathematical markup style, than a presentation-oriented style.
</p>
    <p>This document continues with an overview of the usage of <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a>(§<ref labelref="sec:usage">2</ref>)
and its architecture (§<ref labelref="sec:architecture">3</ref>).
In §<ref labelref="sec:packages">4</ref>, an overview of customizing <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> is given.
How mathematics is converted to content-oriented forms is discussed in §<ref labelref="sec:math">5</ref>.
Finally, Appendix <ref labelref="app:architecture">A</ref> gives slightly more details about the architecture,
Appendix <ref labelref="app:hierarchy">B</ref> shows an object hierarchy of the system
and Appendix <ref labelref="app:todo">C</ref> lists the main problem areas and unfinished features.
In general, for more detail, you should see the perl documentation of various
<a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> Packages, or the source code and examples, themselves.
</p>
  </section>
  <section label="sec:usage" refnum="2"><title>Using <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a></title><p>The basic conversion to <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> (using the <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> DTD, by default) is carried out
by the command:
<quote>
<textstyle font="typewriter">latexml <textstyle font="italic">options</textstyle> document.tex &gt; document.xml</textstyle>
</quote>
The more useful command options are
</p><description><item><tag><textstyle font="typewriter">–output</textstyle>=<textstyle font="italic">outputfile</textstyle></tag>
Specifies the output file; by default the XML is written to stdout.
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 100 **** -->
</item><item><tag><textstyle font="typewriter">–preload</textstyle>=<textstyle font="italic">module</textstyle></tag>
Requests the loading of an optional module or package.  This may be useful if the TeX code
does not specificly require the module (eg. through input or usepackage).
</item><item><tag><textstyle font="typewriter">–path</textstyle>=<textstyle font="italic">dir</textstyle></tag>
Add <textstyle font="italic">dir</textstyle> to the search paths used when searching for files, modules, style files, etc;
somewhat like TEXINPUTS.  This option can be repeated.
</item><item><tag><textstyle font="typewriter">–quiet</textstyle></tag>
Reduces the verbosity of output during processing, used twice is pretty silent.
</item><item><tag><textstyle font="typewriter">–verbose</textstyle></tag>
Increases the verbosity of output during processing, used twice is pretty chatty.
Can be useful for getting more details when errors occur.
</item><item><tag><textstyle font="typewriter">–strict</textstyle></tag>
Specifies a strict processing mode. By default, undefined control sequences and
invalid document constructs (that violate the DTD) give warning messages, but attempt
to continue processing.  Using <textstyle font="typewriter">–strict</textstyle> makes them generate fatal errors.
</item><item><tag><textstyle font="typewriter">–VERSION</textstyle></tag>
Shows the version number of the LaTeXML package..
</item></description><p>See <textstyle font="typewriter">latexml –help</textstyle> for other options that may be useful for debugging.
</p><!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 125 **** -->
<p>Additional transformations, particularly the parsing of mathematical content, are carried out
by the postprocessor <textstyle font="typewriter">latexmlpost</textstyle>:
<quote>
<textstyle font="typewriter">latexmlpost <textstyle font="italic">options</textstyle> document.xml</textstyle>
</quote>
where the options are:
</p><description><item><tag><textstyle font="typewriter">–stylesheet=<textstyle font="italic">stylesheet</textstyle></textstyle></tag> requests an <textstyle font="typewriter">XSLT</textstyle> transformation of
the <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> using the given stylesheet.
</item><item><tag><textstyle font="typewriter">–format=(html|xhtml)</textstyle></tag>  Specifies the format for conversion. Default
is to leave as <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a>.
</item><item><tag><textstyle font="typewriter">–destination=<textstyle font="italic">file</textstyle></textstyle></tag>  Specifies the file to write the output.
If the file has either an html or xhtml extension, that format is assumed.
</item><item><tag><textstyle font="typewriter">–source=<textstyle font="italic">dir</textstyle></textstyle></tag> Some postprocessing (eg. transforming graphics files)
may need access to the directory  where the original TeX file resided
(if it isn't the current working directory).
</item><item><tag><textstyle font="typewriter">–verbose</textstyle></tag> Increases the amount of messages about the progress of processing.
</item><item><tag><textstyle font="typewriter">–help</textstyle></tag> Prints a brief description of the command and options.
</item></description><p>Transforming to html format involves parsing math formula and converting them to Presentation MathML,
transforming tables into an HTML consistent format, converting graphics files and applying
an XSLT transformation.
Transforming to html format is similar, but math formula are converted to images.
If no format is specified, only math parsing and conversion is done.
</p><!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 150 **** -->
</section>
  <section label="sec:architecture" refnum="3">
    <title>Architecture</title>
    <p>Like TeX, <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> is data-driven: the text and control sequences<footnote>TeX's name
for the backslashed commands; ie. macros, primitives and so forth</footnote>
in the source file (and packages used, being simply collections of macros)
direct the processing.
You exert control over the processing, and customize it, by
the <emph>implementation</emph> of the control sequences (or packages).
That, or by postprocessing — all the heavy-lifting that implements parsing
of mathematics is carried out in postprocessing<footnote>But note that it is planned,
in the next version, to move the parsing, along with dealing with math declarations,
back into <textstyle font="typewriter">latexml</textstyle>; Then <textstyle font="typewriter">latexmlpost</textstyle> will only deal with XSLT and transformations
of the format of math (eg. MathML)</footnote>; See §<ref labelref="sec:math">5</ref>.
</p>
    <figure label="fig:dataflow" placement="tb" refnum="1">
      <graphics graphic="dataflow" options="width=433.62pt"/>
      <caption>Flow of data through <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a>'s digestive tract.</caption>
    </figure>
    <p>The top-level class, <a href="perldoc/LaTeXML.html"><textstyle font="typewriter">LaTeXML</textstyle></a>, manages the processing.
Roughly, TeX's digestive tract is emulated as follows; See Figure <ref labelref="fig:dataflow">1</ref>.
The processing is broken into two phases; digestion and construction.
The <emph>Stomach</emph>  maintains the current state of processing during digestion;
The <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> object sets up a chain consisting of a stomach, a
<emph>Mouth</emph> (to convert characters from the file into <emph>Tokens</emph>; see <ref labelref="sec:tokenization">A.1</ref>)
and a <emph>Gullet</emph> (to read tokens from that Mouth, expanding any macro or expandible
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 175 **** -->
tokens in the process; see <ref labelref="sec:expansion">A.2</ref>).
The stomach then reads tokens from the gullet and digests them
(executing <emph>Primitives</emph> and  converting the remaining tokens into <emph>Boxes</emph>,
<emph>Lists</emph> and <emph>Whatsits</emph>; see <ref labelref="sec:digestion">A.3</ref>).
These three components operate in <emph>pull mode</emph>, each pulling data from the previous.
</p>
    <p>Document construction is carried out by the <emph>Intestine</emph>, which recursively traverses
the digested boxes constructing an intermediate tree representing the <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> document tree.
As a last step, the intermediate tree is converted to an <textstyle font="typewriter">XML::LibXML</textstyle> document,
which can be output or processed further.
</p>
    <p>The key features for generating <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a>, are the control sequences that we
call <emph>Constructors</emph> which encode the construction of arbitrary <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> fragments,
and our extension of the concept of a Whatsit to represent the digested form of constructors.
</p>
    <p>This process is described in slightly more detail in Appendix <ref labelref="app:architecture">A</ref>, but
see the perl documentation <textstyle font="typewriter">perldoc</textstyle> for the modules for the APIs, and, ultimately,
the source for full details.
</p>
  </section>
  <section label="sec:packages" refnum="4">
    <title>Packages: Implementing Control Sequences</title>
    <p>The processsing of the LaTeX document and its  conversion into <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> is affected
by the definitions of control sequences, either as macros, primitives or constructors,
and other declarations specifying the document type, properties of <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> tags, ligatures, ….
These definitions and declarations are typically contained in `packages' which provide
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 200 **** -->
the implementation of LaTeX classes and packages.  For example, the LaTeX directive
\usepackage{foo} would cause <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> to load the file <textstyle font="typewriter">foo.ltxml</textstyle>.
This file would be sought in any of the directories in perl's @INC list (typically
including the current directory), or in a LaTeXML/Package subdirectory of any of
those directories.  If no such file is found, <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> would look for <textstyle font="typewriter">foo.sty</textstyle> and
attempt to process it.
</p>
    <p>When processing a typical file, say <textstyle font="italic">jobname</textstyle><textstyle font="typewriter">.tex</textstyle>,
the following packages are loaded:
</p>
    <enumerate>
      <item>the core <textstyle font="typewriter">TeX</textstyle> package
</item>
      <item>any packages named with the –preload option,
</item>
      <item>a file <textstyle font="italic">jobname</textstyle><textstyle font="typewriter">.latexml</textstyle>, if present;
this provides for document-specific declarations.
</item>
    </enumerate>
    <p>Document processing then commences; by default, <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> assumes that the document is plain TeX.
However, if a \documentclass directive is encountered, the <textstyle font="typewriter">LaTeX</textstyle> package, as well
as a package for the named document class are loaded.
</p>
    <p><a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> implementations are provided for a number of the standard LaTeX packages,
although many implement only part of the functionality.  Contributed implementations are,
of course, welcome.  These files, as well as the document specific <textstyle font="italic">jobname</textstyle><textstyle font="typewriter">.latexml</textstyle>,
are essentially Perl modules, but use the facilities described in <a href="perldoc/LaTeXML/Package.html"><textstyle font="typewriter">LaTeXML::Package</textstyle></a>.
</p>
  </section>
  <section label="sec:math" refnum="5"><title>Mathematics</title><!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 225 **** -->
<p>The mathematical material is parsed into a content-oriented representation following
the usual steps: lexical scanning, grammar-based parsing and (eventually) type-analysis, but
with a few twists. As <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> constructs the initial document, the mathematical material
is converted mainly into a sequence of lexical (mathmematical) tokens (<textstyle font="typewriter">XMTok</textstyle>),
possibly carrying extra information such as name, grammatical role, font, style, etc.
The exceptions are where the mathematical structure is clear from the markup itself,
such as \frac or sub- and superscripts, where a generalized <emph>application</emph> (<textstyle font="typewriter">XMApp</textstyle>)
is constructed.  The substructures will typically play no role in the parsing of the upper
layer of tokens; they are wrapped (in an <textstyle font="typewriter">XMArg</textstyle> or <textstyle font="typewriter">XMWrap</textstyle> element) and parsed
as separate subexpressions.  Thus we speak of <a href="http://dlmf.nist.gov/LaTeXML/"><textstyle font="typewriter">LaTeXML</textstyle></a> as being a <emph>structure preserving lexer</emph>.
</p><p>The parser, invoked by the postprocessor, works only with the top-level lists of lexical tokens,
or with those sublists contained in an <textstyle font="typewriter">XMArg</textstyle>.  The grammar works primarily through
the name and grammatical role.  The name is given by an attribute, or the content if it is
the same.  The role (things like ID, FUNCTION, OPERATOR, OPEN, …) is also given
by an attribute, or, if not present, the name is looked up in a document-specific
dictionary (<textstyle font="italic">jobname</textstyle><textstyle font="typewriter">.dict</textstyle>), or in a default dictionary.
</p><p>Additional exceptions that need fuller explanation are:
(1) <a href="perldoc/LaTeXML/Definition.html#LaTeXML/Constructor"><textstyle font="typewriter">LaTeXML::Constructor</textstyle></a>s may wish to create a dual object (<textstyle font="typewriter">XMDual</textstyle>) whose children are
the semantic and presentational forms.
(2) Spacing and similar markup generates <textstyle font="typewriter">XMHint</textstyle> elements, which are currently ignored
during parsing, but probably shouldn't.
</p><!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 250 **** -->
</section>
  <appendix label="app:architecture" refnum="A">
    <title>Architectural Details</title>
    <subsection label="sec:tokenization" refnum="A.1">
      <title>Tokenization</title>
      <paragraph refnum="">
        <title>
          <a href="perldoc/LaTeXML/Mouth.html">
            <textstyle font="typewriter">LaTeXML::Mouth</textstyle>
          </a>
        </title>
        <p>Given a string or file, a mouth tokenizes the input text according to
the current category codes in the <a href="perldoc/LaTeXML/Stomach.html"><textstyle font="typewriter">LaTeXML::Stomach</textstyle></a>. Category codes distinguish classes of characters
such as plain characters, control sequences,  active characters and TeX's special characters
for grouping,  sub- and super-script and math mode.  The main method is <textstyle font="typewriter">-&gt;readToken</textstyle>, which
returns the next <a href="perldoc/LaTeXML/Token.html"><textstyle font="typewriter">LaTeXML::Token</textstyle></a> from the input.  A <a href="perldoc/LaTeXML/Mouth.html#LaTeXML/FileMouth"><textstyle font="typewriter">LaTeXML::FileMouth</textstyle></a> is a mouth for reading from a file.
</p>
      </paragraph>
      <paragraph refnum="">
        <title><a href="perldoc/LaTeXML/Token.html"><textstyle font="typewriter">LaTeXML::Token</textstyle></a>, <a href="perldoc/LaTeXML/Token.html#LaTeXML/Tokens"><textstyle font="typewriter">LaTeXML::Tokens</textstyle></a></title>
        <p>These packages represent a Token (a pair containing a character
or string and the category code), and a list of tokens, respectively.  The latter responds to the same
interface as <a href="perldoc/LaTeXML/Mouth.html"><textstyle font="typewriter">LaTeXML::Mouth</textstyle></a>, so it can also be read from.
</p>
      </paragraph>
    </subsection>
    <subsection label="sec:expansion" refnum="A.2">
      <title>Expansion</title>
      <paragraph refnum="">
        <title>
          <a href="perldoc/LaTeXML/Gullet.html">
            <textstyle font="typewriter">LaTeXML::Gullet</textstyle>
          </a>
        </title>
        <p>The gullet reads tokens from the mouth, possibly expanding them.
The main methods are <textstyle font="typewriter">-&gt;readToken</textstyle> and  <textstyle font="typewriter">-&gt;readXToken</textstyle>.
The latter returns the next unexpandable token from the input;
if the token's current meaning in the <a href="perldoc/LaTeXML/Stomach.html"><textstyle font="typewriter">LaTeXML::Stomach</textstyle></a> is an <a href="perldoc/LaTeXML/Definition.html#LaTeXML/Expandable"><textstyle font="typewriter">LaTeXML::Expandable</textstyle></a> (a macro
or other expandable control sequences),
it is expanded and its expansion is replaced in the input before retrying.
The driving <a href="perldoc/LaTeXML.html"><textstyle font="typewriter">LaTeXML</textstyle></a> instance binds the exported variable $<textstyle font="typewriter">GULLET</textstyle> to the current gullet.
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 275 **** -->
</p>
      </paragraph>
      <paragraph refnum="">
        <title>
          <a href="perldoc/LaTeXML/Definition.html#LaTeXML/Expandable">
            <textstyle font="typewriter">LaTeXML::Expandable</textstyle>
          </a>
        </title>
        <p>Instances (subclass of <a href="perldoc/LaTeXML/Definition.html"><textstyle font="typewriter">LaTeXML::Definition</textstyle></a>)
represent the expansions of control sequences. Expandables typically are used for
conditionals (like \if, \ifx, …) and built-in control sequences that expand
into sequences of tokens (such as \jobname). The arguments are read from the gullet,
and used in generating the replacement tokens.
</p>
      </paragraph>
    </subsection>
    <subsection label="sec:digestion" refnum="A.3">
      <title>Digestion</title>
      <paragraph refnum="">
        <title>
          <a href="perldoc/LaTeXML/Stomach.html">
            <textstyle font="typewriter">LaTeXML::Stomach</textstyle>
          </a>
        </title>
        <p>The Stomach maintains global state during digestion and carries
out the digestion of tokens. The top-level method <textstyle font="typewriter">-&gt;readAndDigestFile($file)</textstyle>
sets up the initial state and stack, pre-loads packages (at least <textstyle font="typewriter">TeX</textstyle>), and then digests
all available input, returning the digested <a href="perldoc/LaTeXML/Box.html#LaTeXML/List"><textstyle font="typewriter">LaTeXML::List</textstyle></a>.
The driving <a href="perldoc/LaTeXML.html"><textstyle font="typewriter">LaTeXML</textstyle></a> instance binds the exported variable $<textstyle font="typewriter">GULLET</textstyle> to the current gullet.
</p>
        <p>The mouth and gullet refer to the stomach to set or access the mode, various values and
definitions. To mimic TeX's binding of definitions and values scoped by grouping,
the stomach maintains a stack of the active bindings for each control sequence, along with the
bindings to be undone on the next end-group; this allows the most common operations to be carried
out in linear time.
</p>
        <p>Basically, there are four cases when digesting a <a href="perldoc/LaTeXML/Token.html"><textstyle font="typewriter">LaTeXML::Token</textstyle></a>:
</p>
        <itemize>
          <item>A plain character is simply converted to a <a href="perldoc/LaTeXML/Box.html"><textstyle font="typewriter">LaTeXML::Box</textstyle></a>(or <a href="perldoc/LaTeXML/Box.html#LaTeXML/MathBox"><textstyle font="typewriter">LaTeXML::MathBox</textstyle></a> in math mode),
recording the current <a href="perldoc/LaTeXML/Font.html"><textstyle font="typewriter">LaTeXML::Font</textstyle></a>.
</item>
          <item>If a control sequence represents <a href="perldoc/LaTeXML/Definition.html#LaTeXML/Primitive"><textstyle font="typewriter">LaTeXML::Primitive</textstyle></a>, the primitive is invoked, executing its
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 300 **** -->
stored subroutine.  This is typically done for side effect (changing the state in the stomach),
although they may also contribute digested material.
As with macros, any arguments to the primitive are read from the gullet.
</item>
          <item>Grouping (or environment bodies) are collected into a <a href="perldoc/LaTeXML/Box.html#LaTeXML/List"><textstyle font="typewriter">LaTeXML::List</textstyle></a> (or <a href="perldoc/LaTeXML/Box.html#LaTeXML/MathList"><textstyle font="typewriter">LaTeXML::MathList</textstyle></a> in math mode).
</item>
          <item>A special class of control sequence, called a <a href="perldoc/LaTeXML/Definition.html#LaTeXML/Constructor"><textstyle font="typewriter">LaTeXML::Constructor</textstyle></a> produces a
<a href="perldoc/LaTeXML/Box.html#LaTeXML/Whatsit"><textstyle font="typewriter">LaTeXML::Whatsit</textstyle></a> which remembers the control sequence and arguments that
created it, and defines its own translation into <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a> elements, attributes and data.
Arguments to a constructor are read from the gullet and also digested.
</item>
        </itemize>
        <p>Finally, <textstyle font="typewriter">Filter</textstyle>s are applied to the resulting lists (see below).
</p>
      </paragraph>
      <paragraph refnum="">
        <title><a href="perldoc/LaTeXML/Box.html"><textstyle font="typewriter">LaTeXML::Box</textstyle></a>, <a href="perldoc/LaTeXML/Box.html#LaTeXML/MathBox"><textstyle font="typewriter">LaTeXML::MathBox</textstyle></a>, <a href="perldoc/LaTeXML/Box.html#LaTeXML/List"><textstyle font="typewriter">LaTeXML::List</textstyle></a>, <a href="perldoc/LaTeXML/Box.html#LaTeXML/MathList"><textstyle font="typewriter">LaTeXML::MathList</textstyle></a>, <a href="perldoc/LaTeXML/Box.html#LaTeXML/Whatsit"><textstyle font="typewriter">LaTeXML::Whatsit</textstyle></a></title>
        <p>Instances of
these classes represent the digested objects: boxes being characters; lists being sequences
of digested objects; whatsits representing some sort of document fragment.
Note that, currently, Although \par tends to do the `right thing', there
is no real notion of horizontal or vertical mode.
</p>
      </paragraph>
      <paragraph refnum="">
        <title><a href="perldoc/LaTeXML/Definition.html#LaTeXML/Primitive"><textstyle font="typewriter">LaTeXML::Primitive</textstyle></a>, <a href="perldoc/LaTeXML/Definition.html#LaTeXML/Constructor"><textstyle font="typewriter">LaTeXML::Constructor</textstyle></a></title>
        <p>These subclasses of <a href="perldoc/LaTeXML/Definition.html"><textstyle font="typewriter">LaTeXML::Definition</textstyle></a>are carried out
(at least partly) in the stomach. They may have before and after daemons; little bits
of code that affect the state.  A primitive is carried out for only side-effect,
but a constructor generates a whatsit that survives to the <a href="perldoc/LaTeXML/Intestine.html"><textstyle font="typewriter">LaTeXML::Intestine</textstyle></a>.
</p>
      </paragraph>
      <paragraph refnum="">
        <title>
          <textstyle font="typewriter">Filter</textstyle>
        </title>
        <p>Filters are roughly a generalization of ligatures. They are matched
against sequences of digested items during digestion; if they pattern is matched, it is substituted
by the replacement.  They are currently defined for the kinds of substitutions that would
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 325 **** -->
make sense for <a href="http://www.w3c.org/XML/"><textstyle font="typewriter">XML</textstyle></a>; namely repeated characters like <textstyle font="typewriter">-</textstyle> or <textstyle font="typewriter">`</textstyle> are replaced by
the appropriate unicode. Also, in math, patterns of digits or letters (in non-mathitalic fonts)
are combined as one would expect.  On the other hand, ligatures like <textstyle font="typewriter">ffi</textstyle> do not
really seem appropriate here — or do they? — they would be easily implemented, but
they might adversely affect search.
</p>
      </paragraph>
    </subsection>
    <subsection label="sec:construction" refnum="A.4">
      <title>Construction</title>
      <paragraph refnum="">
        <title>
          <a href="perldoc/LaTeXML/Intestine.html">
            <textstyle font="typewriter">LaTeXML::Intestine</textstyle>
          </a>
        </title>
        <p>The intestine traverses the recursive <a href="perldoc/LaTeXML/Box.html#LaTeXML/List"><textstyle font="typewriter">LaTeXML::List</textstyle></a> of digested <a href="perldoc/LaTeXML/Box.html#LaTeXML/List"><textstyle font="typewriter">LaTeXML::List</textstyle></a>s,
<a href="perldoc/LaTeXML/Box.html"><textstyle font="typewriter">LaTeXML::Box</textstyle></a>es and <a href="perldoc/LaTeXML/Box.html#LaTeXML/Whatsit"><textstyle font="typewriter">LaTeXML::Whatsit</textstyle></a>s, constructing a (<a href="perldoc/LaTeXML/Node.html#LaTeXML/Document"><textstyle font="typewriter">LaTeXML::Document</textstyle></a>),
according to the current <a href="perldoc/LaTeXML/Model.html"><textstyle font="typewriter">LaTeXML::Model</textstyle></a>.  Generally, a <a href="perldoc/LaTeXML/Box.html"><textstyle font="typewriter">LaTeXML::Box</textstyle></a> gives rise to text data, whereas
a <a href="perldoc/LaTeXML/Box.html#LaTeXML/Whatsit"><textstyle font="typewriter">LaTeXML::Whatsit</textstyle></a> describes a document fragment (consisting of elements, thier attributes and or content).
At each insertion, the <a href="perldoc/LaTeXML/Model.html"><textstyle font="typewriter">LaTeXML::Model</textstyle></a> is consulted to determine if the insertion is allowed at the
current point, or if intermediate elements may need to be opened or closed.
This allows the document structure of sections and paragraphs to be automatically
constructed, for example, even though LaTeX doesn't explicitly close \section,
nor open \par.
(See <a href="perldoc/LaTeXML/Intestine.html"><textstyle font="typewriter">LaTeXML::Intestine</textstyle></a>,  <a href="perldoc/LaTeXML/Node.html"><textstyle font="typewriter">LaTeXML::Node</textstyle></a>,  <a href="perldoc/LaTeXML/Model.html"><textstyle font="typewriter">LaTeXML::Model</textstyle></a>).
</p>
      </paragraph>
    </subsection>
  </appendix>
  <appendix label="app:hierarchy" refnum="B">
    <title>Object Hierarchy</title>
    <description>
      <item><tag><a href="perldoc/LaTeXML/Object.html"><textstyle font="typewriter">LaTeXML::Object</textstyle></a></tag>: Abstract base class.
<description><!-- %In Token.pm -->
<item><tag><a href="perldoc/LaTeXML/Token.html"><textstyle font="typewriter">LaTeXML::Token</textstyle></a></tag>: A TeX token: character/string with category code.
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 350 **** -->
</item><item><tag><a href="perldoc/LaTeXML/Token.html#LaTeXML/Tokens"><textstyle font="typewriter">LaTeXML::Tokens</textstyle></a></tag>: A list of <a href="perldoc/LaTeXML/Token.html"><textstyle font="typewriter">LaTeXML::Token</textstyle></a>s.
</item><item><tag><a href="perldoc/LaTeXML/Token.html#LaTeXML/Number"><textstyle font="typewriter">LaTeXML::Number</textstyle></a></tag>: A TeX number.
<description><item><tag><a href="perldoc/LaTeXML/Token.html#LaTeXML/Dimension"><textstyle font="typewriter">LaTeXML::Dimension</textstyle></a></tag>: A TeX dimension; number with unit.
<description><item><tag><a href="perldoc/LaTeXML/Token.html#LaTeXML/MuDimension"><textstyle font="typewriter">LaTeXML::MuDimension</textstyle></a></tag>: A TeX math-mode dimension.
</item><item><tag><a href="perldoc/LaTeXML/Token.html#LaTeXML/Glue"><textstyle font="typewriter">LaTeXML::Glue</textstyle></a></tag>:  A TeX dimension with shrink and stretch.
<description><item><tag><a href="perldoc/LaTeXML/Token.html#LaTeXML/MuGlue"><textstyle font="typewriter">LaTeXML::MuGlue</textstyle></a></tag>: A TeX math-mode glue.
</item></description>
</item></description>
</item></description>
<!-- %In Box.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Box.html"><textstyle font="typewriter">LaTeXML::Box</textstyle></a></tag>: A digested character/string; base class for digested objects.
<description><item><tag><a href="perldoc/LaTeXML/Box.html#LaTeXML/MathBox"><textstyle font="typewriter">LaTeXML::MathBox</textstyle></a></tag>: A digested character token in math.
</item><item><tag><a href="perldoc/LaTeXML/Box.html#LaTeXML/Comment"><textstyle font="typewriter">LaTeXML::Comment</textstyle></a></tag>: A digested comment.
</item><item><tag><a href="perldoc/LaTeXML/Box.html#LaTeXML/List"><textstyle font="typewriter">LaTeXML::List</textstyle></a></tag>: A list of text-mode boxes.
<description><item><tag><a href="perldoc/LaTeXML/Box.html#LaTeXML/MathList"><textstyle font="typewriter">LaTeXML::MathList</textstyle></a></tag>: A list of math-mode boxes.
</item></description>
</item><item><tag><a href="perldoc/LaTeXML/Box.html#LaTeXML/Whatsit"><textstyle font="typewriter">LaTeXML::Whatsit</textstyle></a></tag>: A special digested object with arguments and properties; has its own
rules for conversion into an document fragment.
</item></description>
<!-- %In Font.pm%**** /home/bruce/latexml/doc/LaTeXML.tex Line 375 **** -->
</item><item><tag><a href="perldoc/LaTeXML/Font.html"><textstyle font="typewriter">LaTeXML::Font</textstyle></a></tag>: A representation of a font, attached to digested objects.
<description><item><tag><a href="perldoc/LaTeXML/Font.html#LaTeXML/MathFont"><textstyle font="typewriter">LaTeXML::MathFont</textstyle></a></tag>: A font in math; special rules for merging.
</item></description>
<!-- %In Node.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Node.html"><textstyle font="typewriter">LaTeXML::Node</textstyle></a></tag>:  Intermediate representation of an XML element (also base class).
<description><item><tag><a href="perldoc/LaTeXML/Node.html#LaTeXML/TextNode"><textstyle font="typewriter">LaTeXML::TextNode</textstyle></a></tag>: a text node.
</item><item><tag><a href="perldoc/LaTeXML/Node.html#LaTeXML/CommentNode"><textstyle font="typewriter">LaTeXML::CommentNode</textstyle></a></tag>: a comment node.
</item><item><tag><a href="perldoc/Node.html#LaTeXML/ProcessingInstruction"><textstyle font="typewriter">LaTeXML::ProcessingInstruction</textstyle></a></tag>: a processing instruction
</item><item><tag><a href="perldoc/LaTeXML/Node.html#LaTeXML/Document"><textstyle font="typewriter">LaTeXML::Document</textstyle></a></tag>: the root document object.
</item></description>
<!-- %In Definition.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Definition.html"><textstyle font="typewriter">LaTeXML::Definition</textstyle></a></tag>: Represents the action of executable control sequences
<description><item><tag><a href="perldoc/LaTeXML/Definition.html#LaTeXML/Expandable"><textstyle font="typewriter">LaTeXML::Expandable</textstyle></a></tag>: A definition expandable in the Gullet, (eg. a macro).
</item><item><tag><a href="perldoc/LaTeXML/Definition.html#LaTeXML/Primitive"><textstyle font="typewriter">LaTeXML::Primitive</textstyle></a></tag>: Definition for primitives, carried out in Stomach.
<description><item><tag><a href="perldoc/LaTeXML/Definition.html#LaTeXML/Register"><textstyle font="typewriter">LaTeXML::Register</textstyle></a></tag>: A definition for TeX registers.
</item><item><tag><a href="perldoc/LaTeXML/Definition.html#LaTeXML/Constructor"><textstyle font="typewriter">LaTeXML::Constructor</textstyle></a></tag>: A definition that `constructs' document fragments;
generates a Whatsit during digestion.
</item></description>
</item></description>
<!-- %In Parameters.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Parameters.html"><textstyle font="typewriter">LaTeXML::Parameters</textstyle></a></tag>: A definition's parameter list; a collection of <a href="perldoc/LaTeXML/Parameter.html#LaTeXML/Parameter"><textstyle font="typewriter">LaTeXML::Parameter</textstyle></a>s.
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 400 **** -->
</item><item><tag><a href="perldoc/LaTeXML/Parameter.html#LaTeXML/Parameter"><textstyle font="typewriter">LaTeXML::Parameter</textstyle></a></tag>: A definition's parameter, including type, optional, etc.
</item><item><tag><a href="perldoc/LaTeXML/Parameter.html#LaTeXML/KeyVals"><textstyle font="typewriter">LaTeXML::KeyVals</textstyle></a></tag>: Representation of LaTeX-style Key-Value lists.
<!-- %In Mouth.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Mouth.html"><textstyle font="typewriter">LaTeXML::Mouth</textstyle></a></tag>: The organ that converts characters (eg. from files) into <a href="perldoc/LaTeXML/Token.html"><textstyle font="typewriter">LaTeXML::Token</textstyle></a>s.
<description><item><tag><a href="perldoc/LaTeXML/Mouth.html#LaTeXML/FileMouth"><textstyle font="typewriter">LaTeXML::FileMouth</textstyle></a></tag>: A mouth that tokenizes input from a file.
</item></description>
<!-- %In Gullet.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Gullet.html"><textstyle font="typewriter">LaTeXML::Gullet</textstyle></a></tag>: The organ that expands <a href="perldoc/LaTeXML/Token.html"><textstyle font="typewriter">LaTeXML::Token</textstyle></a>s into other sequences of tokens;
also provides common `parsing' operations such as reading numbers, delimited lists of tokens, etc.
<!-- %In Stomach.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Stomach.html"><textstyle font="typewriter">LaTeXML::Stomach</textstyle></a></tag>: The organ that digests <a href="perldoc/LaTeXML/Token.html"><textstyle font="typewriter">LaTeXML::Token</textstyle></a>s, converting them to a tree of
digested boxes; also contains the current state of grouping, bindings of definitions, etc.
<!-- %In Intestine.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Intestine.html"><textstyle font="typewriter">LaTeXML::Intestine</textstyle></a></tag>: The organ that constructs the document tree from digested boxes.
Vaguely analogous to TeX's output routine, but runs at end of document, rather than per-page.
<!-- %In Model.pm -->
</item><item><tag><a href="perldoc/LaTeXML/Model.html"><textstyle font="typewriter">LaTeXML::Model</textstyle></a></tag>: Represents the model of the document, extracted from the DTD.
</item></description>
</item>
    </description>
  </appendix>
  <appendix label="app:todo" refnum="C">
    <title>Issues and ToDo</title>
    <p>Lots…!
</p>
    <itemize>
      <item>Lots of useful LaTeX packages have not been implemented, and those
<!-- %**** /home/bruce/latexml/doc/LaTeXML.tex Line 425 **** -->
that are aren't necessarily complete.
</item>
      <item>TeX boxes aren't really complete, and in particular things like \ht0
don't work.
</item>
      <item>Possibly useful to override (pre-override?) a macro defined in the source file;
that is, define it and silently ignore the definition given in the source.
</item>
      <item>…um, …<emph>documentation</emph>!
</item>
    </itemize>
  </appendix>
</document>
