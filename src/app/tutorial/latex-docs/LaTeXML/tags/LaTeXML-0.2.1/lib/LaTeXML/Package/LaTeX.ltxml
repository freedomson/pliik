# -*- CPERL -*-
# /=====================================================================\ #
# |  LaTeX                                                              | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

#**********************************************************************
# Organized following 
#  "LaTeX: A Document Preparation System"
#   by Leslie Lamport
#   2nd edition
# Addison Wesley, 1994
# Appendix C. Reference Manual
#**********************************************************************
# NOTE: A lot of this should be in Primitives.pm 
# either builtin, or inherited from plain.
#**********************************************************************
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
no warnings 'redefine';

#**********************************************************************
# C.1.  Commands and Environments.
#**********************************************************************

#======================================================================
# C.1.1 Command Names and Arguments
#======================================================================
# Nothing...

#======================================================================
# C.1.2 Environments
#======================================================================

# In LaTeX, \newenvironment{env} defines \env and \endenv.
# \begin{env} & \end{env} open/close a group, and invoke these.
# In fact, the \env & \endenv don't have to have been created by
# \newenvironment; And in fact \endenv doesn't even have to be defined!
# [it is created by \csname, and equiv to \relax if no previous defn]

# We need to respect these usages here, but we also want to be able
# to define environment constructors that `capture' the body so that
# it can be processed specially, if needed.  These are the magic
# '\begin{env}', '\end{env}' control sequences created by DefEnvironment.

DefExpandable('\begin{}',sub { 
  my($self,$env)=@_;
  my $name = $env->toString;
  if(T_CS("\\begin{$name}")->getDefinition){
    T_CS("\\begin{$name}"); } # Magic cs!
  else {			# If not defined, let stomach handle it.
    (T_CS('\begingroup'),T_CS("\\$name")); }});

DefExpandable('\end{}',  sub { 
  my($self,$env)=@_;
  my $name = $env->toString;
  if(T_CS("\\end{$name}")->getDefinition){
    T_CS("\\end{$name}"); } # Magic cs!
  else {
    (T_CS("\\end$name"),T_CS('\endgroup')); }});
#======================================================================
# C.1.3 Fragile Commands
#======================================================================
# Because of the way we `move information', revertable and pre-processed,
# I don't think we actually need to do anything ... 
# [Course that means we're not _really_ TeX!]
DefExpandable('\protect',undef);

#======================================================================
# C.1.4 Declarations
#======================================================================
# actual implementation later.
#======================================================================
# C.1.5 Invisible Commands
#======================================================================
# actual implementation later.

#======================================================================
# C.1.6 The \\ Command
#======================================================================
# In math, \\ is just a formatting hint, unless within an array, cases, .. environment.
DefConstructor("\\\\ Flag:* []", "?IfMath(<XMHint name='\\'/>)(\n)", untex=>"\\\\\n");

#**********************************************************************
# C.2. The Structure of the Document
#**********************************************************************
#   prepended files (using filecontents environment)
#   preamble (starting with \documentclass)
#   \begin{document}
#    text
#   \end{document}

DefEnvironment('{document}','<document>#body</document>',
	       beforeDigest=> sub { $STOMACH->setInPreamble(0); },
	       afterDigest=> sub { $GULLET->flush; return; });

#**********************************************************************
# C.3. Sentences and Paragraphs
#**********************************************************************

#======================================================================
# C.3.1 Making Sentences
#======================================================================
# quotes;  should these be handled in DOM/construction?
# dashes:  We'll need some sort of Ligature analog, or something like
# Omega's OTP, to combine sequences of "-" into endash, emdash,
# Perhaps it also applies more semantically?
# Such as interpreting certain sequences as section headings,
# or math constructs.

# Spacing; in Primitives.pm

# Special Characters; in Primitives.pm

# Logos
# \TeX is in Primitives.pm
DefConstructor('\LaTeX', 'LaTeX');

our @MonthNames=(qw( January February March April May June
		     July August September October November December));
DefExpandable('\today',sub { 
   Explode($MonthNames[$STOMACH->lookupValue('\month')->getValue-1]
	   ." ".$STOMACH->lookupValue('\day')->getValue
	   .', '.$STOMACH->lookupValue('\year')->getValue); });

DefConstructor('\emph{}', "<emph>#1</emph>", mode=>'text');
Tag('text', autoClose=>1, autoOpen=>1); # ???

#======================================================================
# C.3.2 Making Paragraphs
#======================================================================
# \noindent, \indent, \par in Primitives.pm

# Style parameters
# \parindent, \baselineskip, \parskip alreadin in Primitives.pm
our %sparms=(textwidth=>'6in', columnwidth=>'6in', linewidth=>'6in', baselinestretcth=>0);
foreach my $p (keys %sparms){
  DefRegister("\\$p",Dimension($sparms{$p})); }

#======================================================================
# C.3.3 Footnotes
#======================================================================
# NOTE: probably should default the mark to some counter?
DefConstructor('\footnote[]{}',"<footnote ?#1(footnotemark='#1')>#2</footnote>");
# NOTE: DOM should reattach the footnotetext to the footnotemark ?
#  Hmm, in general the mark & text _could_ come in either order...
DefConstructor('\footnotemark[]',""); # ????
DefConstructor('\footnotetext[]{}',"<footnote ?#1(footnotemark='#1')>#2</footnote>");

# Style parameters
DefRegister('\footnotesep',Dimension(0));
DefPrimitive('\footnoterule',undef);

#======================================================================
# C.3.4 Accents and Special Symbols
#======================================================================
# See Primitives.pm

# See Section 3.3.2 Mathematical Symbols, below

#**********************************************************************
# C.4 Sectioning and Table of Contents
#**********************************************************************

#======================================================================
# C.4.1 Sectioning Commands.
#======================================================================
# Note that LaTeX allows fairly arbitrary stuff in \the<ctr>, although
# it can get you in trouble.  However, in almost all cases, the result
# is plain text.  So, I'm putting refnum as an attribute, where I like it!
# You want something else? Redefine!

# A little more messy than seems necessary:
#  We don't know whether to step the counter and update \@currentlabel until we see the '*',
# but we have to know it before we digest the title, since \label can be there!
foreach my $sec (qw(part chapter section subsection subsubsection paragraph subparagraph)){
  Tag($sec, autoClose=>1);
  DefExpandable('\\'.$sec.' Flag:*',
		sub { 
		  my($self,$flag)=@_;
		  if($flag){
		    (T_CS('\\@@'.$sec)); }
		  else {
		    $STOMACH->refStepCounter($sec);
		    (T_CS('\\@@'.$sec),T_OTHER('['),T_CS('\@currentlabel'),T_OTHER(']')); }});
  DefConstructor('\\@@'.$sec.'[][]{}',
		 "<$sec ?#1(refnum='#1')><title>#3</title>?#2(<toctitle>#2</toctitle>)",
		 beforeDigest=>sub{ $STOMACH->bgroup; },
		 afterDigest=>sub{ $STOMACH->egroup; }); }

# Not sure if this is best, but if no explicit \section'ing...
Tag('section',autoOpen=>1);
#======================================================================
# C.4.2 The Appendix
#======================================================================
# NOTE: 2 options:
#  1) redefine \section, etc to produce <appendix>, <subappendix>, etc.
#  2) Wrap remainder of doc with <appendix>
# DefPrimitive('\appendix');

#======================================================================
# C.4.3 Table of Contents
#======================================================================
# Ignore these; leave it up to post processing.
DefPrimitive('\tableofcontents', undef);
DefPrimitive('\listoffigures',   undef);
DefPrimitive('\listoftables',    undef);

DefPrimitive('\addcontentsline{}{}{}', undef);
DefPrimitive('\numberline{}{}', undef);
DefPrimitive('\addtocontents{}{}', undef);

#======================================================================
# C.4.4 Style registers
#======================================================================
DefRegister('\secnumdepth',Number(0));
DefRegister('\tocdepth',Number(0));

#**********************************************************************
# C.5 Classes, Packages and Page Styles
#**********************************************************************

#======================================================================
# C.5.1 Document Class
#======================================================================
# \documentclass is defined in Primitives.pm, to automatically switch
# to LaTeX mode when processing LaTeX files.

# Style Parameters
DefRegister('\bibindent',Dimension(0));
DefRegister('\columnsep',Dimension(0));
DefRegister('\columnseprule',Dimension(0));
DefRegister('\mathindent',Dimension(0));

#======================================================================
# C.5.2 Packages
#======================================================================
# We'll prefer to load package.pm, but will try package.sty or 
# package.tex (the latter being unlikely to work, but....)
# See Stomach.pm for details
# Ignorable packages ??
# pre-defined packages??

DefConstructor('\usepackage[]{}',"<?latexml package='#2' ?#1(options='#1')?>",
	       afterDigest=>sub { my($whatsit,$options,$packages)=@_;
				  my @pkgs = split(',',$packages->toString);
				  $options = [($options ? split(',',($options->toString)) :())];
				  map($STOMACH->input($_, options=>$options),@pkgs);
				  return; });

#======================================================================
# C.5.3 Page Styles
#======================================================================
# Ignored
DefPrimitive('\pagestyle{}',    undef);
DefPrimitive('\thispagestyle{}',undef);
DefPrimitive('\markright{}',    undef);
DefPrimitive('\markboth{}{}',   undef);
DefPrimitive('\pagenumbering{}',undef);
DefPrimitive('\twocolumn[]',    undef);
DefPrimitive('\onecolumn',      undef);

# Style parameters from Fig. C.3, p.182
DefRegister('\paperheight',Dimension(0));
DefRegister('\paperwidth',Dimension(0));
DefRegister('\textheight',Dimension(0));
DefRegister('\textwidth',Dimension(0));
DefRegister('\topmargin',Dimension(0));
DefRegister('\headheight',Dimension(0));
DefRegister('\headsep',Dimension(0));
DefRegister('\footskip',Dimension(0));
DefRegister('\evensidemargin',Dimension(0));
DefRegister('\oddsidemargin',Dimension(0));
DefRegister('\marginparwidth',Dimension(0));
DefRegister('\marginparsep',Dimension(0));

#======================================================================
# C.5.4 The Title Page and Abstract
#======================================================================

DefMacro('\@title','');
DefMacro('\@author','');
DefMacro('\@date','\today');
DefPrimitive('\title{}',    sub { DefMacro('\@title',$_[1])});
DefPrimitive('\author{}',   sub { DefMacro('\@author',$_[1])});
DefPrimitive('\date{}',     sub { DefMacro('\@date',$_[1])});
DefConstructor('\thanks{}', "<thanks>#1</thanks>");

# Introduce secret control sequences to format the title, date, etc.
# These will be used by \maketitle when the time comes.
DefConstructor('\fmt@title{}', "<title>#1</title>");
DefConstructor('\fmt@author{}', "<author>#1</author>");
# Would be nice to put the ISO date as an attribute!
DefConstructor('\fmt@date{}', "<creationdate>#1</creationdate>");
# This needs to be a macro so that \@author, etal, get expanded.
DefMacro('\maketitle', '\fmt@title{\@title}\fmt@author{\@author}\fmt@date{\@date}');

DefEnvironment('{abstract}','<abstract>#body</abstract>');
# Presumably you'll do whatever you need to specify author, etc ???
DefEnvironment('{titlepage}','#body');

#**********************************************************************
# C.6 Displayed Paragraphs
#**********************************************************************
DefEnvironment('{center}','<centering>#body</centering>');
DefEnvironment('{centering}','<centering>#body</centering>');
# NOTE: center the _line_ (till \\ or \par or ?) ! How to get it?
DefPrimitive('\centering',undef);

#======================================================================-
# C.6.1 Quotations and Verse
#======================================================================-
DefEnvironment('{quote}',    '<quote>#body</quote>');
DefEnvironment('{quotation}','<quotation>#body</quotation>');
# NOTE: Handling of \\ within these environments?
DefEnvironment('{verse}',    '<verse>#body</verse>');

#======================================================================
# C.6.2 List-Making environments
#======================================================================
Tag('item', autoClose=>1);
DefConstructor('\item[]', "<item>?#1(<tag>#1</tag>)");

DefEnvironment('{itemize}',    '<itemize>#body</itemize>');
DefEnvironment('{enumerate}',  '<enumerate>#body</enumerate>');
DefEnvironment('{description}','<description>#body</description>');

# NOTE: Do I need to do anything with
# \labelitemi, labelitemii, labelitemiii or labelitemiv ?
# Probably would be useful (once I've got counters properly implemented)
# to add a number to the items.

#======================================================================
# C.6.3 The list and trivlist environments.
#======================================================================
# Mostly just punting, here; you probably want a more meaningful name
# for your list if you want better XML.
DefEnvironment('{list}{}{}', "<list default_label='#1' declarations='#2'>#body</list>");
DefEnvironment('{trivlist}', '<trivlist>#body</trivlist>');

DefRegister('\topsep',Glue(0));
DefRegister('\partopsep',Glue(0));
DefRegister('\itemsep',Glue(0));
DefRegister('\parsep',Glue(0));
DefRegister('\leftmargin',Dimension(0));
DefRegister('\rightmargin',Dimension(0));
DefRegister('\listparindent',Dimension(0));
DefRegister('\itemindent',Dimension(0));
DefRegister('\labelsep',Dimension(0));

# NOTE: Eventually use \makelabel to construct the list ?
#\makelabel{label}
# \usecounter{ctr}

#======================================================================
# C.6.4 Verbatim
#======================================================================

# NOTE: how's the best way to get verbatim material through?
DefEnvironment('{verbatim}', '<verbatim>#body</verbatim>');
DefEnvironment('{verbatim*}','<verbatim>#body</verbatim>');

# verbatim is a bit of special case;
# We're going to sidestep the Gullet for inputting, 
# and also the usual environment capture.
$STOMACH->installDefinition(LaTeXML::Constructor
			   ->new(T_CS('\begin{verbatim}'),undef,
				 "<verbatim font='#font'>#body</verbatim>",
				 beforeDigest=>[sub { $STOMACH->bgroup; 
						      $STOMACH->setFont(family=>'typewriter');}],
				 afterDigest=>[sub {
						 my($whatsit)=@_;
						 my $font = $whatsit->getFont;
						 my $loc  = $whatsit->getLocator;
						 my @lines = $GULLET->readRawLines("\\end{verbatim}\n");
						 $whatsit->setBody(map(Box($_,$font,$loc),@lines));
						 $STOMACH->egroup; }]));

DefExpandable('\verb', sub { 
  $STOMACH->bgroup(1);
  $STOMACH->setCattable({});	# ALL chars will give CC_OTHER!
  my $init = $GULLET->readToken;
  $init = $GULLET->readToken if $init->toString eq '*'; # Should I bother handling \verb* ?
  my $verb = $GULLET->readUntil($init);
  $STOMACH->egroup(1);
  $verb->unlist; });

# This is defined by the alltt package.
# Environment('alltt', ?);

#**********************************************************************
# C.7 Mathematical Formulas
#**********************************************************************

#======================================================================
# C.7.1 Math Mode Environments
#======================================================================
DefEnvironment('{displaymath}', 
	       "<equation><Math mode='display'><XMath>#body</XMath></Math></equation>", 
	       mode=>'display_math');
DefEnvironment('{math}',
	       "<Math mode='inline'><XMath>#body</XMath></Math>",
	       mode=>'inline_math');
DefEnvironment('{equation}',
	       "<equation refnum='#refnum'><Math mode='display'><XMath>#body</XMath></Math></equation>", 
	       mode=>'display_math',
	       properties=> {refnum=>sub { $STOMACH->refStepCounter('equation'); }});
DefEnvironment('{equation*}',
	       "<equation><Math mode='display'><XMath>#body<XMath></Math></equation>",
	       mode=>'display_math');

# NOTE: This has to interact with equation to CANCEL (or backtrack?) the
# numbering?
DefPrimitive('\nonumber',undef);

# Define \( ..\) and \[ ... \] to act like environments.
DefConstructor('\[',
	       "<equation><Math mode='display'><XMath>#body</XMath></Math></equation>",
	       beforeDigest=> sub{ $STOMACH->beginMode('display_math'); },
	       captureBody=>1);
DefConstructor('\]'  ,"",beforeDigest=> sub{ $STOMACH->endMode('display_math'); });
DefConstructor('\(' ,
	       "<Math mode='inline'><XMath>#body</XMath></Math>",
	       beforeDigest=> sub{ $STOMACH->beginMode('inline_math'); },
	       captureBody=>1);
DefConstructor('\)'   ,"", beforeDigest=> sub{ $STOMACH->endMode('inline_math'); });

# Can just enter math, can't we?
#DefConstructor('\ensuremath{}', '#1', mode=>'inline_math');
DefExpandable('\ensuremath{}', sub {
  my($self,$stuff)=@_;
  if($STOMACH->inMath){ @$stuff; }
  else { (T_MATH,@$stuff,T_MATH); }});

# NOTE: Implement these
# Environment('eqnarray' ...
# Environment('eqnarray*' ...

# NOTE: The numbering isn't right.
# And the parseability will have to be worked on!
#DefEnvironment('{eqnarray}',
#	       "<equation refnum='#refnum'><Math mode='display'><XMath>#body</XMath></Math></equation>", 
#	       mode=>'display_math',
#	       properties=> {refnum=>sub { $STOMACH->refStepCounter('equation'); }});
#DefEnvironment('{eqnarray*}',
#	       "<equation><Math mode='display'><XMath>#body</XMath></Math></equation>", 
DefEnvironment('{eqnarray}',
	       sub { 
		 $INTESTINE->openElement('equation',refnum=>'#refnum');
		 $INTESTINE->openElement('Math',mode=>'display');
		 $INTESTINE->openElement('XMath');
		 matharray('',$_[1], 'Matrix','Row','Cell');
		 $INTESTINE->closeElement('XMath');
		 $INTESTINE->closeElement('Math');
		 $INTESTINE->closeElement('equation'); },
	       mode=>'display_math',
	       properties=> {refnum=>sub { $STOMACH->refStepCounter('equation'); }},
	       beforeDigest=>\&matharray_defs, afterDigest=>\&matharray_end);
DefEnvironment('{eqnarray*}',
	       sub { 
		 $INTESTINE->openElement('equation');
		 $INTESTINE->openElement('Math',mode=>'display');
		 $INTESTINE->openElement('XMath');
		 matharray('',$_[1], 'Matrix','Row','Cell');
		 $INTESTINE->closeElement('XMath');
		 $INTESTINE->closeElement('Math');
		 $INTESTINE->closeElement('equation'); },
	       mode=>'display_math',
	       beforeDigest=>\&matharray_defs, afterDigest=>\&matharray_end);

# Style Parameters
#  \abovedisplayskip \abovedisplayshortskip are in Primitives.pm
DefRegister('\jot',Dimension(0)); 
DefRegister('\mathindent',Dimension(0)); 
DefRegister('\belowdisplayskip',Glue(0)); 
DefRegister('\belowdisplayshortskip',Glue(0));

#======================================================================
# C.7.2 Common Structures
#======================================================================
# sub, superscript and prime are in Primitives.pm

sub getMathStyle { $STOMACH->getMathStyle; }
# Ugh; my state keeping is kinda messed up.
# I want to set the style according to current math style
# AND set the math style smaller for the args!
our %fracstylemap=(display=>'text', text=>'script',
		   script=>'scriptscript', scriptscript=>'scriptscript');
sub beforeFrac { $STOMACH->bgroup; $STOMACH->setMathStyle($fracstylemap{$STOMACH->getMathStyle}); }
sub afterFrac  { $STOMACH->egroup; $_[0]->setProperty('style',$STOMACH->getMathStyle); }
DefMath('\frac{}{}','/', name=>"/", operator_role=>'MULOP',
	beforeDigest=>\&beforeFrac, afterDigest =>\&afterFrac);

DefConstructor('\sqrt[]{}',
	       "?#1(<XMApp><XMTok name='root'/><XMArg>#1</XMArg><XMArg>#2</XMArg></XMApp>)"
	         ."(<XMApp><XMTok name='sqrt'/><XMArg>#2</XMArg></XMApp>)");

# Ellipsis: See Primitives

#======================================================================
# C.7.3 Mathematical Symbols
#======================================================================
# See Tables 3.3 through 3.8 (pp 41--44)
# Defined in Primitives.pm
# [Possibly some are strictly LaTeX and should be moved here?]


#======================================================================
# Modulo

DefMath('\mod',    'mod');
DefMath('\pmod{}', '(\textrm{mod} #1)', role=>'POSTFIX'); # Well, sorta postfix..
DefMath('\bmod',   'mod', role=>'ADDOP');

#======================================================================
# C.7.4 Arrays
#======================================================================
#  See Section C.10.2

#======================================================================-
# C.7.5 Delimiters
#======================================================================-
# All this is already in Primitives.pm

DefMath('\stackrel{}{}','');
#======================================================================-
# C.7.6 Putting One Thing Above Another
#======================================================================-
# All this is already in Primitives.pm

#======================================================================-
# C.7.7 Spacing
#======================================================================-
# All this is already in Primitives.pm

#======================================================================
# C.7.8 Changing Style
#======================================================================
# For Math style changes, we record the current font, which is then merged
# into the Whatsit's created for letters, etc.  The merging depends on
# the type of letter, greek, symbol, etc.
# Apparently, with the normal TeX setup, these fonts don't really merge,
# rather they override all of family, series and shape.

DefConstructor('\mathrm{}', '#1',
	       beforeDigest=>sub{ requireMath; $STOMACH->bgroup; $STOMACH->setFont(family=>'serif'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\mathit{}',  '#1',
	       beforeDigest=>sub{ requireMath; $STOMACH->bgroup; $STOMACH->setFont(shape=>'italic'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\mathbf{}',  '#1',
	       beforeDigest=>sub{ requireMath; $STOMACH->bgroup; $STOMACH->setFont(series=>'bold'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\mathsf{}',  '#1',
	       beforeDigest=>sub{ requireMath; $STOMACH->bgroup; $STOMACH->setFont(family=>'sansserif'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\mathtt{}',  '#1',
	       beforeDigest=>sub{ requireMath; $STOMACH->bgroup; $STOMACH->setFont(family=>'typewriter'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\mathcal{}', '#1',
	       beforeDigest=>sub{ requireMath; $STOMACH->bgroup; $STOMACH->setFont(family=>'caligraphic'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\mathscr{}', '#1',
	       beforeDigest=>sub{ requireMath; $STOMACH->bgroup; $STOMACH->setFont(family=>'script'); },
	       afterDigest=>sub{$STOMACH->egroup; });

#**********************************************************************
# C.8 Definitions, Numbering and Programming
#**********************************************************************

#======================================================================
# C.8.1 Defining Commands
#======================================================================

DefPrimitive('\newcommand{Token}[][]{}', sub {
  my($self,$cs,$nargs,$opt,$body)=@_;
  Fatal(Stringify($cs)." is already defined") if $cs->getDefinition;
  DefMacro($cs->toString . convertLaTeXArgs($nargs,$opt),$body);
  return; });

DefPrimitive('\renewcommand{Token}[][]{}', sub {
  my($self,$cs,$nargs,$opt,$body)=@_;
  DefMacro($cs->toString . convertLaTeXArgs($nargs,$opt),$body);
  return; });

DefPrimitive('\providecommand{Token}[][]{}', sub {
  my($self,$cs,$nargs,$opt,$body)=@_;
  return if $cs->getDefinition;
  DefMacro($cs->toString . convertLaTeXArgs($nargs,$opt),$body);
  return; });

# Need to figure out exactly what `robust' means to LaTeXML...
DefPrimitive('\DeclareRobustCommand{Token}[][]{}', sub {
  my($self,$cs,$nargs,$opt,$body)=@_;
  return if $cs->getDefinition;
  DefMacro($cs->toString . convertLaTeXArgs($nargs,$opt),$body);
  return; });

#======================================================================
# C.8.2 Defining Environments
#======================================================================
# Note that \env & \endenv defined by \newenvironment CAN be 
# invoked directly.

DefPrimitive('\newenvironment{}[][]{}{}', sub {
  my($self,$name,$nargs,$opt,$begin,$end)=@_;
  $name = $name->toString;
  Fatal("Environment $name is already defined") if T_CS("\\$name")->getDefinition;
  DefMacro(join('','\\',$name, convertLaTeXArgs($nargs,$opt)),$begin);
  DefMacro(join('','\\end',$name),$end);
  return; });

DefPrimitive('\renewenvironment{}[][]{}{}', sub {
  my($self,$name,$nargs,$opt,$begin,$end)=@_;
  $name = $name->toString;
  DefMacro(join('','\\',$name, convertLaTeXArgs($nargs,$opt)),$begin);
  DefMacro(join('','\\end',$name),$end);
  return; });

#======================================================================
# C.8.3 Theorem-like Environments
#======================================================================
# NOTE: Implement.
#  define a new environment which constructs a theorem ?
# Def('\newtheorem','{}[]{}[]", ....);
# => something like <theorem type="foo"> .. </theorem>

#======================================================================
# C.8.4 Numbering
#======================================================================
DefPrimitive('\newcounter{}[]',sub { shift; NewCounter(@_); return; });

DefPrimitive('\setcounter{}{}',sub {
  my($self,$ctr,$value)=@_;
  $ctr=$ctr->toString;
  $GULLET->unread(@$value,T_CS('\relax')); # Put back, so we can read as <number>
  $STOMACH->assignValue("c\@$ctr",$GULLET->readNumber(),1); 
  return});

DefPrimitive('\addtocounter{}{}',sub {
  my($self,$ctr,$value)=@_;
  $ctr=$ctr->toString;
  $GULLET->unread(@$value,T_CS('\relax')); # Put back, so we can read as <number>
  $STOMACH->assignValue("c\@$ctr",$STOMACH->lookupValue("c\@$ctr")->add($GULLET->readNumber),1);
  return; });

DefPrimitive('\stepcounter{}',   sub { $STOMACH->stepCounter($_[1]); return; });
DefPrimitive('\refstepcounter{}',sub { $STOMACH->refStepCounter($_[1]); return; });

DefExpandable('\value{}', sub {
  Explode($STOMACH->lookupValue('\c@'.$_[1]->toString)->getValue);});
DefExpandable('\arabic{}',sub {
  Explode($STOMACH->lookupValue('\c@'.$_[1]->toString)->getValue); });
DefExpandable('\roman{}', sub {
  roman($STOMACH->lookupValue('\c@'.$_[1]->toString)->getValue); });
DefExpandable('\Roman{}', sub {
  Roman($STOMACH->lookupValue('\c@'.$_[1]->toString)->getValue); });
DefExpandable('\alph{}',  sub {
  T_OTHER(chr($STOMACH->lookupValue('\c@'.$_[1]->toString)->getValue+ord('a')-1));});
DefExpandable('\Alph{}',  sub {
  T_OTHER(chr($STOMACH->lookupValue('\c@'.$_[1]->toString)->getValue+ord('A')-1));});
our @fnsymbols=(T_OTHER('*'), T_CS('\dag'), T_CS('\ddag'), T_CS('\S'), T_CS('\P'),
		T_CS('\Vert'), T_OTHER('**'), Tokens(T_CS('\dag'),T_CS('\dag')),
		Tokens(T_CS('\ddag'),T_CS('\ddag')));
DefExpandable('\fnsymbol{}',sub { 
  $fnsymbols[$STOMACH->lookupValue('\c@'.$_[1]->toString)->getValue-1]->unlist;});

#======================================================================
# C.8.5 The ifthen Package.
#======================================================================
# \ifthenelse
# and sundry conditionals...
#
# Yeah, maybe this'll get done someday....

#**********************************************************************
# C.9 Figures and Other Floating Bodies
#**********************************************************************

#======================================================================
# C.9.1 Figures and Tables
#======================================================================

# Note that, technically, the number is associated with the caption.
# (to allow multiple figures per figure environment?).
# We'll have to sort that out later....
DefEnvironment('{figure}[]', "<figure refnum='#refnum' ?#1(placement='#1')>#body</figure>",
	       properties=> { refnum=> sub { $STOMACH->refStepCounter('figure'); }});
DefEnvironment('{figure*}[]', "<figure refnum='#refnum' ?#1(placement='#1')>#body</figure>",
	       properties=> { refnum=> sub { $STOMACH->refStepCounter('figure'); }});
DefEnvironment('{table}[]',   "<table refnum='#refnum' ?#1(placement='#1')>#body</table>",
	       properties=> { refnum=> sub { $STOMACH->refStepCounter('table'); }});
DefEnvironment('{table*}[]',  "<table refnum='#refnum' ?#1(placement='#1')>#body</table>",
	       properties=> { refnum=> sub { $STOMACH->refStepCounter('table'); }});
DefConstructor('\caption[]{}',"<caption>#2</caption>\n?#1(<toccaption>#1</toccaption>)");

DefPrimitive('\suppressfloats[]', undef);

NewCounter('topnumber');
DefMacro('\topfraction',"0.25");
NewCounter('bottomnumber');
DefMacro('\bottomfraction',"0.25");
NewCounter('totalnumber');
DefMacro('\textfraction',"0.25");
DefMacro('\floatpagefraction',"0.25");
NewCounter('dbltopnumber');
DefMacro('\dblfloatpagefraction',"0.25");
DefMacro('\dblfloatpagefraction',"0.25");
DefRegister('\floatsep',Glue(0));
DefRegister('\textfloatsep',Glue(0));
DefRegister('\intextsep',Glue(0));
DefRegister('\dblfloatsep',Glue(0));
DefRegister('\dbltextfloatsep',Glue(0));

#======================================================================
# C.9.2 Marginal Notes
#======================================================================

DefConstructor('\marginpar[]{}', "<marginpar>#2</marginpar>");
DefPrimitive('\reversemarginpar',undef);
DefPrimitive('\normalmarginpar', undef);
DefRegister('\marginparpush',Dimension(0));

#**********************************************************************
# C.10 Lining It Up in Columns
#**********************************************************************

#======================================================================
# C.10.1 The tabbing Environment
#======================================================================

# NOTE: Do it!!

#======================================================================
# C.10.2 The array and tabular Environments
#======================================================================
# See the postprocessing class LaTeXML::Post::HTMLTable
# for how to make a more HTML-like table from this.
# NOTE: May need to come back & fill in some things like \tabularcr
# \@arraycr, etc..

Tag('tr', autoOpen=>1, autoClose=>1);
Tag('td', autoOpen=>1, autoClose=>1);

# Note grouping nastiness!
# Note: we allow a tabular to float up to where it is allowed!
DefEnvironment('{tabular}[]{}', "^<tabular pattern='#2'>#body</tabular>",
  beforeDigest=> sub {
      DefConstructor('&',sub { close_table_cell(); },
		    beforeDigest=>sub { $STOMACH->egroup; },
		    afterDigest=>sub { $STOMACH->bgroup; } );
      DefConstructor("\\\\ Flag:* []", sub { $INTESTINE->maybeCloseElement('tr'); },
		     untex=>"\\\\\n",
		     beforeDigest=>sub { $STOMACH->egroup; },
		     afterDigest=>sub { $STOMACH->bgroup; } );
      $STOMACH->bgroup;
      return; },
  afterDigest=> sub { $STOMACH->egroup; },
  mode=>'text');

# ignore width(#1), and pos(#2)
DefEnvironment('{tabular*}{}[]{}', "^<tabular pattern='#2'>#body</tabular>",
  beforeDigest=> sub {
      DefConstructor('&',sub { close_table_cell(); },
		    beforeDigest=>sub { $STOMACH->egroup; },
		    afterDigest=>sub { $STOMACH->bgroup; } );
      DefConstructor("\\\\ Flag:* []", sub { $INTESTINE->maybeCloseElement('tr'); },
		     untex=>"\\\\\n",
		     beforeDigest=>sub { $STOMACH->egroup; },
		     afterDigest=>sub { $STOMACH->bgroup; } );
      $STOMACH->bgroup;
      return; },
  afterDigest=> sub { $STOMACH->egroup; },
  mode=>'text');

# This handles & in tables.
# If there is an open td or multicolumn, close it,
# Otherwise, we need to open a td first, then close it!
# NOTE: It needs to be generalized for different sorts of arrays, etc.
sub close_table_cell {
  my $n = $INTESTINE->getNode;
  while($n && $MODEL->canAutoClose($n->getNodeName)){
    if ($$n{tag} eq 'td'){
      $INTESTINE->closeElement($$n{tag});
      return; }
    $n=$$n{parent}; }
  # Didn't find anything...
  $INTESTINE->insertElement('td'); }

# Open, but don't close, so "&" can operate correctly.
DefConstructor('\multicolumn{}{}{}',"<td colspan='#1' pattern='#2'>#3");
DefConstructor('\hline',"<hline/>");

# NOTE: \vline, \cline{c1-c2}
DefRegister('\arraycolsep',Dimension(0));
DefRegister('\tabcolsep',Dimension(0));
DefRegister('\arrayrulewidth',Dimension(0));
DefMacro('\extracolsep{}','');
DefMacro('\arraystretch',"1");

# Array and similar environments
# Since in Math, we're using XMTok and XMApp generically, rather than specific <tr>,<td> etc.
# we have to do all the `automatic' open/close manually.
sub matharray {
  my($alignment,$props, $arrayname,$rowname,$cellname,%attributes)=@_;
  local($LaTeXML::arrayname,$LaTeXML::rowname,$LaTeXML::cellname)=($arrayname,$rowname,$cellname);
  # Open the Array, and an initial row and cell.
  open_matharray_level($arrayname,%attributes);
  open_matharray_level($rowname);
  open_matharray_level($cellname);
  open_matharray_arg();
  # Now process the body (& and // should be bound to matharray_{align|cr} )
  $INTESTINE->absorb($$props{body});
  # Close open cell and row, pruning empty ones.
  close_matharray_arg();
  close_matharray_level($cellname,1);
  close_matharray_level($rowname,1);
  close_matharray_level($arrayname,0);
}

# Close XMArg, and if empty, remove it.
sub open_matharray_arg {
  # NOTE: Until this gets better sorted out, allow punctuation!
  $INTESTINE->openElement('XMArg',rule=>'Anything,'); }

sub close_matharray_arg {
  my $node = $INTESTINE->closeElement('XMArg')->lastChild;
  # If XMArg is (except for comments) empty, remove it, but move it's comments up.
  if(grep(ref $_ ne 'LaTeXML::CommentNode', $node->childNodes) == 0){ # No non-comment => `empty'
    $node->getParentNode->removeChild($node);
    map($node->getParentNode->insert($_),grep(ref $_ eq 'LaTeXML::CommentNode', $node->childNodes)); }
}

sub open_matharray_level {
  my($levelname,%attributes)=@_;
  $INTESTINE->openElement('XMApp'); 
  $INTESTINE->insertElement('XMTok',undef,name=>$levelname,%attributes); }

sub close_matharray_level {
  my($levelname,$prune)=@_;
  # If XMApp is empty (except for the Array/Row/Cell operator and comments), remove it,
  # but preserve the commetns.
  my $node = $INTESTINE->closeElement('XMApp')->lastChild;
  if(grep(ref $_ ne 'LaTeXML::CommentNode', $node->childNodes) == 1){ # Only 1 non-comment => `empty'
    $node->getParentNode->removeChild($node);
    map($node->getParentNode->insert($_),grep(ref $_ eq 'LaTeXML::CommentNode', $node->childNodes)); }
}

sub matharray_align {
  close_matharray_arg();
  close_matharray_level($LaTeXML::cellname);
  open_matharray_level($LaTeXML::cellname);
  open_matharray_arg();
}
sub matharray_cr {
  close_matharray_arg();
  close_matharray_level($LaTeXML::cellname,1);
  close_matharray_level($LaTeXML::rowname);
  open_matharray_level($LaTeXML::rowname);
  open_matharray_level($LaTeXML::cellname);
  open_matharray_arg();
}


sub matharray_defs {
  DefConstructor('&', \&matharray_align,
		 beforeDigest=>sub { $STOMACH->egroup; },
		 afterDigest=>sub { $STOMACH->bgroup; } );
  DefConstructor("\\\\ Flag:* []", \&matharray_cr,
		 beforeDigest=>sub { $STOMACH->egroup; },
		 afterDigest=>sub { $STOMACH->bgroup; } );
  $STOMACH->bgroup;
  return; }
sub matharray_end {
  $STOMACH->egroup; }
DefEnvironment('{array}[]{}',sub { matharray($_[2],$_[3], 'Array','Row','Cell');},
	       beforeDigest=>\&matharray_defs, afterDigest=>\&matharray_end);

#**********************************************************************
# C.11 Moving Information Around
#**********************************************************************

#======================================================================
# C.11.1 Files
#======================================================================
DefPrimitive('\nofiles',undef);

#======================================================================
# C.11.2 Cross-References
#======================================================================
# add a label id to nearest labelable element.
DefConstructor('\label{semiverb}',"^ label='#1'",  mode=>'text', untex=>'',
	       afterDigest=>sub {$STOMACH->assignValue('LABEL@'.$_[1]->toString, 
						      $STOMACH->digest(T_CS('\@currentlabel')),1); });

DefMacro('\ref{semiverb}', '\@REF{#1}{\@VALUE{LABEL@#1}}');
DefMacro('\pageref{semiverb}', '\@REF{#1}{\@VALUE{LABEL@#1}}'); # Any sense in distinguishing?
DefConstructor('\@REF{}{}', "<ref labelref='#1'>#2</ref>");

#======================================================================
# C.11.3 Bibliography and Citation
#======================================================================

# NOTE: Not really complete, since I haven't dealt with bibliographies!
DefConstructor('\bibliography{}', "<bibliography files='#1'/>");

DefEnvironment('{thebibliography}{}',"<bibliography>#body</bibliography>");

# NOTE: 
DefConstructor('\bibitem[]{}',"<bibitem ref='#1'>#1</bibitem>");

sub makecite {
  my($style,$show, $self,$phrase1,$phrase2,$ref)=@_;
  $INTESTINE->openElement('cite', ref=>$ref,style=>$style, show=>$show);
  if(defined $phrase1 && defined $phrase2){
    $INTESTINE->insertElement('citepre',$phrase1);
    $INTESTINE->insertElement('citepost',$phrase2); }
  elsif(defined $phrase1){
    $INTESTINE->insertElement('citepost',$phrase1); }
  $INTESTINE->closeElement('cite'); }

# Most of this is really natbib style.
DefConstructor('\cite[][]{semiverb}',       sub { makecite('intext','all',@_); });
DefConstructor('\citet[][]{semiverb}',      sub { makecite('intext','all',@_); });
DefConstructor('\citep[][]{semiverb}',      sub { makecite('parenthetic','all',@_); });
DefConstructor('\citeauthor[][]{semiverb}', sub { makecite('intext','author',@_); });
DefConstructor('\citeyear[][]{semiverb}',   sub { makecite('intext','year',@_); });
DefConstructor('\citeyearpar[][]{semiverb}',sub { makecite('parenthetic','year',@_); });


#======================================================================
# C.11.4 Splitting the input
#======================================================================
# LaTeX's \input is a bit different...
DefPrimitive('\input', sub {
  my ($tok,$file);
  if($tok=$GULLET->ifNext('{',CC_BEGIN)){ # Read LaTeX style
    $GULLET->unread($tok);
    $file=$GULLET->expandTokens($GULLET->readArg()); }
  else {			# Read TeX style.
    my ($token,@tokens)=();
    while(($token=$GULLET->readXToken()) && ($token->getCatcode != CC_SPACE)){
      push(@tokens,$token); }
    $file = Tokens(@tokens); }
  $STOMACH->input($file);
  return; });

# Note that even excluded files SHOULD have the effects of their inclusion
# simulated by having read the corresponding aux file;
# But we're not bothering with that.
DefPrimitive('\include{}',sub { 
  my($self,$file)=@_;
  $file = $file->toString;
  my $table = $STOMACH->lookupValue('including@only');
  $STOMACH->input($file) if !$table || $$table{$file};
  return;});

DefPrimitive('\includeonly{}',sub {
  my($self,$files)=@_;
  $files = $files->toString;
  my $table = $STOMACH->lookupValue('including@only');
  $STOMACH->assignValue('including@only', $table = {}, 1) unless $table;
  map( $$table{$_}=1, split(',',$files));
  return; });

#Environment('filecontents','{}',?
#Environment('filecontents*','{}',?

DefPrimitive('\listfiles',undef);

#======================================================================
# C.11.5 Index and Glossary
#======================================================================
DefEnvironment('{theindex}', "<theindex>#body</theindex>");
DefPrimitive('\printindex',  undef);
DefPrimitive('\makeindex',   undef);
DefPrimitive('\makeglossary',undef);

# A bit screwy, but....
# Expand \index{a!b!...} into \@index{\@indexphrase{a}\@indexphrase{b}...}
DefExpandable('\index{}',sub { 
  my($self,$phrases)=@_;
  my @expansion = (T_CS('\@index'),T_BEGIN);
  # Split the text into phrases, separated by "!"
  my @tokens = $phrases->unlist;
  push(@tokens,T_OTHER('!')) unless $tokens[$#tokens]->getString eq '!'; # Add terminal !
  my @phrase=();
  foreach my $tok (@tokens){
    if($tok->getString eq '!'){
      while(@phrase && ($phrase[$#phrase]->getString =~ /\s/)){ pop(@phrase); }
      push(@expansion,T_CS('\@indexphrase'),T_BEGIN,@phrase,T_END)
	if @phrase;
      @phrase=(); }
    elsif(!@phrase && ($tok->getString =~ /\s/)){}	# Skip leading whitespace
    else { 
      push(@phrase,$tok); }}
  push(@expansion,T_END);
  @expansion; });

DefConstructor('\@index{}',"^<index>#1</index>", mode=>'text', untex=>'');
DefConstructor('\@indexphrase{}',"<indexphrase>#1</indexphrase>");

# NOTE:
# DefConstructor('\glossary','{}',sub { ...
#======================================================================
# C.11.6 Terminal Input and Output
#======================================================================

DefPrimitive('\typeout{}',sub {
  my($self,$stuff)=@_;
  print STDERR $GULLET->expandTokens($stuff)->untex;
  return; });

#DefPrimitive('\typein[]{}',sub {
#  print STDERR $_[2]->untex; 
#  # Then setValue $_[1] to read ???
#	       });

#**********************************************************************
# C.12 Line and Page Breaking
#**********************************************************************

#======================================================================
# C.12.1 Line Breaking
#======================================================================
DefPrimitive('\linebreak[]',undef);
DefPrimitive('\nolinebreak[]',undef);
# \\ already defined
DefConstructor('\newline',"\n");
DefPrimitive('\-',undef);	# We don't do hyphenation.
# \hyphenation in Primitives.pm

DefPrimitive('\sloppy',undef);
DefPrimitive('\fussy',undef);

#======================================================================
# C.12.2 Page Breaking
#======================================================================
DefPrimitive('\pagebreak[]',undef);
DefPrimitive('\nopagebreak[]',undef);
DefPrimitive('\enlargethispage Flag:* {}',undef);

DefPrimitive('\clearpage',undef); # Could possibly mean something?
DefPrimitive('\cleardoublepage',undef);

#**********************************************************************
# C.13 Lengths, Spaces and Boxes
#**********************************************************************

#####
#####
#  Complete to here
#  [except for NOTE'd entries, of course]
#####
#####

#======================================================================
# C.13.1 Length
#======================================================================
# \fill
# \stretch
# \newlength{cmd}
DefPrimitive('\newlength{Token}',sub {
  my($self,$cmd)=@_;
  DefRegister($cmd->toString,Dimension(0)); });
# \setlength{cmd}{len}
DefPrimitive('\setlength{Token}{Dimension}',sub{
  my($self,$cmd,$dimen)=@_;
  $cmd->getDefinition->setValue($dimen);});
# \addtolength{cmd}{len}
DefPrimitive('\addtolength{Token}{Dimension}',sub{
  my($self,$cmd,$dimen)=@_;
  my $register =  $cmd->getDefinition;
  $register->setValue($register->getValue->add($dimen));});
# \settowidth{cmd}{text}
# \settoheight{cmd}{text}
# \settodepth{cmd}{text}

# Assuming noone tries to get clever with figuring out the allocation of 
# numbers, these become simple DefRegister's
DefPrimitive('\newcount{Token}', sub { DefRegister($_[1]->toString,Number(0)); });
DefPrimitive('\newdimen{Token}', sub { DefRegister($_[1]->toString,Dimension(0)); });
DefPrimitive('\newskip{Token}',  sub { DefRegister($_[1]->toString,Glue(0)); });
DefPrimitive('\newmuskip{Token}',sub { DefRegister($_[1]->toString,MuGlue(0)); });
#DefPrimitive('\newbox{Token}',  sub { DefRegister($_[1]->toString,Box()); });
DefPrimitive('\newtoks{Token}',  sub { DefRegister($_[1]->toString,Tokens()); });

#======================================================================
# C.13.2 Space
#======================================================================
DefPrimitive('\hspace Flag:* {}',undef);
DefPrimitive('\vspace Flag:* {}',undef);
# \bigskip, \medskip, \smallskip
# \addvspace{len}
# \hfill, \vfill

#======================================================================
# C.13.3 Boxes
#======================================================================
DefConstructor('\mbox{}',"<text>#1</text>", mode=>'text');
DefConstructor('\makebox[][]{}',"<text ?#1(width='#1') ?#2(pos='#2')>#3</text>", 
	       mode=>'text');
DefConstructor('\fbox{}',"<text framed='yes'>#1</text>", mode=>'text');
DefConstructor('\framebox[][]{}',"<text ?#1(width='#1') ?#2(pos='#2') framed='yes'>#3</text>",
	       mode=>'text');
DefPrimitive('\newsavebox{Token}',sub { $STOMACH->assignValue('box'.$_[1]->toString, List());});
DefPrimitive('\sbox{Token}{}',sub {
   $STOMACH->assignValue('box'.$_[1]->toString, $STOMACH->digest($_[2]));});
DefPrimitive('\savebox{Token}[][]{}',sub {
   $STOMACH->assignValue('box'.$_[1]->toString, $STOMACH->digest($_[4]));});
DefEnvironment('{lrbox}{Token}','',
  afterDigest=>sub{ 
    my($whatsit,$name)=@_;
    $STOMACH->assignValue('box'.$name->toString, $whatsit->getProperty('body'));
    return; });
DefPrimitive('\usebox{Token}', sub { $STOMACH->lookupValue('box'.$_[1]->toString);});

DefConstructor('\parbox[][]{}',"<text ?#2(width='#2') ?#1(pos='#1') justified='yes'>#3</text>",
	       mode=>'text');
DefEnvironment('{minipage}[]{}',"<text ?#2(width='#1') justified='yes'>#2</text>",
	       mode=>'text');
DefConstructor('\rule[]{}{}', "<rule ?#1(raise='#1') width='#2' height='#3'/>");

#**********************************************************************
# C.15 Font Selection
#**********************************************************************
#======================================================================
# C.15.1 Changing the Type Style
#======================================================================
# Text styles.

# What about \f@family, etc....?
# These are not allowed in math.
DefConstructor('\mdseries', '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(series=>'medium')});
DefConstructor('\bfseries', '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(series=>'bold')});

DefConstructor('\rmfamily', '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(family=>'serif')});
DefConstructor('\sffamily', '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(family=>'sansserif')});
DefConstructor('\ttfamily', '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(family=>'typewriter')});

DefConstructor('\upshape',  '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(shape=>'upright')});
DefConstructor('\itshape',  '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(shape=>'italic')});
DefConstructor('\slshape',  '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(shape=>'slanted')});
DefConstructor('\scshape',  '', 
	       beforeDigest=>sub{ forbidMath; $STOMACH->setFont(shape=>'smallcaps')});

DefConstructor('\normalfont', '', 
	       beforeDigest=>sub{ $STOMACH->setFont(family=>'serif', series=>'medium', shape=>'upright')});

# If these series or shapes appear in math, they revert it to roman, medium, upright (?)
DefConstructor('\textmd{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(series=>'medium'); },
	       afterDigest=>sub{$STOMACH->egroup; });

DefConstructor('\textbf{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(series=>'bold'); },
	       afterDigest=>sub{$STOMACH->egroup; });

DefConstructor('\textrm{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(family=>'serif'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\textsf{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(family=>'sansserif'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\texttt{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(family=>'typewriter'); },
	       afterDigest=>sub{$STOMACH->egroup; });

DefConstructor('\textup{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(shape=>'upright'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\textit{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(shape=>'italic'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\textsl{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(shape=>'slanted'); },
	       afterDigest=>sub{$STOMACH->egroup; });
DefConstructor('\textsc{}', "?IfMath(<text>#1</text>)(#1)", mode=>'text',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(shape=>'smallcaps'); },
	       afterDigest=>sub{$STOMACH->egroup; });

DefConstructor('\textnormal{}','#1',
	       beforeDigest=>sub{ $STOMACH->bgroup; $STOMACH->setFont(family=>'serif',series=>'medium',shape=>'upright'); },
	       afterDigest=>sub{$STOMACH->egroup; });

DefPrimitive('\mathversion{}',sub {
  my($self,$version)=@_;
  forbidMath;
  $version = $version->toString;
  if($version eq 'bold'     ){ $STOMACH->setMathFont(forcebold=>1); }
  elsif($version eq 'normal'){ $STOMACH->setMathFont(forcebold=>0); }
  else { Fatal("Unknown math verison \"$version\""); }});

#======================================================================
# C.15.2 Changing the Type Size
#======================================================================
# Handled in Primitive.pm

#======================================================================
# C.15.3 Special Symbol
#======================================================================
# \symbol{num} ????

# These in LaTeX, but not in the book...
DefConstructor('\textdollar',"\$");
DefConstructor('\textemdash',"\x{2014}"); # EM DASH
DefConstructor('\textendash',"\x{2013}"); # EN DASH
DefConstructor('\textexclamdown',"\x{00A1}"); # INVERTED EXCLAMATION MARK
DefConstructor('\textquestiondown',"\x{00BF}");	# INVERTED QUESTION MARK
DefConstructor('\textquotedblleft',"\x{201C}"); # LEFT DOUBLE QUOTATION MARK
DefConstructor('\textquotedblright',"\x{201D}"); # RIGHT DOUBLE QUOTATION MARK
DefConstructor('\textquoteleft',"\x{2018}");     # LEFT SINGLE QUOTATION MARK
DefConstructor('\textquoteright',"\x{2019}");    # RIGHT SINGLE QUOTATION MARK
#DefConstructor('\textsterling',"\x{}");
#DefConstructor('\textasteriskcentered',"\x{}");
DefConstructor('\textbackslash',"\x{005C}"); # REVERSE SOLIDUS
#DefConstructor('\textbar',"\x{}");
DefConstructor('\textbraceleft',"{");
DefConstructor('\textbraceright',"}");
DefConstructor('\textbullet',"\x{2022}");    # BULLET
DefConstructor('\textdaggerdbl',"\x{2020}"); # DOUBLE DAGGER
DefConstructor('\textdagger',"\x{2021}");    # DAGGER
DefConstructor('\textparagraph',"\x{00B6}"); # PILCROW SIGN
DefConstructor('\textperiodcentered',"\x{22C5}"); # DOT OPERATOR
DefConstructor('\textsection',"\x{00A7}");	      # SECTION SIGN
DefConstructor('\textless',"<");
DefConstructor('\textgreater',">");
DefConstructor('\textcopyright',"\x{00A9}"); # COPYRIGHT SIGN
DefConstructor('\textasciicircum',"^");
DefConstructor('\textasciitilde',"~");
#DefConstructor('\textcompwordmark',"\leavevmode\kern\z@}
DefConstructor('\textunderscore',"_");
DefConstructor('\textvisiblespace'," ");
DefConstructor('\textellipsis',"\x{2026}"); # HORIZONTAL ELLIPSIS
#defconstructor('\textregistered',"\textcircled{\scshape r}}
#DefConstructor('\texttrademark',"\textsuperscript{TM}}
DefConstructor('\textsuperscript{}',"<textsup>#1</textsup>");
#DefConstructor('\textcircled{}',

#**********************************************************************
# Other stuff
#**********************************************************************
# Some stuff that got missed in the appendices ?

DefMacro('\@namedef{}','\expandafter\def\csname #1\endcsname');
DefMacro('\@nameuse{}','\csname #1\endcsname');

#DefMacro('\space',' ');
DefMacro('\space',Tokens(T_SPACE));
DefMacro('\@spaces','\space\space\space\space');
DefMacro('\@empty',Tokens());
Let('\empty',T_CS('\@empty'));
Let('\@sptoken',T_SPACE);
#======================================================================
# Internals used in Packages
DefMacro('\NeedsTeXFormat{}','');
DefMacro('\ProvidesPackage{}[]','');
DefMacro('\DeclareOption{}{}', sub {
  my($self,$option,$code)=@_;
  DefMacro('\ds@'.$option->toString,
	   $GULLET->expandTokens(Tokens($GULLET->neutralizeTokens($code->unlist)))); });
DefMacro('\ExecuteOptions{}', sub{
  my($self,$options)=@_;
  map(T_CS('\ds@'.$_),split(',',$options->toString)); });
DefMacro('\ProcessOptions','');
DefMacro('\@ehc',"I can't help");

sub make_message {
  my($cs,@args)=@_;
  join("\n",map($GULLET->expandTokens($_)->toString,@args)); }

DefMacro('\GenericError{}{}{}{}', sub{ Fatal(make_message(@_)); });
DefMacro('\GenericWarning{}{}',         sub{ Warn(make_message(@_)); });
DefMacro('\GenericInfo{}{}{}{}',  sub{ print STDERR "Info: ".make_message(@_)."\n"; });

DefMacro('\PackageError{}{}{}',
  ' \GenericError{%
      (#1)\@spaces\@spaces\@spaces\@spaces
   }{%
      Package #1 Error: #2%
   }{%
      See the #1 package documentation for explanation.%
   }{#3}');
DefMacro('\PackageWarning{}{}',
   '\GenericWarning{%
      (#1)\@spaces\@spaces\@spaces\@spaces
   }{%
      Package #1 Warning: #2%
   }');
DefMacro('\PackageWarningNoLine{}{}',
  ' \PackageWarning{#1}{#2\@gobble}');
DefMacro('\PackageInfo{}{}',
  '\GenericInfo{%
      (#1) \@spaces\@spaces\@spaces
   }{%
      Package #1 Info: #2%
   }');
DefMacro('\ClassError{}{}{}',
  '\GenericError{%
      (#1) \space\@spaces\@spaces\@spaces
   }{%
      Class #1 Error: #2%
   }{%
      See the #1 class documentation for explanation.%
   }{#3}');
DefMacro('\ClassWarning{}{}',
  '\GenericWarning{%
      (#1) \space\@spaces\@spaces\@spaces
   }{%
      Class #1 Warning: #2%
   }');
DefMacro('\ClassWarningNoLine{}{}',
  '\ClassWarning{#1}{#2\@gobble}');
DefMacro('\ClassInfo{}{}',
  '\GenericInfo{%
      (#1) \space\space\@spaces\@spaces
   }{%
      Class #1 Info: #2%
   }');
DefMacro('\@latex@error{}{}',
  '\GenericError{%
      \space\space\space\@spaces\@spaces\@spaces
   }{%
      LaTeX Error: #1%
   }{%
      See the LaTeX manual or LaTeX Companion for explanation.%
   }{#2}');
DefMacro('\@latex@warning{}',
  '\GenericWarning{%
      \space\space\space\@spaces\@spaces\@spaces
   }{%
      LaTeX Warning: #1%
   }');
DefMacro('\@latex@warning@no@line{}',
  '\@latex@warning{#1\@gobble}');
DefMacro('\@latex@info{}',
   '\GenericInfo{%
      \@spaces\@spaces\@spaces
   }{%
      LaTeX Info: #1%
   }');
DefMacro('\@latex@info@no@line{}',
  '\@latex@info{#1\@gobble}');

#======================================================================

# From latex.ltx
#\newdimen\maxdimen \maxdimen=16383.99999pt % the largest legal <dimen>
#\newskip\hideskip \hideskip=-1000pt plus 1fill % negative but can grow
#\newdimen\p@ \p@=1pt % this saves macro space and time
#\newdimen\z@ \z@=0pt % can be used both for 0pt and 0
#\newskip\z@skip \z@skip=0pt plus0pt minus0pt
#\newbox\voidb@x % permanently void box register

# First approximation.
DefRegister('\maxdimen',Dimension(16383.99999*65536));
DefRegister('\hideskip',Glue(-1000*65536,'1fill'));
DefRegister('\p@',Dimension(65536));
DefRegister('\z@',Dimension(0));
DefRegister('\z@skip',Glue(0,0,0));
DefMacro('\voidb@x','');

# \newread
# \newwrite

#======================================================================
DefMacro('\check@mathfonts','');
DefMacro('\fontsize{}{}','');
DefMacro('\math@fontsfalse','');
DefMacro('\math@fontstrue','');
DefMacro('\selectfont','');

#======================================================================
# Various symbols, accents, etc from Chapter 3 defined in Primitives.pm

#**********************************************************************
# Semi-Undocumented stuff
#**********************************************************************
DefMacro('\@ifnextchar Token {}{}', sub {
  my($self,$token,$if,$else)=@_;
  my $next = $GULLET->readNonSpace;
  # NOTE: Not actually substituting, but collapsing ## pairs!!!!
  ( LaTeXML::Expandable::substituteTokens($token->equals($next) ? $if : $else),$next); });

#======================================================================
# Hair
DefPrimitive('\makeatletter',sub { $STOMACH->assignCatcode(CC_LETTER,'@'); return; });
DefPrimitive('\makeatother', sub { $STOMACH->assignCatcode(CC_OTHER,'@'); return; });

#**********************************************************************
#**********************************************************************
# Sundry (is this ams ?)
DefConstructor('\textprime',"\x{00B4}"); # ACUTE ACCENT

#**********************************************************************
1;
