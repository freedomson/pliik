# -*- CPERL -*-
# /=====================================================================\ #
# |  paralist                                                           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Package Options
# Ignorable options
foreach my $option (qw(alwaysadjust neveradjust neverdecrease increaseonly
		       newitem olditem newenum oldenum
		       defblank pointedenum pointlessenum
		     cfg nocfg flushright flushleft)){
  DeclareOption($option,undef); }

# pointedenum, pointlessenum should give nested enumeration levels (pointless w/o trailing '.')

ProcessOptions();

#======================================================================
# paralist defines 9 environments named:
#  (compact | inpara | aspara)(enum | item | desc)
# The general class is:
#   enum for enumeration,
#   item for itemize,
#   desc for description
# The formatting is
#   inpara : done inline. This is tricky w/LaTeXML's model, since itemize is a block.
#             we'll just turn them into text.
#   compact: same as normal, but w/less spacing above & below
#   aspara : same as normal, but each item is formatted as a paragraph
#            (ie. leftmargin is normal)
# These last two can be treated as normally (although some css could be used)
#
# setEnumerationStyle & setItemizationStyle are defined in LaTeX.pool
#======================================================================
DefRegister('\pltopsep'   =>Dimension(0));
DefRegister('\plpartopsep'=>Dimension(0));
DefRegister('\plitemsep'  =>Dimension(0));
DefRegister('\plpaarsep'  =>Dimension(0));

DefMacro('\setdefaultleftmargin{}{}{}{}{}{}',''); # Ignore?
#======================================================================
# Enumerations

DefMacro('\setdefaultenum{}{}{}{}',sub {
  my($gullet,$tag1,$tag2,$tag3,$tag4)=@_;
  setEnumerationStyle($tag1,1);
  setEnumerationStyle($tag2,2);
  setEnumerationStyle($tag3,3);
  setEnumerationStyle($tag4,4); });

DefConstructor('\inparaenum@item[]',
	       "<ltx:anchor xml:id='#id'>#refnum</ltx:anchor> ",
	       properties=>sub{ RefStepItemCounter(); });
DefEnvironment('{inparaenum} OptionalUndigested',
	       "<ltx:text xml:id='#id'>#body</ltx:text>",
	       properties=>sub { beginItemize('inparaenum'); },
	       afterDigestBegin=>sub { setEnumerationStyle($_[1]->getArg(1)); });

DefConstructor('\paralistenum@item[]',
	       "<ltx:item xml:id='#id' refnum='#refnum'>"
	       ."?#refnum(<ltx:tag>#refnum</ltx:tag>)",
	       properties=>sub{ RefStepItemCounter(); });
DefEnvironment('{compactenum} OptionalUndigested',
	       "<ltx:enumerate xml:id='#id'>#body</ltx:enumerate>",
	       properties=>sub { beginItemize('paralistenum'); },
	       afterDigestBegin=>sub { setEnumerationStyle($_[1]->getArg(1)); });
DefEnvironment('{asparaenum} OptionalUndigested',
	       "<ltx:enumerate xml:id='#id'>#body</ltx:enumerate>",
	       properties=>sub { beginItemize('paralistenum'); },
	       afterDigestBegin=>sub { setEnumerationStyle($_[1]->getArg(1)); });

#======================================================================
# Itemizations

DefMacro('\setdefaultitem{}{}{}{}',sub {
  my($gullet,$tag1,$tag2,$tag3,$tag4)=@_;
  setItemizationStyle($tag1,1);
  setItemizationStyle($tag2,2);
  setItemizationStyle($tag3,3);
  setItemizationStyle($tag4,4); });

DefConstructor('\inparaitem@item []',
	       "<ltx:anchor xml:id='#id'>#refnum</ltx:anchor> ",
	       properties=>sub{ RefStepItemCounter(); });
DefEnvironment('{inparaitem} OptionalUndigested',
	       "<ltx:text xml:id='#id'>#body</ltx:text>",
	       properties=>sub { beginItemize('inparaitem'); },
	       afterDigestBegin=>sub { setItemizationStyle($_[1]->getArg(1)); });

DefConstructor('\paralistitem@item OptionalUndigested',
	       "<ltx:item xml:id='#id'>?#refnum(<ltx:tag>#refnum</ltx:tag>)",
	       properties=>sub{ RefStepItemCounter(); });
DefEnvironment('{compactitem} OptionalUndigested',
	       "<ltx:itemize xml:id='#id'>#body</ltx:itemize>",
	       properties=>sub { beginItemize('paralistitem'); },
	       afterDigestBegin=>sub { setItemizationStyle($_[1]->getArg(1)); });
DefEnvironment('{asparaitem} OptionalUndigested',
	       "<ltx:itemize xml:id='#id'>#body</ltx:itemize>",
	       properties=>sub { beginItemize('paralistitem'); },
	       afterDigestBegin=>sub { setItemizationStyle($_[1]->getArg(1)); });

#======================================================================
# Descriptions
DefConstructor('\inparadesc@item[]',
	       "<ltx:anchor xml:id='#id'>#1</ltx:anchor> ",
	       properties=>sub{ RefStepItemCounter(); });
DefEnvironment('{inparadesc}',
	       "<ltx:text xml:id='#id'>#body</ltx:text>",
	       properties=>sub { beginItemize('inparadesc'); });

DefEnvironment('{compactdesc}',
	       "<ltx:description xml:id='#id'>#body</ltx:description>",
	       properties=>sub { beginItemize('description'); });
DefEnvironment('{asparadesc}',
	       "<ltx:description xml:id='#id'>#body</ltx:description>",
	       properties=>sub { beginItemize('description'); });
# \paradescriptionlabel{}

#======================================================================

1;
