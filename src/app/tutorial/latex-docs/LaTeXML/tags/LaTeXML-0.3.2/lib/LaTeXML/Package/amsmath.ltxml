# -*- CPERL -*-
# /=====================================================================\ #
# |  amsmath                                                            | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

#**********************************************************************
# See amsldoc

# Currently only a random collection of things I need for DLMF chapters.
# Eventually, go through the doc and implement it all.
#**********************************************************************
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

# TODO:
#   Interesting options for limits placement
#   And TESTING!!!!!

# sub-packages:
RequirePackage('amsbsy');
RequirePackage('amstext');
RequirePackage('amsopn');

# Optional packages
#   amscd
#   amsxtra

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Section 3:  Displayed equations
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# General implementation comments:
#   Some of these environments are intended for breaking up single equations
# into multiple lines, while others are for presenting several equations in a group.
# [some environments may be more ambiguous]
# In any case, there may be specific relative alignment expected between the lines.
#
# Our primary objective, in LaTeXML, is to get at the semantics of the document,
# and secondarily, to preserve enough of the author's intent to generate
# presentation MathML that has the originally desired appearance.

# Thus, our first concern is to recognize the portions of the input which represent
# individual equations.  These sequences can then be passed to the math parser
# and hopefully recognized.
#
# The secondary objective is not yet fully carried out.
# The idea is to insert additional hint or punctuation tokens that indicate the
# requested alignment points or linebreaks.  Currently hints are discarded
# before parsing.  Presumably, they need to be attached to neighboring tokens,
# and preserved through the parsing process?
# Hopefully, there would be enough attributes remaining for the presentation
# mathml generator to reconstruct an appropriate alignment afterwards.

# Note that the default implementation of \\ (in LaTeX) is to generate an XMHint.

#======================================================================
# Section 3.1 introduction

#======================================================================
# Section 3.2 Single equations

#  equation, equation*

#======================================================================
# Section 3.3 Split equations without alignment

# Multiline is for single equations, but split on multiple lines, using \\ to separate lines.
DefEnvironment('{multline}',
	       "<equation refnum='#refnum'><Math mode='display'><XMath>#body</XMath></Math></equation>", 
	       mode=>'display_math',
	       properties=> {refnum=>sub { refStepCounter('equation'); }});
DefEnvironment('{multline*}',
	       "<equation><Math mode='display'><XMath>#body</XMath></Math></equation>", 
	       mode=>'display_math');

#======================================================================
# Section 3.4 Split equations with alignment

# split is used within other math environments to provide line breaks and alignment.
# It is not entirely clear the contents necessarily represent any complete mathematical entity,
# so the begin and end also yield XMHint's!
DefEnvironment('{split}',
	       "<XMHint name='split-begin'/>#body<XMHint name='split-end'/>",
	       beforeDigest=>sub{ DefConstructor("&","<XMHint name='align'/>"); });

#======================================================================
# Section 3.5 Equation groups without alignment

DefConstructor('\@@gather@newline',
	       "</XMath></Math></equation>"
	       ."<equation refnum='#refnum'><Math mode='display'><XMath>",
	       properties=> {refnum=>sub { refStepCounter('equation'); }},
	       untex=>'\\');
DefConstructor('\@@gather@newline@nonum',
	       "</XMath></Math></equation>"
	       ."<equation><Math mode='display'><XMath>",
	       untex=>'\\');

# gather collects several equations, separated by \\
# NOTE: This gets the structure right, but the addition of tex property isn't cooperating.
DefEnvironment('{gather}',
	       "<equationgroup><equation refnum='#refnum'><Math mode='display'><XMath>"
	       ."#body"
	       ."</XMath></Math></equation></equationgroup>",
	       mode=>'display_math',
	       beforeDigest=>sub{  Let("\\\\",'\@@gather@newline'); },
	       properties=> {refnum=>sub { refStepCounter('equation'); }});
DefEnvironment('{gather*}',
	       "<equationgroup><equation><Math mode='display'><XMath>"
	       ."#body"
	       ."</XMath></Math></equation></equationgroup>",
	       mode=>'display_math',
	       beforeDigest=>sub{ Let("\\\\",'\@@gather@newline@nonum'); });

#======================================================================
# Section 3.6 Equation groups with mutual alignment

# This environment can contain multiple columns, but apparently the intension is 
# that each pair should constitute an equation:
#    lhs & = rhs & lhs & = rhs ...
# where each lhs is right aligned, and rhs is left aligned.

DefConstructor('\@@align@newline',
	       "</XMath></Math></equation>"
	       ."<equation refnum='#refnum'><Math mode='display'><XMath>",
	       properties=> {refnum=>sub { refStepCounter('equation'); }},
	       beforeDigest=>sub{ Let('&','\@@align@odd'); },
	       untex=>'\\');
DefConstructor('\@@align@newline@nonum',
	       "</XMath></Math></equation>"
	       ."<equation><Math mode='display'><XMath>",
	       beforeDigest=>sub{ Let('&','\@@align@odd'); },
	       untex=>'\\');
DefConstructor('\@@align@odd',"<XMHint name='align'/>",
	       afterDigest=>sub{ Let('&','\@@align@even'); },
	       untex=>'&');
DefConstructor('\@@align@even',
	       "</XMath></Math></equation>"
	       ."<equation><Math mode='display'><XMath>",
	       afterDigest=>sub{ Let('&','\@@align@odd'); },
	       untex=>'&');

# Question: Should the extra "equations" in each row be <equation> or just <Math> ????
DefEnvironment('{align}',
	       "<equationgroup><equation refnum='#refnum'><Math mode='display'><XMath>"
	       ."#body"
	       ."</XMath></Math></equation></equationgroup>",
	       mode=>'display_math',
	       beforeDigest=>sub{ Let('&','\@@align@odd'); Let("\\\\",'\@@align@newline'); },
	       properties=> {refnum=>sub { refStepCounter('equation'); }});

DefEnvironment('{align*}',
	       "<equationgroup><equation><Math mode='display'><XMath>"
	       ."#body"
	       ."</XMath></Math></equation></equationgroup>",
	       mode=>'display_math',
	       beforeDigest=>sub{ Let('&','\@@align@odd'); Let("\\\\",'\@@align@newline@nonum'); });

# flalign typesets in the full column width.
# We'll ignore that distinction for now. 
DefEnvironment('{flalign}',
	       "<equationgroup><equation refnum='#refnum'><Math mode='display'><XMath>"
	       ."#body"
	       ."</XMath></Math></equation></equationgroup>",
	       mode=>'display_math',
	       beforeDigest=>sub{ Let('&','\@@align@odd'); Let("\\\\",'\@@align@newline'); },
	       properties=> {refnum=>sub { refStepCounter('equation'); }});

DefEnvironment('{flalign*}',
	       "<equationgroup><equation><Math mode='display'><XMath>"
	       ."#body"
	       ."</XMath></Math></equation></equationgroup>",
	       mode=>'display_math',
	       beforeDigest=>sub{ Let('&','\@@align@odd'); Let("\\\\",'\@@align@newline@nonum'); });

# alignat doesn't stretch the columns out as much (?)
# We'll ignore that distinction for now. 
DefEnvironment('{alignat}{}',
	       "<equationgroup><equation refnum='#refnum'><Math mode='display'><XMath>"
	       ."#body"
	       ."</XMath></Math></equation></equationgroup>",
	       mode=>'display_math',
	       beforeDigest=>sub{ Let('&','\@@align@odd'); Let("\\\\",'\@@align@newline'); },
	       properties=> {refnum=>sub { refStepCounter('equation'); }});

DefEnvironment('{alignat*}{}',
	       "<equationgroup><equation><Math mode='display'><XMath>"
	       ."#body"
	       ."</XMath></Math></equation></equationgroup>",
	       mode=>'display_math',
	       beforeDigest=>sub{ Let('&','\@@align@odd'); Let("\\\\",'\@@align@newline@nonum'); });


#======================================================================
# Section 3.7. Alignmnet building blocks
#    gathered, aligned alignedat
# These are intended to be used within math environments, but do they have the same
# `semanitic' intent as far as separating equations?
# aligned/alignedat perhaps do, since the alignment doesn't make much sense otherwise
# [except for a single column, but then split should be used]
# gathered could make sense as arranging a single subexpression into multiple lines within
# a larger expression.
#   On the other hand, we'll already be inside of a math environment, so delineating
# these potentially separate equations will be awkward anyway!

# So, we just leave Hint markers for & and \\
DefEnvironment('{gathered}[]',
	       "<XMHint name='gathered-begin'/>#body<XMHint name='gathered-end'/>");
DefEnvironment('{aligned}[]',
	       "<XMHint name='aligned-begin'/>#body<XMHint name='aligned-end'/>",
	       beforeDigest=>sub{ DefConstructor("&","<XMHint name='align'/>"); });
DefEnvironment('{alignedat}{}[]',
	       "<XMHint name='aligned-begin'/>#body<XMHint name='aligned-end'/>",
	       beforeDigest=>sub{ DefConstructor("&","<XMHint name='align'/>"); });

DefEnvironment('{cases}',
	       sub { matharray($_[0],'',$_[1], 'Cases','Case','Cell');},
	       beforeDigest=>\&before_matharray, afterDigest=>\&after_matharray);

#======================================================================
# Section 3.8 Adjusting tag placement
DefMacro('\raisetag{Dimension}',''); # Ignorable

#======================================================================
# Section 3.9 Vertical spacing and page breaks in multiline display
DefMacro('\displaybreak[]','');	# Ignorable

#======================================================================
# Section 3.10 Interrupting a display
#   \intertext

# TODO

#======================================================================
# Section 3.11 Equation numbering

# Section 3.11.1 Numbering hierarchy
DefPrimitive('\numberwithin{}{}',sub {
  my($ignore,$counter,$within)=@_;
  NewCounter($counter->toString,$within->toString); });

# Section 3.11.2 Cross references to equation numbers
DefConstructor('\eqref{semiverb}', "(<ref labelref='#1'>VALUE('LABEL@#1')</ref>)");

# Section 3.11.3 Subordinate numbering sequences.
DefEnvironment('{subequations}',"<equationgroup refnum='#refnum'>#body</equationgroup>",
	       beforeDigest=>sub { NewCounter('parentequation');
				   refStepCounter('equation');
				   AssignValue("\\c\@parentequation"=>LookupValue("\\c\@equation"));
				   AssignValue("\\c\@equation",Number(0));
				   Let('\theparentequation','\theequation');
				   DefMacro('\theequation','\theparentequation\alph{equation}'); },
	       afterDigest =>sub{ AssignValue("\\c\@equation"=>LookupValue("\\c\@parentequation")); },
	       properties=> {refnum=>sub {  $GULLET->expandTokens(Tokens(T_CS("\\theparentequation"))); }});

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Section 4: Miscellaneous mathematical features
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#======================================================================
# Section 4.1 Matrices

DefEnvironment('{matrix}',
	       sub { matharray($_[0],'',$_[1], 'Matrix','Row','Cell');},
	       beforeDigest=>\&before_matharray, afterDigest=>\&after_matharray);

DefEnvironment('{pmatrix}',
	       sub { matharray($_[0],'',$_[1], 'Matrix','Row','Cell',open=>'(',close=>')');},
	       beforeDigest=>\&before_matharray, afterDigest=>\&after_matharray);
DefEnvironment('{bmatrix}',
	       sub { matharray($_[0],'',$_[1], 'Matrix','Row','Cell',open=>'[',close=>']');},
	       beforeDigest=>\&before_matharray, afterDigest=>\&after_matharray);
DefEnvironment('{Bmatrix}',
	       sub { matharray($_[0],'',$_[1], 'Matrix','Row','Cell',open=>'{',close=>'}');},
	       beforeDigest=>\&before_matharray, afterDigest=>\&after_matharray);
DefEnvironment('{vmatrix}',
	       sub { matharray($_[0],'',$_[1], 'Matrix','Row','Cell',open=>'|',close=>'|');},
	       beforeDigest=>\&before_matharray, afterDigest=>\&after_matharray);
DefEnvironment('{Vmatrix}',
	       sub { matharray($_[0],'',$_[1], 'Matrix','Row','Cell',open=>"\x{2225}",close=>"\x{2225}");},
	       beforeDigest=>\&before_matharray, afterDigest=>\&after_matharray);

#======================================================================
# Section 4.2 Math spacing commands
# \, == \thinspace
# \: == \medspace
# \; == \thickspace
# \quad
# \qquad
# \! == \negthinspace
# \negmedspace
# \negthickspace
# I think only these are new
DefConstructor('\medspace',"?IfMath(<XMHint name='medspace'/>)(\x{2005})");  # FOUR-PER-EM SPACE
DefConstructor('\negthinspace',"?IfMath(<XMHint name='negthinspace'/>)()");
DefConstructor('\negmedspace',"?IfMath(<XMHint name='negmedspace'/>)()");
DefConstructor('\negthickspace',"?IfMath(<XMHint name='negthickspace'/>)()");

#======================================================================
# Section 4.3 Dots
# Nice idea, but not sure what I really should do about it.
# In principle, a processor has access to the context....
DefMacro('\dotsc','\ldots');	# Dots with commas
DefMacro('\dotsb','\cdots');	# Dots with binary operators/relations
DefMacro('\dotsm','\cdots');	# multiplication dots
DefMacro('\dotsi','\cdots');	# Dots with integrals
DefMacro('\dotso','\ldots');	# other dots (??)

#======================================================================
# Section 4.4 Nonbreaking dashes
# \nobreakdash
DefMacro('\nobreakdash','');	# Ignorable
#======================================================================
# Section 4.5 Accents in math
DefMath('\dddot{}', "\x{02D9}\x{02D9}\x{02D9}",         operator_role=>'OVERACCENT'); # DOT ABOVE
DefMath('\ddddot{}',"\x{02D9}\x{02D9}\x{02D9}\x{02D9}", operator_role=>'OVERACCENT'); # DOT ABOVE

# In amsxtra
#  \sphat \sptilde

#======================================================================
# Section 4.6 Roots
# It would be nice to carry this info through to mathml, but ignore for now.
DefMacro('\leftroot{}','');
DefMacro('\uproot{}','');

#======================================================================
# Section 4.7 Boxed formulas

DefConstructor('\boxed{}',"<XMWrap style='boxed'><XMArg>#1</XMArg></XMWrap>");

#======================================================================
# Section 4.8 Over and under arrows

# Should be in LaTeX (& TeX): \overrightarrow, \overleftarrow
DefMath('\underrightarrow{}',    "\x{2192}", operator_role=>'UNDERACCENT');
DefMath('\underleftarrow{}',     "\x{2190}", operator_role=>'UNDERACCENT');
DefMath('\overleftrightarrow{}', "\x{2194}", operator_role=>'OVERACCENT');
DefMath('\underlefrighttarrow{}',"\x{2194}", operator_role=>'UNDERACCENT');

#======================================================================
# Section 4.9 Extensible arrows
#  \xleftarrow, \xrightarrow

DefConstructor('\xleftarrow[]{}',
	       "<XMApp role='ARROW'><XMTok name='stacked'/><XMArg>#2</XMArg><XMTok>\x{2190}</XMTok>"
	       . "?#1(<XMArg>#1</XMArg>)</XMApp>");
DefConstructor('\xrightarrow[]{}',
	       "<XMApp role='ARROW'><XMTok name='stacked'/><XMArg>#2</XMArg><XMTok>\x{2192}</XMTok>"
	       . "?#1(<XMArg>#1</XMArg>)</XMApp>");

#======================================================================
# Section 4.10 Affixing symbols to other symbols

DefConstructor('\overset{}{}',"<XMApp><XMWrap role='OVERACCENT>#1</XMWrap><XMArg>#2</XMArg></XMApp>");
DefConstructor('\underset{}{}',"<XMApp><XMWrap role='UNDERACCENT>#1</XMWrap><XMArg>#2</XMArg></XMApp>");

#======================================================================
# Section 4.11 Fractions and related commands

# Section 4.11.1 The \frac, \dfrac, and \tfrac commands
DefMath('\dfrac{}{}','/', style=>'display', name=>"/", operator_role=>'MULOP',
	beforeDigest=>sub { BGroup; AssignValue(mathstyle=>'text'); },
	afterDigest =>\&EGroup);
DefMath('\tfrac{}{}','/', style=>'text',    name=>"/", operator_role=>'MULOP',
	beforeDigest=>sub { BGroup; AssignValue(mathstyle=>'script'); },
	afterDigest =>\&EGroup);
DefMath('\ifrac{}{}','/', style=>'inline',  name=>"/", operator_role=>'MULOP');

# Section 4.11.2 The \binom, \dbinom, and \tbinom commands
DefMath('\binom{}{}', '', name=>'binomial');
DefMath('\tbinom{}{}','', name=>'binomial', style=>'text');
DefMath('\dbinom{}{}','', name=>'binomial', style=>'display');

# Section 4.11.3 The \genfrac command
DefConstructor('\genfrac{}{}{}{}{}{}',
	       "<XMApp open='#1' close='#2'><XMTok name='stacked' thickness='#3' style='?#4(#4)(normal)'/>"
	       .  "<XMArg>#5</XMArg><XMArg>#6</XMArg></XMApp>");

#======================================================================
# Section 4.12 Continued fractions
# Is \cfracstyle my own invention? (I know I've redefined \cfrac in DLMFmath)
DefConstructor('\cfrac{}{}',
	       "<XMApp><XMTok>cfrac</XMTok><XMArg>#1</XMArg><XMArg>#2</XMArg></XMApp>");
# This should get incorporated into any \cfrac's that are constructed in scope.
DefConstructor('\cfracstyle{}',''); # "<XMHint name='cfracstyle'/>");

#======================================================================
# Section 4.13 Smash options
DefConstructor('\smash[]{}',"#2"); # well, what?

#======================================================================
# Section 4.14 Delimiters

# Section 4.14.1 Delimiter sizes
# Redefinitions(?) of \bigl, \bigr, \Bigl,\Bigr, \biggl, \biggr, \Biggl, \Biggr

# Section 4.14.2 Vertical bar notations
DefMath('\lvert','|', role=>'OPEN');
DefMath('\lVert',"\x{2225}", role=>'OPEN'); # PARALLEL TO
DefMath('\rvert','|', role=>'CLOSE');
DefMath('\rVert',"\x{2225}", role=>'CLOSE'); # PARALLEL TO

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Section 5  Operator names
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#======================================================================
# Section 5.1 Defining new operator names

# See package amsopn (included by default)

#======================================================================
# Section 5.2 \mod and it's relatives
#  \mod, \bmod, \pmod which are already in LaTeX
DefMath('\pod{}', '(#1)', role=>'POSTFIX'); # Well, sorta postfix..

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Section 6 The \text command
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# See package amstext, included by default.

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Section 7 Integrals and sums
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#======================================================================
# Section 7.1 Multiline subscripts and superscripts
#  \substack, \begin{subarray}

DefConstructor('\substack{}',"<XMApp><XMTok name='Collection'/><XMArg>#1</XMArg></XMApp>",
	       beforeDigest=>sub{ BGroup; DefConstructor("\\\\","</XMArg><XMArg>"); },
	       afterDigest =>\&EGroup);
DefEnvironment('{subarray}[]',"<XMApp><XMTok name='Collection' alignment='#1'/><XMArg>#body</XMArg></XMApp>",
	       beforeDigest=>sub{ DefConstructor("\\\\","</XMArg><XMArg>"); });

#======================================================================
# Section 7.2 the \sideset command

# This is intended to be a modifier for \sum or \prod
# NOTE that there can be at most one subscript in each of the pre & post, ditto for superscript.
# Thus, our representation is: sideset(presub,presup,postsub,postsup,object)
# Note, also, that this is quite ugly, but since it is a rather peculiar special case.... ?
DefConstructor('\sideset{}{}{}', sub {
  my($document,$pre,$post,$ob)=@_;
  my @scripts = (undef,undef,undef,undef);

  my $node=$document->openElement('XMApp');
  my $phase=0;
  foreach my $group ($pre,$post){
    $document->absorb($group);
    foreach my $p ($node->childNodes){
      my $role = $p->getAttribute('role')||'';
      if   ($role eq 'POSTSUBSCRIPT'  ){ $scripts[$phase+0] = $p->firstChild; }
      elsif($role eq 'POSTSUPERSCRIPT'){ $scripts[$phase+1] = $p->firstChild; }
      else { warn("Non sub/superscript in \\sideset: $p"); }
      $node->removeChild($p); }
    $phase +=2;  }

  # And finally build it.
  $document->insertElement('XMTok',undef,name=>'sideset');
  foreach my $script (@scripts){
    if($script){
      $node->appendChild($script); }
    else {
      $document->insertElement('XMTok',undef,name=>'Empty'); }}
  $document->insertElement('XMArg',$ob);
  $document->closeElement('XMApp');
});

#======================================================================
# Section 7.3 Placement of subscripts and limits
# \limits and \nolimits; already in TeX

#======================================================================
# Section 7.4 Multiple integral signs

DefMath('\iint', "\x{222C}", name=>'DoubleIntegral', role=>'INTOP'); # DOUBLE INTEGRAL
DefMath('\iiint',"\x{222D}", name=>'TripleIntegral', role=>'INTOP'); # TRIPLE INTEGRAL
DefMath('\iiiint',"\x{222C}\x{222C}", name=>'QuadrupleIntegral', role=>'INTOP'); # 2 "DOUBLE INTEGRAL"s ??

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Section 8 Commutative diagrams
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Separately in amscd
# CD environment
# with commands @>.., @<<<, @VVV, @AAA to give right, left, down, up arrows...

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Section 9 Using math fonts
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#======================================================================
# Section 9.1 Introduction
# See amsfonts, euscript

#======================================================================
# Section 9.2 Recommended use of math font commands

#======================================================================
# Section 9.3 Bold math symbols
# See package amsbsy (included by default)

#======================================================================
# Section 9.4 Italic Greek letters
# I think this is sufficient:
DefMacro('\varGamma',   '\mathit{\Gamma}');
DefMacro('\varSigma',   '\mathit{\Sigma}');
DefMacro('\varDelta',   '\mathit{\Delta}');
DefMacro('\varUpsilon', '\mathit{\Upsilon}');
DefMacro('\varTheta',   '\mathit{\Theta}');
DefMacro('\varPhi',     '\mathit{\Phi}');
DefMacro('\varLambda',  '\mathit{\Lambda}');
DefMacro('\varPsi',     '\mathit{\Psi}');
DefMacro('\varXi',      '\mathit{\Xi}');
DefMacro('\varOmega',   '\mathit{\Omega}');
DefMacro('\varPi',      '\mathit{\Pi}');
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1;

