# -*- CPERL -*-
# /=====================================================================\ #
# |  TeX                                                                | #
# | Core TeX Implementation for LaTeXML                                 | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use Unicode::Normalize;
use XML::LibXML;
no warnings 'redefine';

RegisterNamespace(ltxml=>"http://dlmf.nist.gov/LaTeXML",1);

#**********************************************************************
# CORE TeX; Built-in commands.
#**********************************************************************

#**********************************************************************
# Expandable Primitives
# See The TeXBook, Ch. 20, Definitions (also called Macros) pp. 212--215
#**********************************************************************

#======================================================================
# Conditionals
#   Expand enough to determine true/false, then maybe skip
#   record a flag somewhere so that \else or \fi is recognized
#   (otherwise, they should signal an error)

# Skipping for conditionals
#   0 : skip to \fi
#  -1 : skip to \else, if any, or \fi
#   n : skip to n-th \or, if any, or \else, if any, or \fi.
sub skipConditionalBody {
  my($nskips)=@_;
  my $fi_def   = LookupDefinition(T_CS('\fi'));
  my $or_def   = LookupDefinition(T_CS('\or'));
  my $else_def = LookupDefinition(T_CS('\else'));
  my $level=1;
  my $n_ors = 0;
  while(my $t=ReadToken){
    if(defined(my $defn = LookupDefinition($t))){
      if($defn->isExpandable && $defn->isConditional){
	$level++; }
      elsif(($defn eq $fi_def) && (!--$level)){
	fiHandler(); return; }
      elsif($level > 1){	# Ignore nested \else,\or
      }
      elsif(($defn eq $or_def) && (++$n_ors == $nskips)){
	return; }
      elsif(($defn eq $else_def) && $nskips){
	return; }}}
  Fatal("Conditional fell off end"); }

# NOTE: See Definition setting current_if_level before conditionals!

sub ifHandler   { 
  AssignValue(if_level=>LookupValue('current_if_level'), 'global');
  skipConditionalBody(-1) unless $_[0]; return; }

sub elseHandler { 
  my ($curr,$level) = (LookupValue('current_if_level'),LookupValue('if_level'));
  if(!$curr){
    Error("Stray \\else [$curr,$level]"); return; }
  elsif($curr > $level){
    (T_CS('\relax'),T_CS('\else')); }
  else {
    skipConditionalBody(0); return; }}

sub fiHandler {
  my ($curr,$level) = (LookupValue('current_if_level'),LookupValue('if_level'));
  if(!$curr){
    Error("Stray \\fi [$curr,$level]"); return; }
  elsif($curr > $level){
    (T_CS('\relax'),T_CS('\fi')); }
  else {
    AssignValue(current_if_level=>$curr-1, 'global'); 
    AssignValue(if_level=>$curr-1, 'global'); 
    return; }}

#======================================================================
# Should complain if we aren't actually evaluating an \if
DefExpandable('\else', \&elseHandler);
DefExpandable('\or',   \&elseHandler);
DefExpandable('\fi',   \&fiHandler);

sub compare {
  my($a,$rel,$b)=@_;
  if   ($rel->equals(T_OTHER('<'))){ $a < $b; }
  elsif($rel->equals(T_OTHER('='))){ $a == $b; }
  elsif($rel->equals(T_OTHER('>'))){ $a > $b; }
  else { Fatal("Non-relation token: ".Stringify($rel)." in comparison conditional"); }}

DefExpandable('\ifnum Number Token Number', 
	      sub { ifHandler(compare($_[1]->valueOf,$_[2],$_[3]->valueOf)); },
	      isConditional=>1);
DefExpandable('\ifdim Dimension Token Dimension',
	      sub { ifHandler(compare($_[1]->valueOf,$_[2],$_[3]->valueOf)); },
	      isConditional=>1);
DefExpandable('\ifodd Number',
	      sub { ifHandler($_[1]->valueOf % 2); },
	     isConditional=>1);

# \ifvmode
# \ifhmode
DefExpandable('\ifmmode',sub { ifHandler(LookupValue('IN_MATH')); }, isConditional=>1);

# \ifinner
DefExpandable('\if XToken XToken',
	      sub { ifHandler($_[1]->getCharcode == $_[2]->getCharcode); },
	      isConditional=>1);
DefExpandable('\ifcat XToken XToken', 
	      sub { ifHandler($_[1]->getCatcode  == $_[2]->getCatcode); },
	      isConditional=>1);

# !! ????
DefExpandable('\ifx Token Token', sub {
  my($self,$token1,$token2)=@_;
  my $def1=LookupMeaning($token1);
  my $def2=LookupMeaning($token2);
  my $bool=0;
  if(defined $def1 != defined $def2){	       # Don't both have defs or not have defs
    $bool=0; }
  elsif(!defined $def1 && !defined $def2){	# Neither have defs
    $bool = $_[1]->equals($_[2]); }		# compare the tokens themselves.
  elsif($def1->equals($def2)){	# Same defn (hopefully covers same primitives ???)
    $bool = 1; }		# But what about same \chardefs, etc....
  ifHandler($bool); },
	      isConditional=>1);

# Kinda rough: We don't really keep track of modes as carefully as TeX does.
# We'll assume that a box is horizontal if there's anything at all,
# but it's not a vbox (!?!?)
sub classify_box {
  my($boxnum)=@_;
  my $box = LookupValue('box'.$boxnum->valueOf);
  if(!$box){ undef; }
  elsif($box->isa('LaTeXML::Whatsit') && ($box->getDefinition eq LookupDefinition(T_CS('\vbox')))){
    'vbox'; }
  else {
    'hbox'; }}

DefExpandable('\ifvoid Number', sub { ifHandler(!classify_box($_[1]));}, isConditional=>1);
DefExpandable('\ifhbox Number', sub { ifHandler(classify_box($_[1]) eq 'hbox');}, isConditional=>1);
DefExpandable('\ifvbox Number', sub { ifHandler(classify_box($_[1]) eq 'vbox');}, isConditional=>1);

# Implementing this assumes we've got some notion of file numbers!!!
# \ifeof Number

DefExpandable('\iftrue', sub { ifHandler(1); }, isConditional=>1);
DefExpandable('\iffalse',sub { ifHandler(0); }, isConditional=>1);

DefExpandable('\ifcase Number', sub {
  my($self,$num)=@_;
  AssignValue(if_level=>LookupValue('current_if_level'), 'global');
  $num = $num->valueOf;
  if($num > 0){ 
    skipConditionalBody($num); }
  return; },
  isConditional=>1);

#======================================================================

DefPrimitive('\relax',undef);
DefExpandable('\number Number',       sub { Explode($_[1]->valueOf); });

#======================================================================

DefExpandable('\romannumeral Number', sub { roman($_[1]->valueOf); });
DefExpandable('\string Token ',        sub { Explode($_[1]->getString); });
DefExpandable('\jobname',Tokens()); # Set to the filename by initialization

DefExpandable('\fontname', sub { Explode("fontname not implemented"); });

DefExpandable('\meaning Token',sub {
  my($self,$tok)=@_;
  my $meaning = LookupMeaning($tok);
  Explode(defined $meaning ? $meaning : 'undefined'); });

DefExpandable('\csname',sub {
  my ($token,@toks)=();
  while(($token = ReadXToken()) && ($token->getString ne '\endcsname')){
    push(@toks,$token); }
  $token = T_CS("\\".Tokens(@toks)->toString);
  Let($token, T_CS('\relax')) unless defined LookupMeaning($token);
  $token;  });

DefPrimitive('\endcsname', sub { Fatal("Extra \csname"); });

DefExpandable('\expandafter Token Token',sub {
  my($self,$tok,$xtok)=@_;
  my $defn;
  if(defined($defn=LookupDefinition($xtok)) && $defn->isExpandable){
    ($tok,$defn->invoke); } # Expand $xtok ONCE ONLY!
  else {
    ($tok,$xtok); }});

# Insert magic token that Gullet knows not to expand the next one.
DefExpandable('\noexpand',sub { Token('',CC_NOTEXPANDED); });

DefExpandable('\topmark',        sub { return; });
DefExpandable('\firstmark',      sub { return; });
DefExpandable('\botmark',        sub { return; });
DefExpandable('\splitfirstmark', sub { return; });
DefExpandable('\splitbotmark',   sub { return; });

DefExpandable('\input',sub {
  my ($token,@tokens)=();
  while(($token=ReadXToken()) && ($token->getCatcode != CC_SPACE)){
    push(@tokens,$token); }
  my $path = Tokens(@tokens)->toString;
  $path = $1 if $path =~ /^\{(.*)\}$/; # just in case
  Input($path,['tex','']);
  return; });

DefExpandable('\endinput',sub { $GULLET->closeMouth(1); return; });

# \the<internal quantity>
DefExpandable('\the',sub {
  my($defn,@args) = @{ReadVariable()};
  my $type = $defn->isRegister;
  if(!$type){ Fatal("You can't use ".ToString($defn->getCS)." after \\the"); }
  my $value = $defn->valueOf(@args);
  my @tokens = ($type eq 'any' ? $value->unlist : Explode($value->toString));
  if($LaTeXML::NOEXPAND_THE){	# See \the for the sense in this.
    $GULLET->neutralizeTokens(@tokens); }
  else {
    @tokens; }});

#**********************************************************************
# Primitives
# See The TeXBook, Chapter 24, Summary of Vertical Mode
#  and Chapter 25, Summary of Horizontal Mode.
# Parsing of basic types (pp.268--271) is (mostly) handled in Gullet.pm
#**********************************************************************

DefPrimitive('\bye',sub {
  $GULLET->flush;
  return; });
#======================================================================
# Registers & Parameters
# See Chapter 24, Summary of Vertical Mode
# Define a whole mess of useless registers here ...
# Values are from Appendix B, pp. 348-349 (for whatever its worth)
#======================================================================

#======================================================================
# Integer registers; TeXBook p. 272-273
our %iparms= (pretolerance=>100, tolerance=>200, hbadness=>1000, vbadness=>1000,
	      linepenalty=>10, hypenpenalty=>50, exhyphenpenalty=>50,
	      binoppenalty=>700, relpenalty=>500,
	      clubpenalty=>150, widowpenalty=>150, displaywidowpenalty=>50,
	      brokenpenalty=>100, predisplaypenalty=>10000,
	      postdisplaypenalty=>0, interlinepenalty=>0, 
	      floatingpenalty=>0, outputpenalty=>0, 
	      doublehyphendemerits=>10000, finalhyphendemerits=>5000, adjdemerits=>10000,
	      looseness=>0, pausing=>0, 
	      holdinginserts=>0, tracingonline=>0, tracingmacros=>0, tracingstats=>0, 
	      tracingparagraphs=>0, tracingpages=>0, tracingoutput=>0, tracinglostchars=>1,
	      tracingcommands=>0, tracingrestores=>0, language=>0, uchyph=>1, lefthyphenmin=>0,
	      righthyphenmin=>0, globaldefs=>0, defaulthyphenchar=>ord('-'), defaultskewchar=>-1,
	      escapechar=>0, endlinechar=>0, newlinechar=>-1, maxdeadcycles=>0, hangafter=>0, 
	      fam=>0, mag=>1000, delimiterfactor=>0, time=>0, day=>0, month=>0, year=>0,
	      showboxbreadth=>5, showboxdepth=>3, errorcontextlines=>5);
foreach my $p (keys %iparms){
  DefRegister("\\$p",Number($iparms{$p})); }

{  my ($sec,$min,$hour,$mday,$mon,$year)=localtime();
   AssignValue('\day'  =>Number($mday), 'global');
   AssignValue('\month'=>Number($mon+1), 'global');
   AssignValue('\year' =>Number(1900+$year), 'global'); 
   AssignValue('\time' =>Number(60*$hour+$min),'global'); }

# Read-only Integer registers
our %ro_iparms=(lastpenalty=>0, inputlineno=>0, badness=>0);
foreach my $p (keys %ro_iparms){
  DefRegister("\\$p",Number($ro_iparms{$p}),readonly=>1); }

# Special integer registers (?)
# <special integer> = \spacefactor | \prevgraf | \deadcycles | \insertpenalties
our %sp_iparms=(spacefactor=>0, prevgraf=>0, deadcycles=>0, insertpenalties=>0);
foreach my $p (keys %sp_iparms){
  DefRegister("\\$p",Number($sp_iparms{$p})); }

#======================================================================
# Dimen registers; TeXBook p. 274
our %dparms=(hfuzz=>'0.1pt', vfuzz=>'0.1pt', overfullrule=>'5pt',
	     emergencystretch=>0,
	     hsize=>'6.5in', vsize=>'8.9in',
	     maxdepth=>'4pt', splitmaxdepth=>'16383.99999pt', boxmaxdepth=>'16383.99999pt',
	     lineskiplimit=>0, 
	     delimitershortfall=>'5pt', nulldelimiterspace=>'1.2pt', scriptspace=>'0.5pt',
	     mathsurround=>0, 
	     predisplaysize=>0, displaywidth=>0, displayindent=>0, parindent=>'20pt',
	     hangindent=>0, hoffset=>0, voffset=>0,);
foreach my $p (keys %dparms){
  DefRegister("\\$p",Dimension($dparms{$p})); }

# Read-only dimension registers.
our %ro_dparms=(lastkern=>0);
foreach my $p (keys %ro_dparms){
  DefRegister("\\$p",Dimension($ro_dparms{$p}), readonly=>1); }


# Special dimension registers (?)
# <special dimen> = \prevdepth | \pagegoal | \pagetotal | \pagestretch | \pagefilstretch
#    | \pagefillstretch | \pagefilllstretch | pageshrink | \pagedepth
our %sp_dparms=(prevdepth=>0, pagegoal=>0, pagetotal=>0, pagestretch=>0, pagefilstretch=>0,
		pagefillstretch=>0, pagefilllstretch=>0, pageshrink=>0, pagedepth=>0);
foreach my $p (keys %sp_dparms){
  DefRegister("\\$p",Dimension($sp_dparms{$p})); }

#======================================================================
# Glue registers; TeXBook p.274
our %gparms=(baselineskip=>0, lineskip=>0, 
	     parskip=>'0pt plus 1pt', 
	     abovedisplayskip=>'12pt plus 3pt minus 9pt',
	     abovedisplayshortskip=>'0pt plus 3pt',
	     belowdisplayskip=>'12pt plus 3pt minus 9pt',
	     belowdisplayshortskip=>'0pt plus 3pt',
	     leftskip=>0, rightskip=>0, topskip=>'10pt', splittopskip=>'10pt',
	     tabskip=>0, spaceskip=>0, xspaceskip=>0, parfillskip=>'0pt plus 1fil');
foreach my $p (keys %gparms){
  DefRegister("\\$p",Glue($gparms{$p})); }

#======================================================================
# MuGlue registers; TeXBook p.274
our %mparms=(thinmuskip=>'3mu', medmuskip=>'4mu plus 2mu minus 4mu', thickmuskip=>'5mu plus 5mu');
foreach my $p (keys %mparms){
  DefRegister("\\$p",Glue($mparms{$p})); }

#======================================================================
# Token registers; TeXBook p.275
our @tparms= qw(output everypar everymath everydisplay everyhbox everyvbox
		everyjob everycr everyhelp);

#======================================================================
# Assignment, TeXBook Ch.24, p.275
#======================================================================
# <assignment> = <non-macro assignment> | <macro assignment>

#======================================================================
# Macros
# See Chapter 24, p.275-276
# <macro assignment> = <definition> | <prefix><macro assignment>
# <definition> = <def><control sequence><definition text>
# <def> = \def | \gdef | \edef | \xdef
# <definition text> = <register text><left brace><balanced text><right brace>

sub parseDefParameters {
  my($cs, $params)=@_;
  my @tokens = $params->unlist;
  # Now, recognize parameters and delimiters.
  my @params=();
  my $n=0;
  while(@tokens){
    my $t=shift(@tokens);
    if($t->getCatcode == CC_PARAM){
      $n++; $t=shift(@tokens); 
	Fatal("Parameters for \"".ToString($cs)."\" not in order in ".ToSting($params))
	  unless $n == (ord($t->getString)-ord('0'));
      my @delim=();
      while(@tokens && ($tokens[0]->getCatcode != CC_PARAM)){
	push(@delim,shift(@tokens)); }
      if(@delim){ 
	my $expected=Tokens(@delim);
	push(@params, LaTeXML::Parameters::newParameter('Until','Until:'.$expected->toString, extra=>[$expected])); }
      elsif((scalar(@tokens)==1) && ($tokens[0]->getCatcode == CC_PARAM)){ # Special case: trailing #
	shift(@tokens);
	push(@params, LaTeXML::Parameters::newParameter('UntilBrace','UntilBrace')); }
      else {
	push(@params, LaTeXML::Parameters::newParameter('Plain','{}')); }}
    else {
      my @lit=($t);
      while(@tokens && ($tokens[0]->getCatcode != CC_PARAM)){
	push(@lit,shift(@tokens)); }
      my $expected = Tokens(@lit);
      push(@params,LaTeXML::Parameters::newParameter('Match','Match:'.$expected->toString, extra=>[$expected],
						     novalue=>1)); }
  }
  LaTeXML::Parameters->new(@params); }

sub do_def {
  my($globally, $expanded, $ignore,$cs,$params,$body)=@_;
  $params = parseDefParameters($cs,$params);
  if($expanded){
    local $LaTeXML::NOEXPAND_THE = 1;
    $body = Expand($body); }
  InstallDefinition(LaTeXML::Expandable->new($cs,$params,$body),($globally ? 'global':undef));
  return; }

DefPrimitive('\def  SkipSpaces Token UntilBrace {}', sub { do_def(0,0,@_); });
DefPrimitive('\gdef SkipSpaces Token UntilBrace {}', sub { do_def(1,0,@_); });
DefPrimitive('\edef SkipSpaces Token UntilBrace {}', sub { do_def(0,1,@_); });
DefPrimitive('\xdef SkipSpaces Token UntilBrace {}', sub { do_def(1,1,@_); });

# <prefix> = \global | \long | \outer
# See Stomach.pm & Stomach.pm
DefPrimitive('\global',sub { $STATE->setPrefix('global'); return; }, isPrefix=>1);
DefPrimitive('\long',  sub { $STATE->setPrefix('long');   return; }, isPrefix=>1);
DefPrimitive('\outer', sub { $STATE->setPrefix('outer');  return; }, isPrefix=>1);

#======================================================================
# Non-Macro assignments; TeXBook Ch.24, pp 276--277
# <non-macro assignment> = <simple assignment> | \global <non-macro assignment>

# <filler> = <optional spaces> | <filler>\relax<optional spaces>
# <general text> = <filler>{<balanced text><right brace>

# <simple assignment> = <variable assignment> | <arithmetic>
#    | <code assignment> | <let assignment> | <shorthand definition>
#    | <fontdef token> | <family assignment> | <shape assignment>
#    | \read <number> to <optional spaces><control sequence>
#    | \setbox<8bit><equals><filler><box>
#    | \font <control sequence><equals><file name><at clause>
#    | <global assignment>
# <variable assignment> = <integer variable><equals><number>
#    | <dimen variable><equals><dimen>
#    | <glue variable><equals><dimen>
#    | <muglue variable><equals><muglue>
#    | <token variable><equals><general text>
#    | <token variable><equals><token variable>
# <at clause> = at <dimen> | scaled <number> | <optional spaces>
# <code assignment> = <codename><8bit><equals><number>

DefRegister('\count Number' => Number(0));
DefRegister('\dimen Number' => Dimension(0));
DefRegister('\skip Number'  => Glue(0));
DefRegister('\muskip Number'=> MuGlue(0));
DefRegister('\toks Number'  => Tokens());

# <integer variable> = <integer parameter> | <countdef token> | \count<8bit>
# <dimen var> = <dimen parameter> | <dimendef token> | \dimen<8bit>
# <glue variable> = <glue parameter> | <skipdef token> | \skip<8bit>
# <muglue variable> = <muglue parameter> | <muskipdef token> | \muskip<8bit>

# <arithmetic> = \advance <integer variable><optional by><number>
#    | \advance <dimen variable><optional by><dimen>
#    | \advance <glue variable><optional by><glue>
#    | \advance <muglue variable><optional by><muglue>
#    | \multiply <numeric variable><optional by><number>
#    | \divide <numeric variable><optional by><number>

sub ReadVariable {
  my $token = ReadXToken;
  my $defn = $token && LookupDefinition($token);
  ((defined $defn) && $defn->isRegister && !$defn->isReadonly
   ? [$defn,$defn->readArguments] : undef); }

DefPrimitive('\advance Variable SkipKeyword:by',sub {
  my($ignore,$var)=@_;
  my($defn,@args)=@$var;
  $defn->setValue($defn->valueOf(@args)->add($GULLET->readValue($defn->isRegister)),@args); });

DefPrimitive('\multiply Variable SkipKeyword:by Number',sub {
  my($ignore,$var,$scale)=@_;
  my($defn,@args)=@$var;
  $defn->setValue($defn->valueOf(@args)->multiply($scale->valueOf),@args); });

DefPrimitive('\divide Variable SkipKeyword:by Number',sub {
  my($ignore,$var,$scale)=@_;
  my($defn,@args)=@$var;
  $defn->setValue($defn->valueOf(@args)->multiply(1/$scale->valueOf),@args); });

# <let assignment> = \futurelet <control sequence><token><token> 
#   | \let<control sequence><equals><one optional space><token>
DefPrimitive('\let Token SkipMatch:= Token', sub {
  my($self,$token1,$token2)=@_;
  Let($token1, $token2);
  return;  });

DefExpandable('\futurelet Token Token Token',sub{
  my($self,$cs,$token1,$token2)=@_;
  Let($cs, $token2);
  ($token1,$token2); });

# <shorthand definition> = \chardef<control sequence><equals><8bit>
#    | \mathchardef <control sequence><equals><15bit>
#    | <registerdef><control sequence><equals><8bit>
# <registerdef> = \countdef | \dimendef | \skipdef | \muskipdef | toksdef

# Almost like a register, but different...
DefPrimitive('\chardef Token SkipMatch:= Number', sub {
  my($self,$newcs,$value)=@_;
  InstallDefinition(LaTeXML::CharDef->new($newcs,$value));
  return; });

# \mathchardef ?

DefPrimitive('\countdef Token SkipMatch:= Number',sub {
  my($self,$cs,$num)=@_;
  my $count = '\count'.$num->valueOf;
  DefRegister($cs->getString, Number(0),
	       getter=>sub { LookupValue($count); },
	       setter=>sub { AssignValue($count=>$_[0]); }); });

DefPrimitive('\dimendef Token SkipMatch:= Number',sub {
  my($self,$cs,$num)=@_;
  my $dimen = '\dimen'.$num->valueOf;
  DefRegister($cs->getString, Dimension(0),
	       getter=>sub { LookupValue($dimen); },
	       setter=>sub { AssignValue($dimen=>$_[0]); }); });

DefPrimitive('\skipdef Token SkipMatch:= Number',sub {
  my($self,$cs,$num)=@_;
  my $glue = '\skip'.$num->valueOf;
  DefRegister($cs->getString, Glue(0),
	       getter=>sub { LookupValue($glue); },
	       setter=>sub { AssignValue($glue=>$_[0]); }); });

DefPrimitive('\muskipdef Token SkipMatch:= Number',sub {
  my($self,$cs,$num)=@_;
  my $muglue = '\muskip'.$num->valueOf;
  DefRegister($cs->getString, MuGlue(0),
	       getter=>sub { LookupValue($muglue); },
	       setter=>sub { AssignValue($muglue=>$_[0]); }); });

DefPrimitive('\toksdef Token SkipMatch:= Number',sub {
  my($self,$cs,$num)=@_;
  my $toks = '\toks'.$num->valueOf;
  DefRegister($cs->getString, Tokens(),
	       getter=>sub { LookupValue($toks); },
	       setter=>sub { AssignValue($toks=>$_[0]); }); });


# NOTE: Get all these handled as registers
# <internal integer> = <integer parameter> | <special integer> | \lastpenalty
#   | <countdef token> | \count<8bit> | <codename><8bit>
#   | <chardef token> | <mathchardef token> | \parshape | \inputlineno
#   | \hyphenchar<font> | \skewchar<font> | \badness

# <codename> = \catcode | \mathcode | \lccode | \uccode | \sfcode | \delcode

DefRegister('\catcode Number',Number(0),
	     getter=>sub { my $cc = LookupCatcode(chr($_[0]->valueOf));
			   $cc = CC_OTHER unless defined $cc;
			   Number($cc); },
	     setter=>sub { AssignCatcode(chr($_[1]->valueOf) => $_[0]->valueOf); });
# \mathcode
# \lccode
# \uccode
# \sfcode
# \delcode
DefRegister('\hyphenchar{}',Number(ord('-')));
# \parshape !?!??
#DefRegister('\inputlineno',Number(0),
#            readonly=>1,
#	     getter=>{ Number($GULLET->getMouth????? ->lineno); });
# \skewchar

DefMacro('\hyphenation{}',''); # Well, what ?


# <font> = <fontdef token> | \font | <family member>
# <family member> | <font range><4bit>
# <font range> = \textfont | \scriptfont | \scriptscriptfont

# <internal dimen> = <dimen parameter> | <special dimen> | \lastkern
#    | <dimendef token> | \dimen<8bit> | <box dimension><8bit> | \fontdimen<number><font>
# <box dimension> = \ht | \wd | \dp

# Need some clever getter & setters!
DefRegister('\ht Number',Dimension(0));
DefRegister('\wd Number',Dimension(0));
DefRegister('\dp Number',Dimension(0));

#   Could be handled by setting dimensions whenever the box itself is set?

# <internal glue> = <glue parameter> | \lastskip | <skipdef token> | \skip<8bit>

# <internal muglue> = <muglue parameter> | \lastskip | <muskipdef token> | \muskip<8bit>

# <family assignment> = <family member><equals><font>
# <shape assignment> = \parshape<equals><number><shape dimensions>
#  <shape dimensions> is 2n <dimen>

# <global assignment> = <font assignment> | <hyphenation assignment>
#   | <box size assignment> | <interaction mode assignment>
#   | <intimate assignment>
# <font assignment> = \fontdimen <number><font><equals><dimen>
#   | \hyphenchar<font><equals><number> | \skewchar<font><equals><number>
# <hyphenation assignment> = \hyphenation<general text>
#   | \patterns<general text>
# <box size assignment> = <box dimension><8bit><equals><dimen>
# <interaction mode assignment> = \errorstopmode | \scrollmode | \nonstopmode | \batchmode
# <intimate assignment> = <special integer><equals><number>
#   | <special dimension><equals><dimen>

DefPrimitive('\char Number', sub { InvokeToken(T_OTHER(chr($_[1]->valueOf))); });
# <box> = \box <8bit> | \copy <8bit> | \lastbox | \vsplit <8bit> to <dimen>
#   | \hbox <box specification>{<horizontal mode material>}
#   | \vbox <box specification>{<vertical mode material>}
#   | \vtop <box specification>{<vertical mode material>}
# <box specification> = to <dimen><filler> | spread <dimen><filler> | <filler>

# \setbox<number>=\hbox to <dimen>{<horizontal mode material>}

DefPrimitive('\setbox Number SkipMatch:=', sub { 
  my @stuff = InvokeToken(ReadXToken);
  AssignValue('box'.$_[1]->valueOf => shift(@stuff));
  @stuff;});
# Is this the same ??
DefPrimitive('\sbox Number SkipMatch:= {}', sub { 
  my @stuff = InvokeToken(ReadXToken);
  AssignValue('box'.$_[1]->valueOf => shift(@stuff));
  @stuff;});

DefPrimitive('\box Number', sub { LookupValue('box'.$_[1]->valueOf); });

# Read to Dimension and return the dimension as string,
#  Or spread Dimension and return +dimension as string.
sub read_box_spec {
  my($whatsit)=@_;
  if(my $key = ReadKeyword('to','spread')){
    $whatsit->setProperty($key=>ReadDimension); }}

# Read a box's material, 
sub read_box_contents {
  my($whatsit)=@_;
  ReadUntil(T_BEGIN);
  BGroup;
  $whatsit->setBody($STOMACH->digestNextBody,LaTeXML::Box->new("}",undef,undef,T_END)); }

sub revert_spec {
  my($whatsit,$keyword)=@_;
  my $value = $whatsit->getProperty($keyword);
  ($value ? (Explode($keyword),$value->revert): ()); }

DefConstructor('\hbox', "<text width='#to' pad-width='#spread'>#body</text>",
	       afterDigest=>sub { read_box_spec($_[0]); read_box_contents($_[0]); },
	       mode=>'text',
	       reversion=>sub { (T_CS('\hbox'),revert_spec($_[0],'to'),revert_spec($_[0],'spread'),
				 T_BEGIN,$_[0]->getProperty('body')->revert); }); # body has }

DefConstructor('\vbox', "<vbox valign='bottom' height='#to' pad-height='#spread'>#body</vbox>",
	       afterDigest=>sub { read_box_spec($_[0]); read_box_contents($_[0]); },
	       mode=>'text',
	       reversion=>sub { (T_CS('\vbox'),revert_spec($_[0],'to'),revert_spec($_[0],'spread'),
				 T_BEGIN,$_[0]->getProperty('body')->revert); }); # body has }

DefConstructor('\vtop', "<vbox valign='top' height='#to' pad-height='#spread'>#body</vbox>",
	       afterDigest=>sub { read_box_spec($_[0]); read_box_contents($_[0]); },
	       mode=>'text',
	       reversion=>sub { (T_CS('\vtop'),revert_spec($_[0],'to'),revert_spec($_[0],'spread'),
				 T_BEGIN,$_[0]->getProperty('body')->revert); }); # body has }

# \lower <dimen> <box>
# \raise <dimen> <box>
# But <box> apparently must really explicitly be an \hbox, \vbox or \vtop (?)
# OR something that expands into one!!

sub read_raised_box {
  my($cs,$sign)=@_;
  SkipSpaces;
  my $dim = ReadDimension();
  my ($box,@stuff) = InvokeToken(ReadXToken);
  Fatal("A <box> was supposed to be here.".Stringify($box))
    unless $box && $box->isa('LaTeXML::Whatsit')
      && ($box->getDefinition->getCSName =~ /^(\\hbox|\\vbox||\\vtop)$/);
  unshift(@stuff, LaTeXML::Whatsit->new(LookupDefinition(T_CS($cs)),[$dim->multiply($sign),$box]));
  @stuff; }


DefPrimitive('\lower', sub{ read_raised_box('\@raise',-1); });
DefPrimitive('\raise', sub{ read_raised_box('\@raise',+1); });
DefConstructor('\@raise Dimension Token', "<text raise='#1'>#2</text>", alias=>'\raise');

#======================================================================
# Remaining Mode independent primitives in Ch.24, pp.279-280
# \relax was done as expandable (isn't that right?)
# }
# Note, we don't bother making sure begingroup is ended by endgroup.

# These define the handler for { } (or anything of catcode BEGIN, END)

# These are actually TeX primitives, but we treat them as a Whatsit so they
# remain in the constructed tree.
DefConstructor('{','#body', beforeDigest=>\&BGroup, captureBody=>1);
DefConstructor('}',  '',    beforeDigest=>\&EGroup);

DefPrimitive('\begingroup',\&BeginGroup);
DefPrimitive('\endgroup',  \&EndGroup);

# \show, \showbox<8bit>, \showlists, \showthe<internal quantity>
# \shipout<box>
DefPrimitive('\ignorespaces SkipSpaces',undef);
# \afterassignment<token>
# \aftergroup<token>
# \uppercase<general text>, \lowercase<general text>
# \message<general text>
DefPrimitive('\message{}',sub {
  my($self,$stuff)=@_;
  print STDERR ToString(Expand($stuff));
  return; });

# \openin<4bit>, \closein<4bit>
# \immediate\openout<4bit><equals><filename>
# \immediate\closeout<4bit>
# \immediate\write<number><general text>

DefPrimitive('\aftergroup Token', sub { PushValue(afterGroup=>$_[1]); });

#======================================================================
# Remaining semi- Vertical Mode primitives in Ch.24, pp.280--281
# \openout<4bit><equals><filename>
# \special<general text>
# \penalty<number>
# \kern<dimen>, \mkern<mudimen>
# \unpenalty, \unkern, \unskip
# \mark{general text}
# \insert<8bit><filler>{<vertical mode material>}
# \vadjust<filler>{<vertical mode material>}
DefPrimitive('\mark{}',undef);
DefPrimitive('\penalty Number',undef);
DefPrimitive('\kern Dimension',undef);
DefPrimitive('\mkern MuGlue',undef);
DefPrimitive('\unpenalty',undef);

#======================================================================
# Remaining Vertical Mode primitives in Ch.24, pp.281--283
# \vskip<glue>, \vfil, \vfill, \vss, \vfilneg
# <leaders> = \leaders | \cleaders | \xleaders
# <box or rule> = <box> | <vertical rule> | <horizontal rule>
# <vertical rule> = \vrule<rule specification>
# <horizontal rule> = \hrule<rule specification>
# <rule specification> = <optional spaces> | <rule dimension><rule specification>
# <rule dimension> = width <dimen> | height <dimen> | depth <dimen>

# Stuff to ignore for now...
foreach my $op ('\vskip Glue', '\vfil', '\vfill', '\vss', '\vfilneg',
		'\leaders', '\cleaders', '\xleaders'){
  DefPrimitive($op,undef); }

# \moveleft<dimen><box>, \moveright<dimen><box>
# \unvbox<8bit>, \unvcopy<8bit>
# \halign<box specification>{<alignment material>}
DefConstructor('\noindent', "");
DefConstructor('\indent', "");

# Remember; \par closes, not opens, paragraphs!
DefConstructor('\par', sub { $_[0]->maybeCloseElement('p') && $_[0]->maybeCloseElement('para'); }, 
	       alias=>"\\par\n");
Tag('para', autoClose=>1, autoOpen=>1);
Tag('p', autoClose=>1, autoOpen=>1);

# {

# The following cause tex to start a new paragraph -- they switch to horizontal mode.
# <horizontal command> = <letter> | <other> | \char | <chardef token>
#    | \noboundary | \unhbox | \unhcopy | \valign | \vrule 
#    | \hskip | \hfil | \hfill | \hss | \hfilneg 
#    | \accent | \discretionary | \- | \<space> | $

DefPrimitive('\hskip Glue',undef);

DefConstructor('\hfil',"?#isMath(<XMHint name='hfil'/>)( )");
DefConstructor('\hfill',"?#isMath(<XMHint name='hfill'/>)( )");
# \end
# \dump

DefConstructor('\vspace{}',"");
DefPrimitive('\leavevmode',undef);

# Well, what else?
DefMacro('\newpage','');

#======================================================================
# Math mode stuff
# See TeXBook Ch.26
#======================================================================
# Decide whether we're going into or out of math, inline or display.

DefPrimitive('$', sub {
  my $mode = LookupValue('MODE');
  my $op = '\@@BEGININLINEMATH';
  if($mode eq 'display_math'){
    if(IfNext(T_MATH)){ ReadToken; }
    else { Fatal("Missing \$"); }
    $op = '\@@ENDDISPLAYMATH'; }
  elsif($mode eq 'inline_math'){
    $op = '\@@ENDINLINEMATH'; }
  elsif(IfNext(T_MATH)){
    ReadToken;
    $op = '\@@BEGINDISPLAYMATH'; }
  InvokeToken(T_CS($op)); });


# Effectively these are the math hooks, redefine these to do what you want with math?
DefConstructor('\@@BEGINDISPLAYMATH',
	       "<equation><Math mode='display'><XMath>#body</XMath></Math></equation>",
	       alias=>'$$',
	       beforeDigest=> sub{ BeginMode('display_math'); },
	       captureBody=>1);
DefConstructor('\@@ENDDISPLAYMATH'  , "", alias=>'$$',
	       beforeDigest=> sub{ EndMode('display_math'); });

DefConstructor('\@@BEGININLINEMATH', 
	       "<Math mode='inline'><XMath>#body</XMath></Math>", alias=>'$',
	       beforeDigest=> sub{ BeginMode('inline_math'); },
	      captureBody=>1);
DefConstructor('\@@ENDINLINEMATH'   ,"", alias=>'$',
	       beforeDigest=> sub{ EndMode('inline_math');});

# Add the TeX code from the object that created this node,
# unless it has already been recorded on another node.
# NOTE: This one isn't used anymore (?)
sub add_TeX {
  my($node,$thing)=@_;
  if($thing && (ref $thing eq 'LaTeXML::Whatsit') && !$thing->getProperty('_added_tex')){
    local $LaTeXML::DUAL_BRANCH = 'presentation';
    my $tex = UnTeX($thing);
    $LaTeXML::DUAL_BRANCH = 'content';
    my $ctex = UnTeX($thing);
    $node->setAttribute('tex',$tex);
    $node->setAttribute('content-tex',$ctex) if $ctex ne $tex;
    $thing->setProperty('_added_tex',1); }}

sub cleanup_TeX {
  my($node)=@_;
  my($x,$y);
  if((defined ($x=$node->getAttribute('tex'))) && (defined ($y = $node->textContent)) && ($y eq $x)){
    $node->removeAttribute('tex'); }}
  
# Same as add_TeX, but add the code from the body of the object.
sub add_body_TeX {
  my($node,$thing)=@_;
  if($thing && !$thing->getProperty('_added_body_tex')){
    if(defined(my $body = $thing->getProperty('body'))){
      local $LaTeXML::DUAL_BRANCH = 'presentation';
      my $tex = UnTeX($body);
      $LaTeXML::DUAL_BRANCH = 'content';
      my $ctex = UnTeX($body);
      $node->setAttribute('tex',$tex);
      $node->setAttribute('content-tex',$ctex) if $ctex ne $tex;
    }
    $thing->setProperty('_added_body_tex',1); }}

Tag('Math',   afterOpen=>\&add_body_TeX);
Tag('Math',  afterClose=>\&cleanup_Math);
#Tag('XMTok',  afterClose=>\&cleanup_TeX);
###Tag('XMWrap', afterClose=>\&collapse_XMWrap);

sub cleanup_XMath {
  my($xnode)=@_;
  # If the XMath contains only non-math nodes, it apparently isn't math at all (?)
  # pull them up & toss the XMath and Math wrapper.
  if(!grep($_->nodeName =~ /^XMApp|XMArg|XMTok|XMDual|XMHint|XMWrap/, $xnode->childNodes)){
    replace_node($xnode->getParentNode, $xnode->childNodes); }}

sub cleanup_Math {
  my($mathnode)=@_;
  # If the Math contains only XMath that only contain non-math, it apparently isn't math at all!?!
  # pull them up & toss the XMath and Math wrapper.
  my $hasmath=0;
  foreach my $xnode ($mathnode->childNodes){
    if($xnode->nodeName eq 'XMath'){
      if(!grep($_->nodeName =~ /^XMApp|XMArg|XMTok|XMDual|XMHint|XMWrap/, $xnode->childNodes)){
	replace_node($xnode, $xnode->childNodes); } # Pull these out.
      else {
	$hasmath=1; }}}
  if(!$hasmath){		# If all XMath's were pulled up, pull out the Math too.
    replace_node($mathnode, $mathnode->childNodes); }}

sub replace_node {
  my($oldnode,@newnodes)=@_;
  my $parent = $oldnode->parentNode;
  if(!@newnodes){
    $parent->removeChild($oldnode); }
  else {
    my $new = shift(@newnodes);
    $parent->replaceChild($new,$oldnode);
    foreach my $n (@newnodes){
      $parent->insertAfter($n,$new);
      $new = $n; }}}

# NOTE: possibly rewrite to only collapse nested XMWraps?
# If an XMWrap contains only a single node, replace it by the content,
# after copying the XMWrap's attributes
sub collapse_XMWrap {
  my($wrap)=@_;
  my($node,@rest) = $wrap->childNodes;
  if(!@rest){
    foreach my $attribute ($wrap->attributes){
      if($attribute->nodeType == XML_ATTRIBUTE_NODE){
	my $attr = $attribute->nodeName;
	$node->setAttribute($attr,$attribute->getValue) unless $attr =~ /^_/; }}
    $wrap->parentNode->replaceChild($node,$wrap); } }


#======================================================================
# Scripts are a bit of a strange beast, with respect to when the arguments
# are processed, and what kind of object should be created.
#
# While scripts look like they take a normal TeX argument, they really
# take the next BOX (AFTER expansion & digestion)!  Thus, while
#   a^\frac{b}{c} and a^\mathcal{B} 
# DO work in TeX, other things like
#   a^\sqrt{3} or a^\acute{b}
# DO NOT! (Hint: consider the expansions)
# Note that with
#  \def\xyz{xyz}
#   a^\xyz   =>  a^{x}yz
# So, we try to mimic, but note that our boxes don't correspond 100% to TeX's
#
# Normally, sub/super scripts should be turned into a sort of postfix operator:
# The parser will attach the script to the appropriate preceding object.
# However, there are a few special cases involving empty boxes {}.
# If the argument is an empty box $x^{}$, the whole script should just disappear.
# If the PRECEDING box is {} (in ${}^{p}$, a sort of `floating' script should be created.
# This may combine, in the parser, with the following object to generate
# a prescript.

our %scriptstylemap=(display=>'script', text=>'script', 
		     script=>'scriptscript', scriptscript=>'scriptscript');

sub scriptHandler {
  my($op)=@_;
  SkipSpaces;
  my $cs = '\@@POST'.$op;
  # Check if preceding box is empty {}
  if(defined(my $prev = $LaTeXML::LIST[$#LaTeXML::LIST])){
    if($prev->toString eq '{}'){
      pop(@LaTeXML::LIST);
      $cs = '\@@FLOATING'.$op; }}
  my $style = LookupValue('mathstyle'); # Bump the math style smaller.
  AssignValue(mathstyle=>$scriptstylemap{$style});
  # Now, get following boxes
  my @stuff = InvokeToken(ReadXToken);
  Fatal("Missing { in sub/super-script argument") unless @stuff;
  my $script = shift(@stuff);	# ONLY this box is the script!
  unshift(@stuff, LaTeXML::Whatsit->new(LookupDefinition(T_CS($cs)),[$script]))
    if $script->toString ne '{}';    # ONLY If Script is not empty!!!
  AssignValue(mathstyle=>$style); # revert
  @stuff; }

DefPrimitive('^', sub{ scriptHandler('SUPERSCRIPT'); });
DefPrimitive('_', sub{ scriptHandler('SUBSCRIPT'); });

DefConstructor('\@@POSTSUPERSCRIPT{}',
	       "<XMApp role='POSTSUPERSCRIPT'><XMArg rule='Superscript'>#1</XMArg></XMApp>",
	       alias=>'^');
DefConstructor('\@@POSTSUBSCRIPT{}',
	       "<XMApp role='POSTSUBSCRIPT'><XMArg rule='Subscript'>#1</XMArg></XMApp>",
	       alias=>'_');
DefConstructor('\@@FLOATINGSUPERSCRIPT{}',
	       "<XMApp role='FLOATINGSUPERSCRIPT'><XMArg rule='Superscript'>#1</XMArg></XMApp>",
	       alias=>'{}^');
DefConstructor('\@@FLOATINGSUBSCRIPT{}',
	       "<XMApp role='FLOATINGSUBSCRIPT'><XMArg rule='Subscript'>#1</XMArg></XMApp>",
	       alias=>'{}_');

DefConstructor('\@SUPERSCRIPT{}{}', 
	       "<XMApp><XMTok name='Superscript'/><XMArg>#1</XMArg><XMArg rule='Superscript'>#2</XMArg></XMApp>",
	       reversion=> sub {
		 my($whatsit,$num,$denom)=@_;
		 (T_BEGIN,$num->revert,T_END,T_SUPER,T_BEGIN,$denom->revert,T_END); });
DefConstructor('\@SUBSCRIPT{}{}', 
	       "<XMApp><XMTok name='Subscript'/><XMArg>#1</XMArg><XMArg rule='Subscript'>#2</XMArg></XMApp>",
	       reversion=>sub {
		 my($whatsit,$num,$denom)=@_;
		 (T_BEGIN,$num->revert,T_END,T_SUB,T_BEGIN,$denom->revert,T_END); });

# This only becomes active in math mode.
AssignCatcode('math:\''=>1, 'global');
DefMacro('\'',sub{
  my $n = 1;
  while(IfNext(T_OTHER('\''))){ ReadToken; $n++; };
  (T_SUPER,T_BEGIN,map(T_CS('\prime'), 1..$n),T_END); });

# These are \let in plain
Let('\sp',T_SUPER);
Let('\sb',T_SUB);

#======================================================================
# \choose & friends, also need special argument handling

# After digesting the \choose (or whatever), grab the previous and following material
# and store as args in the whatsit.
our %fracstylemap=(display=>'text', text=>'script',
		   script=>'scriptscript', scriptscript=>'scriptscript');
sub chooseArgHandler {
  my($whatsit)=@_;
  my $style = LookupValue('mathstyle');
  AssignValue(mathstyle=>$fracstylemap{$style}); # Bump the style smaller.
  # Unfortunately, the way we've done it, it's too late for the numerator!!!
  my @top = $STOMACH->regurgitate;
  my @bot = $STOMACH->digestNextBody;
  my $closing = pop(@bot);	# We'll leave whatever closed the list (endmath, endgroup...)
#  $whatsit->setArgs(LaTeXML::MathList->new(@top),LaTeXML::MathList->new(@bot));
  $whatsit->setProperty(top=>LaTeXML::MathList->new(@top));
  $whatsit->setProperty(bottom=>LaTeXML::MathList->new(@bot));
  AssignValue(mathstyle=>$style);
  $closing; }			# leave the closing bit

# WHY did I change to top/bottom instead of #1,#2 ????
# This will inhibit comparisons!!!!
# Is it because of the delims forms already having args???
# No, because constructor doesn't know there are 2 extra args!!
DefConstructor('\choose',
	       "<XMApp><XMTok name='binomial'/><XMArg>#top</XMArg><XMArg>#bottom</XMArg></XMApp>",
	       afterDigest=>\&chooseArgHandler,
	       reversion=>sub {
		 my($whatsit)=@_;
		 ($whatsit->getProperty('top')->revert,
		  T_CS('\choose'),
		  $whatsit->getProperty('bottom')->revert); });
DefConstructor('\over',
	       "<XMApp><XMTok name='/' style='over' role='MULOP'/><XMArg>#top</XMArg><XMArg>#bottom</XMArg></XMApp>",
	       afterDigest=>\&chooseArgHandler,
	       reversion=>sub {
		 my($whatsit)=@_;
		 ($whatsit->getProperty('top')->revert,
		  T_CS('\over'),
		  $whatsit->getProperty('bottom')->revert); });
DefConstructor('\atop',
	       "<XMApp><XMTok name='stacked'/><XMArg>#top</XMArg><XMArg>#bottom</XMArg></XMApp>",
	       afterDigest=>\&chooseArgHandler,
	       reversion=>sub {
		 my($whatsit)=@_;
		 ($whatsit->getProperty('top')->revert,
		  T_CS('\atop'),
		  $whatsit->getProperty('bottom')->revert); });
DefConstructor('\overwithdelims{}{}',
	       "<XMApp open='#1' close='#2'><XMTok name='/' style='over' role='MULOP'/>"
	       .  "<XMArg>#top</XMArg><XMArg>#bottom</XMArg></XMApp>",
	       afterDigest=>\&chooseArgHandler,
	       reversion=> sub {
		 my($whatsit,@args)=@_;
		 ($whatsit->getProperty('top')->revert,
		  $whatsit->getDefinition->invocation(@args),
		  $whatsit->getProperty('bottom')->revert); });
# But, wonder what the _meaning_ is!
DefConstructor('\atopwithdelims{}{}',
	       "<XMApp open='#1' close='#2'><XMTok name='stacked'/>"
	       .  "<XMArg>#top</XMArg><XMArg>#bottom</XMArg></XMApp>",
	       afterDigest=>\&chooseArgHandler,
	       reversion=>sub {
		 my($whatsit,@args)=@_;
		 ($whatsit->getProperty('top')->revert,
		  $whatsit->getDefinition->invocation(@args),
		  $whatsit->getProperty('bottom')->revert); });
DefConstructor('\abovewithdelims{}{}{}',
	       "<XMApp open='#1' close='#2'><XMTok name='/' style='over' thickness='#3'/>"
	       .  "<XMArg>#top</XMArg><XMArg>#bottom</XMArg></XMApp>",
	       afterDigest=>\&chooseArgHandler,
	       reversion=> sub {
		 my($whatsit,@args)=@_;
		 ($whatsit->getProperty('top')->revert,
		  $whatsit->getDefinition->invocation(@args),
		  $whatsit->getProperty('bottom')->revert); });

#======================================================================
# Old style font styles.
# The trick is to create an empty Whatsit preserved till assimilation (for reversion'ing)
# but to change the current font used in boxes.
Tag('text',autoOpen=>1,autoClose=>1);

DefConstructor('\rm', '',  beforeDigest=>sub{ MergeFont(family=>'serif'); });
DefConstructor('\sf', '',  beforeDigest=>sub{ MergeFont(family=>'sansserif'); });
DefConstructor('\bf',  '', beforeDigest=>sub{ MergeFont(series=>'bold'); });
DefConstructor('\it',  '', beforeDigest=>sub{ MergeFont(shape=>'italic'); });
DefConstructor('\tt',  '', beforeDigest=>sub{ MergeFont(family=>'typewriter'); });
DefConstructor('\sl',  '', beforeDigest=>sub{ MergeFont(shape=>'slanted'); });# No effect in math ?
DefConstructor('\sc',  '', beforeDigest=>sub{ MergeFont(shape=>'smallcaps'); });# No effect in math ?
DefConstructor('\tiny',          '', beforeDigest=>sub{ MergeFont(size=>'tiny'); });
DefConstructor('\scriptsize',    '', beforeDigest=>sub{ MergeFont(size=>'script'); });
DefConstructor('\footnotesize',  '', beforeDigest=>sub{ MergeFont(size=>'footnote'); });
DefConstructor('\small',         '', beforeDigest=>sub{ MergeFont(size=>'small'); });
DefConstructor('\normalsize',    '', beforeDigest=>sub{ MergeFont(size=>'normal'); });
DefConstructor('\large',         '', beforeDigest=>sub{ MergeFont(size=>'large'); });
DefConstructor('\Large',         '', beforeDigest=>sub{ MergeFont(size=>'Large'); });
DefConstructor('\LARGE',         '', beforeDigest=>sub{ MergeFont(size=>'LARGE'); });
DefConstructor('\huge',          '', beforeDigest=>sub{ MergeFont(size=>'huge'); });
DefConstructor('\Huge',          '', beforeDigest=>sub{ MergeFont(size=>'Huge'); });
DefConstructor('\cal', '', beforeDigest=>sub{ RequireMath; MergeFont(family=>'caligraphic'); });

DefConstructor('\@end@emph','</emph>');
DefConstructor('\em',"<emph>", 
#	       afterDigest=>sub { PushValue(afterGroup=>T_CS('\@end@emph')); });
	       afterDigest=>sub { PushValue(beforeAfterGroup=>T_CS('\@end@emph')); });

sub setMathBoldness {
  my($bold)=@_;
  ForbidMath;
  AssignValue(mathfont=>LookupValue('mathfont')->merge(forcebold=>$bold), 'local'); }

DefPrimitive('\boldmath',  sub { setMathBoldness(1); });
DefPrimitive('\unboldmath',sub { setMathBoldness(0); });


#======================================================================
# Alignments

# & gives an error except within the right context 
# (which should redefine it!)
DefConstructor('&',sub { Fatal("Stray \"&\""); });

#**********************************************************************
# Plain;  Extracted from Appendix B.
#**********************************************************************

#======================================================================
# TeX Book, Appendix B, p. 344
#======================================================================
# \dospecials ??

# Set up the mathcode table

#======================================================================
# Properties for plain characters.
# These are allowed in plain text, but need to act a bit special in math.
DefMath('=','=', role=>'RELOP');
DefMath('>','>', role=>'RELOP');
DefMath('<','<', role=>'RELOP');
DefMath('+','+', role=>'ADDOP');
DefMath('-','-', role=>'ADDOP');
DefMath('*','*', role=>'MULOP');
DefMath('/','/', role=>'MULOP', style=>'inline');
DefMath('!','!', role=>'POSTFIX');
DefMath(',',',', role=>'PUNCT');
DefMath('.','.', role=>'PUNCT');
DefMath(';',';', role=>'PUNCT');
DefMath('(','(', role=>'OPEN'); DefMath(')',')', role=>'CLOSE');
DefMath('[','[', role=>'OPEN'); DefMath(']',']', role=>'CLOSE');
DefMath('|','|', role=>'VERTBAR');

#======================================================================
# Combine letters, when the fonts are right. (sorta related to mathcode)

sub match_letter_tokens {
  my($document,$node)=@_;
  my $font = $document->getNodeFont($node);
  return 0 unless $font->isSticky;
  my $i=0;
  while($node	# (comment nodes??)
	&& ($node->nodeType == XML_ELEMENT_NODE) && ($node->localname eq 'XMTok')
	&& ($node->textContent =~ /^[a-zA-Z]$/)
	&& ($document->getNodeFont($node)->equals($font))){
    $i++; $node = $node->nextSibling; }
  (($i > 1) ? $i : 0); }

sub construct_multiletter_token {
  my($document,@nodes)=@_;
  $document->insertMathToken(join('',map($_->textContent,@nodes)), font=>$document->getNodeFont($nodes[0])); }

DefRewrite(xpath=>"descendant-or-self::ltxml:XMTok[contains('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',text())]",
	   match=>\&match_letter_tokens, replace=>\&construct_multiletter_token);
#======================================================================
# Combine digits in math.

foreach my $digit (qw(0 1 2 3 4 5 6 7 8 9)){
  DefMath($digit,$digit, role=>'NUMBER'); }

sub match_digit_tokens {
  my($document,$node)=@_;
  my $font = $node->getAttribute('_font');
  my $string = $node->textContent;
  my $prev = $node;
  my $i=1;
  while(my $n = $prev->nextSibling){
    $prev = $n;
    next if $n->nodeType == XML_COMMENT_NODE;
    my $tag = $n->localname;
    if($tag eq 'XMHint'){
      last unless ($n->getAttribute('name')||'') =~/^(negthinspace|thinspace|medspace|thickspace)$/; }
    elsif(($tag eq 'XMTok') && ($n->getAttribute('_font') eq $font)){
      my $s = $n->textContent;
      last unless $s =~ /^(\.|\d)$/;
      last unless ($string .= $s) =~ /^\d*\.?\d*$/; }
    else { last; }
    $i++;  }
  (($i > 1) && ($string =~ /\d/) ? $i : 0); }

our %space_chars = (negthinspace=>'', thinspace=>"\x{2009}", medspace=>"\x{2005}", thickspace=>"\x{2004}");
sub construct_number {
  my($document,@nodes)=@_;
  my $string = '';
  my $value = '';
  foreach my $node (@nodes){
    next if $node->nodeType == XML_COMMENT_NODE;
    if($node->localname eq 'XMTok'){
      my $s = $node->textContent;
      $string .= $s; $value .= $s; }
    else {
      $string .= $space_chars{$node->getAttribute('name')}; }}
  $document->insertMathToken($string, name=>$value, role=>'NUMBER', font=>$document->getNodeFont($nodes[0])); }

# Match initial digit or .
DefRewrite(xpath=>"descendant-or-self::ltxml:XMTok[(\@role='NUMBER' or \@role='PUNCT') and contains('.0123456789',text())]",
	  match=>\&match_digit_tokens, replace=>\&construct_number);

#======================================================================
# TeX Book, Appendix B, p. 345

RawTeX('
  \chardef\@one=1
  \chardef\tw@=2
  \chardef\thr@@=3
  \chardef\sixt@@n=16
  \chardef\@cclv=255
  \chardef\@cclvi=256
  \chardef\@m=1000
  \chardef\@M=10000
  \chardef\@MM=20000');

#======================================================================
# TeX Book, Appendix B, p. 346

RawTeX('
  \countdef\count@=255
  \toksdef\toks@=0
  \skipdef\skip@=0
  \dimendef\dimen@i=1
  \dimendef\dimen@ii=2');
# Various \count's are set; should we?

#======================================================================
# TeX Book, Appendix B, p. 347
# \wlog ??
# From plain.tex
DefPrimitive('\newcount  Token',sub { DefRegister($_[1]->toString=>Number(0));   return; });
DefPrimitive('\newdimen  Token',sub { DefRegister($_[1]->toString=>Dimension(0));return; });
DefPrimitive('\newskip   Token',sub { DefRegister($_[1]->toString=>Glue(0));     return; });
DefPrimitive('\newmuskip Token',sub { DefRegister($_[1]->toString=>MuGlue(0));   return; });
DefPrimitive('\newtoks   Token',sub { DefRegister($_[1]->toString=>Tokens(0));   return; });

# also \newbox, \newhelp, \newread, \newwrite, \newfam, \newlanguage
# \alloc@, \newinsert, \ch@ck

# TeX plain uses \newdimen, etc. for these.
# Is there any advantage to that?
DefRegister('\maxdimen',Dimension(16383.99999*65536));
DefRegister('\hideskip',Glue(-1000*65536,'1fill'));
DefRegister('\centering',Glue('0pt plus 1000pt minus 1000pt'));
DefRegister('\p@',Dimension(65536));
DefRegister('\z@',Dimension(0));
DefRegister('\z@skip',Glue(0,0,0));

# First approximation. till I figure out \newbox
#  \newbox\voidb@x
DefMacro('\voidb@x','');

#======================================================================
# TeX Book, Appendix B, p. 348

DefExpandable('\newif Token',sub {
  my($ignore,$cs)=@_;
  my $name = $cs->toString; $name =~ s/^\\if//;
  DefExpandable($cs->toString, sub { ifHandler(LookupValue('Boolean:'.$name)); }, isConditional=>1);
  DefPrimitive('\\'.$name.'true', sub { AssignValue('Boolean:'.$name => 1); });
  DefPrimitive('\\'.$name.'false', sub { AssignValue('Boolean:'.$name => 0); });  });

# See the section Registers & Parameters, above for setting default values.
#======================================================================
# TeX Book, Appendix B, p. 349
# See the section Registers & Parameters, above for setting default values.

# These are originally defined with \newskip, etc
DefRegister('\smallskipamount' => Glue('3pt plus1pt minus1pt'));
DefRegister('\medskipamount'   => Glue('6pt plus2pt minus2pt'));
DefRegister('\bigskipamount'   => Glue('12pt plus4pt minus4pt'));
DefRegister('\normalbaselineskip' => Glue('12pt'));
DefRegister('\normallineskip'  => Glue('1pt'));
DefRegister('\normallineskiplimit'=> Dimension('0pt'));
DefRegister('\jot'  => Dimension('3pt'));
DefRegister('\interdisplaylinepenalty' => Number(100));
DefRegister('\interfootnotelinepenalty' => Number(100));

DefMacro('\magstephalf','1095');
# \magstep ??

#======================================================================
# TeX Book, Appendix B, p. 350

# Font stuff ??????

#======================================================================
# TeX Book, Appendix B, p. 351

# More Font stuff ??????

DefPrimitive('\frenchspacing', undef);
DefPrimitive('\nonfrenchspacing',undef);
DefMacro('\normalbaselines',
	 '\lineskip=\normallineskip\baselineskip=\normalbaselineskip\lineskiplimit=\normallineskiplimit');
DefMacro('\space',Tokens(T_SPACE));
DefMacro("\\\@empty",Tokens());
DefMacro('\lq',"`");
DefMacro('\rq',"'");
Let('\empty',T_CS('\@empty'));
##DefMacro{'\null','\hbox{}');
Let('\bgroup',T_BEGIN);
Let('\egroup',T_END);

#======================================================================
# TeX Book, Appendix B, p. 352

DefPrimitive('\obeyspaces',undef);
DefPrimitive('\obeylines',undef);

RawTeX(' \def\loop#1\repeat{\def\body{#1}\iterate}
         \def\iterate{\body \let\next=\iterate \else\let\next=\relax\fi \next}
         \let\repeat=\fi ');

DefConstructor('\enskip',  "?#isMath(<XMHint name='enskip'/>)(\x{2000})"); # EN QUAD
DefConstructor('\enspace', "?#isMath(<XMHint name='enskip'/>)(\x{2000})"); # EN QUAD
DefConstructor('\quad', "?#isMath(<XMHint name='quad'/>)(\x{2001})"); # EM QUAD
DefConstructor('\qquad',"?#isMath(<XMHint name='qquad'/>)(\x{2001}\x{2001})"); # EM QUAD

DefConstructor('\thinspace',   "?#isMath(<XMHint name='thinspace'/>)( )");
DefConstructor('\negthinspace',"?#isMath(<XMHint name='negthinspace'/>)()");
DefConstructor('\thickspace',  "?#isMath(<XMHint name='thickspace'/>)( )");

DefConstructor('\hglue Glue', "?#isMath(<XMHint name='#1'/>)(\x{2001})"); # EM QUAD
DefPrimitive('\vglue Glue', undef);
DefPrimitive('\topglue', undef);
DefPrimitive('\nointerlineskip',undef);
DefPrimitive('\offinterlineskip',undef);

DefConstructor('\smallskip',"");
DefConstructor('\medskip',"");
DefConstructor('\bigskip',"");

#======================================================================
# TeX Book, Appendix B, p. 353

DefPrimitive('\break',undef);
DefPrimitive('\allowbreak',undef);
DefConstructor("~","?#isMath(<XMHint name='nobreakspace'/>)(\x{00A0})"); # NO-BREAK SPACE
DefMacro('\slash','/');

# \filbreak
# \goodbreak
DefPrimitive('\eject',undef);
DefPrimitive('\supereject',undef);
# \removelastskip
# \smallbreak
# \medbreak
# \bigbreak

# \line
# \leftline
DefConstructor('\centerline{}',"<centering>#1</centering>");
# \llap
# \underbar

# \strutbox
DefMacro('\strut','');

#======================================================================


# Mostly ignorable, although it could add an attribute to an ancestor
# to record the desired justification.
DefPrimitive('\raggedright',undef);

# Spacing stuff
DefConstructor('\@','');
# Math spacing.
DefConstructor('\,',"?#isMath(<XMHint name='thinspace'/>)(\x{2009})"); # THIN SPACE
DefConstructor('\:',"?#isMath(<XMHint name='medspace'/>)(\x{2005})");  # FOUR-PER-EM SPACE
DefConstructor('\;',"?#isMath(<XMHint name='thickspace'/>)(\x{2004})"); # THREE-PER-EM SPACE
DefConstructor('\!',"?#isMath(<XMHint name='negthinspace'/>)()");
DefConstructor('\ ',"?#isMath(<XMHint name='medspace'/>)(\x{2002})"); # EN SPACE
DefConstructor('\/',"?#isMath(<XMHint name='italiccorr'/>)()");


# Math style.
DefConstructor('\displaystyle','',afterDigest=>sub { AssignValue(mathstyle=>'display'); });
DefConstructor('\textstyle',   '',afterDigest=>sub { AssignValue(mathstyle=>'text'); });
DefConstructor('\scriptstyle', '',afterDigest=>sub { AssignValue(mathstyle=>'script'); });
DefConstructor('\scriptscriptstyle','',afterDigest=>sub { AssignValue(mathstyle=>'scriptscript'); });

#**********************************************************************
# MATH representation
#**********************************************************************

#**********************************************************************
# Various Symbols;
# Mostly from the LaTeX Manual (presumably most apply to Plain?)
#**********************************************************************

#======================================================================
# Normal ASCII chars.
#======================================================================
# (Since they're not active, they're only evaluated in math mode)

#======================================================================
# Accents.  LaTeX Table 3.1, p.38
#======================================================================
# All of TeX's accents can (sorta) be handled by Unicode's combining accents
# (which follow the character to be accented).
# We'll let unicode normalization do the combination, if needed.
# Also, note that \t is intended to combine multiple chars, but it appears to
# work (via mozilla !?) best when the combining char is after the 1st char.
# Further, the accents \d and \b seem to center the under dot or bar under multiple
# chars --- how should this be handled in Unicode?

# Since people sometimes try to get fancy by using an empty argument,
# for each, I'm providing the combining code and an equivalent(?) spacing one.
our %accents
  = ('\`' => ["\x{0300}","\x{0060}"], # COMBINING GRAVE ACCENT & GRAVE ACCENT
     "\\'"=> ["\x{0301}","\x{00B4}"], # COMBINING ACUTE ACCENT & ACUTE ACCENT
     '\^' => ["\x{0302}","\x{005E}"], # COMBINING CIRCUMFLEX ACCENT & CIRCUMFLEX ACCENT
     '\"' => ["\x{0308}","\x{00A8}"], # COMBINING DIAERESIS & DIAERESIS
     '\~' => ["\x{0303}","~"],	      # COMBINING TILDE
     '\=' => ["\x{0304}","\x{00AF}"], # COMBINING MACRON & MACRON
     '\.' => ["\x{0307}","\x{00B7}"], # COMBINING DOT ABOVE & MIDDLE DOT (?)
     '\u' => ["\x{0306}","\x{02D8}"], # COMBINING BREVE & BREVE
     '\v' => ["\x{030C}","\x{02C7}"], # COMBINING CARON & CARON
     '\H' => ["\x{030B}","\x{02DD}"], # COMBINING DOUBLE ACUTE ACCENT & non-combining
     '\c' => ["\x{0327}","\x{00B8}"], # COMBINING CEDILLA & CEDILLA
     '\d' => ["\x{0323}","\x{00B7}"], # COMBINING DOT BELOW & MIDDLE DOT (?)
     '\b' => ["\x{0331}","\x{00AF}"], # COMBINING MACRON BELOW  & MACRON
     '\t' => ["\x{0361}","-"],	# COMBINING DOUBLE INVERTED BREVE & ???? What????
     # I doubt that latter covers multiple chars...?
     #		'\bar'=>"\x{0304}", # COMBINING MACRON or is this the longer overbar?
		);
foreach my $accent (keys %accents){
  DefConstructor($accent."{}", sub {
    my($document,$letter,$props)=@_;
    if(my @letters = map(($_ eq '\i ' ? 'i':$_),map(ToString($_),$letter->unlist))){
      # Put the accent AFTER the first char(?)
      $document->openText($letters[0].$accents{$accent}->[0].join('',@letters[1..$#letters]),
			   $letter->getFont);}
    else {			# Empty argument???
      $document->openText($accents{$accent}->[1],$$props{font}); }} ); }

#======================================================================
# LaTeX; Table 3.2. Non-English Symbols, p.39
#======================================================================

# The following shouldn't appear in math.
DefConstructor('\OE',"\x{0152}");	# LATIN CAPITAL LIGATURE OE
DefConstructor('\oe',"\x{0153}");	# LATIN SMALL LIGATURE OE
DefConstructor('\AE',"\x{00C6}");	# LATIN CAPITAL LETTER AE
DefConstructor('\ae',"\x{00E6}");	# LATIN SMALL LETTER AE
DefConstructor('\AA',"\x{00C5}");	# LATIN CAPITAL LETTER A WITH RING ABOVE
DefConstructor('\aa',"\x{00E5}");	# LATIN SMALL LETTER A WITH RING ABOVE
DefConstructor('\O', "\x{00D8}");	# LATIN CAPITAL LETTER O WITH STROKE
DefConstructor('\o', "\x{00F8}");	# LATIN SMALL LETTER O WITH STROKE
DefConstructor('\L', "\x{0141}");	# LATIN CAPITAL LETTER L WITH STROKE
DefConstructor('\l', "\x{0142}");	# LATIN SMALL LETTER L WITH STROKE
DefConstructor('\ss',"\x{00DF}");	# LATIN SMALL LETTER SHARP S

# apparently the rest can appear in math.
DefConstructor('\dag',   "\x{2020}");	# DAGGER
DefConstructor('\ddag',  "\x{2021}");	# DOUBLE DAGGER
DefConstructor('\S',     "\x{00A7}");	# SECTION SIGN
DefConstructor('\P',     "\x{00B6}");	# PILCROW SIGN
DefConstructor('\copyright',"\x{00A9}"); # COPYRIGHT SIGN
DefConstructor('\pounds',"\x{00A3}");	# POUND SIGN

# Special Characters.
DefConstructor('\#',   '#');
DefConstructor('\&',   '&');
#DefConstructor('\%',   '%');
DefMacro('\%',Tokens(T_OTHER('%')));
DefConstructor("\\\$", "\$");
DefConstructor('\_',   '_');

#======================================================================
# LaTeX; Table 3.3, Greek, p.41
#======================================================================

DefMath('\alpha',     "\x{03B1}"); # GREEK SMALL LETTER ALPHA
DefMath('\beta',      "\x{03B2}"); # GREEK SMALL LETTER BETA
DefMath('\gamma',     "\x{03B3}"); # GREEK SMALL LETTER GAMMA
DefMath('\delta',     "\x{03B4}"); # GREEK SMALL LETTER DELTA
DefMath('\epsilon'  , "\x{03F5}"); # GREEK LUNATE EPSILON SYMBOL
DefMath('\varepsilon',"\x{03B5}"); # GREEK SMALL LETTER EPSILON
DefMath('\zeta',      "\x{03B6}"); # GREEK SMALL LETTER ZETA
DefMath('\eta',       "\x{03B7}"); # GREEK SMALL LETTER ETA
DefMath('\theta',     "\x{03B8}"); # GREEK SMALL LETTER THETA
DefMath('\vartheta',  "\x{03D1}"); # GREEK THETA SYMBOL
DefMath('\iota',      "\x{03B9}"); # GREEK SMALL LETTER IOTA
DefMath('\kappa',     "\x{03BA}"); # GREEK SMALL LETTER KAPPA
DefMath('\lambda',    "\x{03BB}"); # GREEK SMALL LETTER LAMDA
DefMath('\mu',        "\x{03BC}"); # GREEK SMALL LETTER MU
DefMath('\nu',        "\x{03BD}"); # GREEK SMALL LETTER NU
DefMath('\xi',        "\x{03BE}"); # GREEK SMALL LETTER XI
DefMath('\pi',        "\x{03C0}"); # GREEK SMALL LETTER PI
DefMath('\varpi',     "\x{03D6}"); # GREEK PI SYMBOL
DefMath('\rho',       "\x{03C1}"); # GREEK SMALL LETTER RHO
DefMath('\varrho',    "\x{03F1}"); # GREEK RHO SYMBOL
DefMath('\sigma',     "\x{03C3}"); # GREEK SMALL LETTER SIGMA
DefMath('\varsigma',  "\x{03C2}"); # GREEK SMALL LETTER FINAL SIGMA
DefMath('\tau',       "\x{03C4}"); # GREEK SMALL LETTER TAU
DefMath('\upsilon',   "\x{03C5}"); # GREEK SMALL LETTER UPSILON
DefMath('\phi',       "\x{03D5}"); # GREEK PHI SYMBOL
DefMath('\varphi',    "\x{03C6}"); # GREEK SMALL LETTER PHI
DefMath('\chi',       "\x{03C7}"); # GREEK SMALL LETTER CHI
DefMath('\psi',       "\x{03C8}"); # GREEK SMALL LETTER PSI
DefMath('\omega',     "\x{03C9}"); # GREEK SMALL LETTER OMEGA
DefMath('\Gamma',     "\x{0393}"); # GREEK CAPITAL LETTER GAMMA
DefMath('\Delta',     "\x{0394}"); # GREEK CAPITAL LETTER DELTA
DefMath('\Theta',     "\x{0398}"); # GREEK CAPITAL LETTER THETA
DefMath('\Lambda',    "\x{039B}"); # GREEK CAPITAL LETTER LAMDA
DefMath('\Xi',        "\x{039E}"); # GREEK CAPITAL LETTER XI
DefMath('\Pi',        "\x{03A0}"); # GREEK CAPITAL LETTER PI
DefMath('\Sigma',     "\x{03A3}"); # GREEK CAPITAL LETTER SIGMA
DefMath('\Upsilon',   "\x{03A5}"); # GREEK CAPITAL LETTER UPSILON
DefMath('\Phi',       "\x{03A6}"); # GREEK CAPITAL LETTER PHI
DefMath('\Psi',       "\x{03A8}"); # GREEK CAPITAL LETTER PSI
DefMath('\Omega',     "\x{03A9}"); # GREEK CAPITAL LETTER OMEGA

#======================================================================
# LaTeX; Table 3.4. Binary Operation Symbols, p.42
#======================================================================

DefMath('\pm',        "\x{00B1}", role=>'ADDOP'); # PLUS-MINUS SIGN
DefMath('\mp',        "\x{2213}", role=>'ADDOP'); # MINUS-OR-PLUS SIGN
DefMath('\times',     "\x{00D7}", role=>'MULOP'); # MULTIPLICATION SIGN
DefMath('\div',       "\x{00F7}", role=>'MULOP'); # DIVISION SIGN
DefMath('\ast',       "\x{2217}", role=>'MULOP'); # ASTERISK OPERATOR
DefMath('\star',      "\x{22C6}", role=>'MULOP'); # STAR OPERATOR
DefMath('\circ',      "\x{2218}", role=>'MULOP'); # RING OPERATOR
DefMath('\bullet',    "\x{2219}", role=>'MULOP'); # BULLET OPERATOR
DefMath('\cdot',      "\x{22C5}", role=>'MULOP'); # DOT OPERATOR

# Need to classify set operations more carefully....
DefMath('\cap',       "\x{2229}", role=>'ADDOP'); # INTERSECTION
DefMath('\cup',       "\x{222A}", role=>'ADDOP'); # UNION
DefMath('\uplus',     "\x{228C}", role=>'ADDOP'); # MULTISET
DefMath('\sqcap',     "\x{2293}", role=>'ADDOP'); # SQUARE CAP
DefMath('\sqcup',     "\x{2294}", role=>'ADDOP'); # SQUARE CUP
DefMath('\vee',       "\x{2228}", role=>'ADDOP'); # LOGICAL OR
DefMath('\lor',       "\x{2228}", role=>'ADDOP'); # LOGICAL OR
DefMath('\wedge',     "\x{2227}", role=>'ADDOP'); # LOGICAL AND
DefMath('\land',      "\x{2227}", role=>'ADDOP'); # LOGICAL AND
DefMath('\setminus',  "\x{2216}", role=>'ADDOP'); # SET MINUS
DefMath('\wr',        "\x{2240}", role=>'MULOP'); # WREATH PRODUCT

# Should this block be ADDOP or something else?
DefMath('\diamond',        "\x{22C4}", role=>'ADDOP'); # DIAMOND OPERATOR
DefMath('\bigtriangleup',  "\x{25B3}", role=>'ADDOP'); # WHITE UP-POINTING TRIANGLE
DefMath('\bigtriangledown',"\x{25BD}", role=>'ADDOP'); # WHITE DOWN-POINTING TRIANGLE
DefMath('\triangleleft',   "\x{25C1}", role=>'ADDOP'); # WHITE LEFT-POINTING SMALL TRIANGLE
DefMath('\triangleright',  "\x{25B7}", role=>'ADDOP'); # WHITE RIGHT-POINTING SMALL TRIANGLE
DefMath('\lhd',            "\x{22B2}", role=>'ADDOP'); # NORMAL SUBGROUP OF
DefMath('\rhd',            "\x{22B3}", role=>'ADDOP'); # CONTAINS AS NORMAL SUBGROUP
DefMath('\unlhd',          "\x{22B4}", role=>'ADDOP'); # NORMAL SUBGROUP OF OR EQUAL TO
DefMath('\unrhd',          "\x{22B5}", role=>'ADDOP'); # CONTAINS AS NORMAL SUBGROUP OR EQUAL TO

DefMath('\oplus',     "\x{2295}", role=>'ADDOP'); # CIRCLED PLUS
DefMath('\ominus',    "\x{2296}", role=>'ADDOP'); # CIRCLED MINUS
DefMath('\otimes',    "\x{2297}", role=>'MULOP'); # CIRCLED TIMES
DefMath('\oslash',    "\x{2298}", role=>'MULOP'); # CIRCLED DIVISION SLASH
DefMath('\odot',      "\x{2299}", role=>'MULOP'); # CIRCLED DOT OPERATOR
DefMath('\bigcirc',   "\x{25CB}", role=>'MULOP'); # WHITE CIRCLE
DefMath('\dagger',    "\x{2020}", role=>'MULOP'); # DAGGER
DefMath('\ddagger',   "\x{2021}", role=>'MULOP'); # DOUBLE DAGGER
DefMath('\amalg',     "\x{2210}", role=>'MULOP'); # N-ARY COPRODUCT

DefMath('\dot',"\x{22C5}", role=>'MULOP');	# DOT OPERATOR
# Discretionary times; just treat as invisible ?
DefMath('\*',"\x{2062}", role=>'MULOP'); # INVISIBLE TIMES (or MULTIPLICATION SIGN = 00D7)

# And also

#DefMath('\ldots',"\x{2026}", role=>'ID'); # HORIZONTAL ELLIPSIS
# Ah, since \ldots can appear in text....
DefConstructor('\ldots',"?#isMath(<XMTok name='ldots' font='#font' role='ID'>\x{2026}</XMTok>)(\x{2026})",
	      properties=>{font=>sub{ LookupValue('font')->merge(family=>'serif');}} ); # Since not DefMath!
DefMath('\cdots',"\x{22EF}", role=>'ID'); # MIDLINE HORIZONTAL ELLIPSIS
DefMath('\vdots',"\x{22EE}", role=>'ID'); # VERTICAL ELLIPSIS
DefMath('\ddots',"\x{22F1}", role=>'ID'); # DOWN RIGHT DIAGONAL ELLIPSIS
DefMath('\colon',':');
# Note that amsmath redefines \dots to be `smart'.
# Aha, also can be in text...
DefConstructor('\dots',"?#isMath(<XMTok name='dots' font='#font' role='ID'>\x{2026}</XMTok>)(\x{2026})",
	      properties=>{font=>sub{ LookupValue('font')->merge(family=>'serif');}} ); # Since not DefMath!
# And while we're at it...

# Pretest for XMath to keep from interpreting math that the DOM may not allow!!
DefMathRewrite(xpath=>'descendant-or-self::ltxml:XMath',match=>'\cdot\cdot\cdot',replace=>'\cdots');
DefRewrite(match=>'...',replace=>'\ldots');
DefMathRewrite(xpath=>'descendant-or-self::ltxml:XMath',match=>'...',replace=>'\ldots');
#======================================================================
# LaTeX; Table 3.5. Relation Symbols, p.43
#======================================================================
DefMath('\le',        "\x{2264}", role=>'RELOP'); # LESS-THAN OR EQUAL TO
DefMath('\ge',        "\x{2265}", role=>'RELOP'); # GREATER-THAN OR EQUAL TO
DefMath('\ne',        "\x{2260}", role=>'RELOP'); # NOT EQUAL TO
 
DefMath('\leq',       "\x{2264}", role=>'RELOP'); # LESS-THAN OR EQUAL TO
DefMath('\prec',      "\x{227A}", role=>'RELOP'); # PRECEDES
DefMath('\preceq',    "\x{2AAF}", role=>'RELOP'); # PRECEDES ABOVE SINGLE-LINE EQUALS SIGN
DefMath('\ll',        "\x{226A}", role=>'RELOP'); # MUCH LESS-THAN
DefMath('\subset',    "\x{2282}", role=>'RELOP'); # SUBSET OF
DefMath('\subseteq',  "\x{2286}", role=>'RELOP'); # SUBSET OF OR EQUAL TO
DefMath('\sqsubset',  "\x{228F}", role=>'RELOP'); # SQUARE IMAGE OF (latexsym package only!!)
DefMath('\sqsubseteq',"\x{2291}", role=>'RELOP'); # SQUARE IMAGE OF OR EQUAL TO
DefMath('\in',        "\x{2208}", role=>'RELOP'); # ELEMENT OF
DefMath('\vdash',     "\x{22A3}", role=>'RELOP'); # LEFT TACK

DefMath('\geq',       "\x{2265}", role=>'RELOP'); # GREATER-THAN OR EQUAL TO
DefMath('\succ',      "\x{227B}", role=>'RELOP'); # SUCCEEDS
DefMath('\succeq',    "\x{2AB0}", role=>'RELOP'); # SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN
DefMath('\gg',        "\x{226B}", role=>'RELOP'); # MUCH GREATER-THAN
DefMath('\supset',    "\x{2283}", role=>'RELOP'); # SUPERSET OF
DefMath('\supseteq',  "\x{2287}", role=>'RELOP'); # SUPERSET OF OR EQUAL TO
DefMath('\sqsupset',  "\x{2290}", role=>'RELOP'); # SQUARE ORIGINAL OF (latexsym only!)
DefMath('\sqsupseteq',"\x{2292}", role=>'RELOP'); # SQUARE ORIGINAL OF OR EQUAL TO
DefMath('\ni',        "\x{220B}", role=>'RELOP'); # CONTAINS AS MEMBER
DefMath('\dashv',     "\x{22A2}", role=>'RELOP'); # RIGHT TACK

DefMath('\equiv',     "\x{2261}", role=>'RELOP'); # IDENTICAL TO
DefMath('\sim',       "\x{223C}", role=>'RELOP'); # TILDE OPERATOR
DefMath('\simeq',     "\x{2243}", role=>'RELOP'); # ASYMPTOTICALLY EQUAL TO
DefMath('\asymp',     "\x{224D}", role=>'RELOP'); # EQUIVALENT TO
DefMath('\approx',    "\x{2248}", role=>'RELOP'); # ALMOST EQUAL TO
DefMath('\cong',      "\x{2245}", role=>'RELOP'); # APPROXIMATELY EQUAL TO
DefMath('\neq',       "\x{2260}", role=>'RELOP'); # NOT EQUAL TO
DefMath('\doteq',     "\x{2250}", role=>'RELOP'); # APPROACHES THE LIMIT
DefMath('\notin',     "\x{2209}", role=>'RELOP'); # NOT AN ELEMENT OF

DefMath('\models',    "\x{22A7}", role=>'RELOP'); # MODELS
DefMath('\perp',      "\x{22A5}", role=>'RELOP'); # UP TACK
DefMath('\mid',       "\x{2223}", role=>'RELOP'); # DIVIDES
DefMath('\parallel',  "\x{2225}", role=>'VERTBAR'); # PARALLEL TO
DefMath('\bowtie',    "\x{22C8}", role=>'RELOP');   # BOWTIE
DefMath('\Join',      "\x{2A1D}", role=>'RELOP');   # JOIN
DefMath('\smile',     "\x{2323}", role=>'RELOP');   # SMILE
DefMath('\frown',     "\x{2322}", role=>'RELOP');   # FROWN
DefMath('\propto',    "\x{221D}", role=>'RELOP'); # PROPORTIONAL TO

DefMath('\not',"not", role=>'PREFIX');

#======================================================================
# Match negations of many operators

our %NOTS = ('='=>"\x{2260}", '<'=> "\x{226E}", '>'=>"\x{226F}",
	     "\x{2208}"=>"\x{2209}", #\in=>\notin
	     "\x{2264}"=>"\x{2270}", "\x{2265}"=>"\x{2271}", # Less eq, greater eq.
	     "\x{227A}"=>"\x{2280}", "\x{227B}"=>"\x{2281}", # prec, succ
	     "\x{2AAF}"=>"\x{22E0}", "\x{2AB0}"=>"\x{22E1}", # preceq, succeq
	     "\x{2282}"=>"\x{2284}", "\x{2283}"=>"\x{2285}", # subset, supset
	     "\x{2286}"=>"\x{2288}", "\x{2287}"=>"\x{2289}", # subseteq, supseteq
	     "\x{2291}"=>"\x{22E2}", "\x{2290}"=>"\x{22E3}", # sqsubseteq, sqsupseteq
	     "\x{2261}"=>"\x{2262}",			     # equiv
	     "\x{224D}"=>"\x{226D}", "\x{2248}"=>"\x{2249}", # asymp, approx
	     "\x{22B2}"=>"\x{22EA}", "\x{22B3}"=>"\x{22EB}", # lhd, rhd
	     "\x{22B4}"=>"\x{22EC}", "\x{22B5}"=>"\x{22ED}", # unlhd, unrhd
	     "\x{2203}"=>"\x{2204}",			     # Exists
	     );
DefMathRewrite(xpath=>'descendant-or-self::ltxml:XMath',match=>'\not',
	       match=>sub { my($document,$not)=@_;
			    if(my $op = $not->nextSibling){
			      (($op->nodeType == XML_ELEMENT_NODE)
			       && ($op->localname eq 'XMTok')
			       && ($NOTS{$op->textContent})
			       ? 2 : 0); }},
	       replace=>sub { my($document,$not,$op)=@_;
			      my $name = $op->getAttribute('name')||$op->textContent;
			      $document->insertMathToken($NOTS{$op->textContent},
							  role=>$op->getAttribute('role'),
							  ($name ? (name=>'not-'.$name):()),
							  font=>$document->getNodeFont($op)); });

#======================================================================
# LaTeX; Table 3.6. Arrow Symbols, p.43
#======================================================================
# (treat them as RELOP for now ???)

DefMath('\leftarrow',         "\x{2190}", role=>'ARROW'); # LEFTWARDS ARROW
DefMath('\Leftarrow',         "\x{21D0}", role=>'ARROW'); # LEFTWARDS DOUBLE ARROW
DefMath('\rightarrow',        "\x{2192}", role=>'ARROW'); # RIGHTWARDS ARROW
DefMath('\Rightarrow',        "\x{21D2}", role=>'ARROW'); # RIGHTWARDS DOUBLE ARROW
DefMath('\leftrightarrow',    "\x{2194}", role=>'METARELOP');	# LEFT RIGHT ARROW
DefMath('\Leftrightarrow',    "\x{21D4}", role=>'METARELOP'); # LEFT RIGHT DOUBLE ARROW
DefMath('\iff',               "\x{21D4}", role=>'METARELOP'); # LEFT RIGHT DOUBLE ARROW
DefMath('\mapsto',            "\x{21A6}", role=>'ARROW'); # RIGHTWARDS ARROW FROM BAR
DefMath('\hookleftarrow',     "\x{21A9}", role=>'ARROW'); # LEFTWARDS ARROW WITH HOOK
DefMath('\leftharpoonup',     "\x{21BC}", role=>'ARROW'); # LEFTWARDS HARPOON WITH BARB UPWARDS
DefMath('\leftharpoondown',   "\x{21BD}", role=>'ARROW'); # LEFTWARDS HARPOON WITH BARB DOWNWARDS
DefMath('\rightleftharpoons', "\x{21CC}", role=>'METARELOP');	# RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON

DefMath('\longleftarrow',     "\x{27F5}", role=>'ARROW'); # LONG LEFTWARDS ARROW
DefMath('\Longleftarrow',     "\x{27F8}", role=>'ARROW'); # LONG LEFTWARDS DOUBLE ARROW
DefMath('\longrightarrow',    "\x{27F6}", role=>'ARROW'); # LONG RIGHTWARDS ARROW
DefMath('\Longrightarrow',    "\x{27F9}", role=>'ARROW'); # LONG RIGHTWARDS DOUBLE ARROW
DefMath('\longleftrightarrow',"\x{27F7}", role=>'METARELOP');	# LONG LEFT RIGHT ARROW
DefMath('\Longleftrightarrow',"\x{27FA}", role=>'METARELOP'); # LONG LEFT RIGHT DOUBLE ARROW
DefMath('\longmapsto',        "\x{27FC}", role=>'ARROW'); # LONG RIGHTWARDS ARROW FROM BAR
DefMath('\hookrightarrow',    "\x{21AA}", role=>'ARROW'); # RIGHTWARDS ARROW WITH HOOK
DefMath('\rightharpoonup',    "\x{21C0}", role=>'ARROW'); # RIGHTWARDS HARPOON WITH BARB UPWARDS
DefMath('\rightharpoondown',  "\x{21C1}", role=>'ARROW'); # RIGHTWARDS HARPOON WITH BARB DOWNWARDS
DefMath('\leadsto',           "\x{219D}", role=>'ARROW'); # RIGHTWARDS WAVE ARROW

DefMath('\uparrow',           "\x{2191}", role=>'ARROW'); # UPWARDS ARROW
DefMath('\Uparrow',           "\x{21D1}", role=>'ARROW'); # UPWARDS DOUBLE ARROW
DefMath('\downarrow',         "\x{2193}", role=>'ARROW'); # DOWNWARDS ARROW
DefMath('\Downarrow',         "\x{21D3}", role=>'ARROW'); # DOWNWARDS DOUBLE ARROW
DefMath('\updownarrow',       "\x{2195}", role=>'ARROW'); # UP DOWN ARROW
DefMath('\Updownarrow',       "\x{21D5}", role=>'ARROW'); # UP DOWN DOUBLE ARROW
DefMath('\nearrow',           "\x{2197}", role=>'ARROW'); # NORTH EAST ARROW
DefMath('\searrow',           "\x{2198}", role=>'ARROW'); # SOUTH EAST ARROW
DefMath('\swarrow',           "\x{2199}", role=>'ARROW'); # SOUTH WEST ARROW
DefMath('\nwarrow',           "\x{2196}", role=>'ARROW'); # NORTH WEST ARROW

#======================================================================
# LaTeX; Table 3.7. Miscellaneous Symbols, p.43
#======================================================================
# Some should be differential operators, qualifiers, ...
DefMath('\aleph',    "\x{2135}");   # ALEF SYMBOL
DefMath('\hbar',     "\x{210F}", role=>'ID');	# PLANCK CONSTANT OVER TWO PI
DefMath('\imath',    "\x{0131}");   # LATIN SMALL LETTER DOTLESS I
DefMath('\jmath',    "j");	    # Unicode?
DefMath('\ell',      "\x{2113}");   # SCRIPT SMALL L
DefMath('\wp',       "\x{2118}", name=>'Weierstrassp'); # SCRIPT CAPITAL P
DefMath('\Re',       "\x{211C}", role=>'FUNCTION'); # BLACK LETTER CAPITAL R
DefMath('\Im',       "\x{2111}", role=>'FUNCTION'); # BLACK LETTER CAPITAL I
DefMath('\mho',      "\x{2127}");   # INVERTED OHM SIGN

DefMath('\prime',    "\x{2032}", role=>'SUPOP');    # PRIME
DefMath('\emptyset', "\x{2205}", role=>'ID');	    # EMPTY SET
DefMath('\nabla',    "\x{2207}", role=>'FUNCTION'); # NABLA
DefMath('\surd',     "\x{221A}", role=>'FUNCTION');  # SQUARE ROOT
DefMath('\top',      "\x{22A4}");		     # DOWN TACK
DefMath('\bot',      "\x{22A5}");		     # UP TACK
DefMath('\|',        "\x{2225}", role=>'VERTBAR'); # PARALLEL TO
DefMath('\angle',    "\x{2220}");		   # ANGLE

# NOTE: This is probably the wrong role.
# Also, should probably carry info about Binding for OpenMath
DefMath('\forall',   "\x{2200}", role=>'FUNCTION'); # FOR ALL
DefMath('\exists',   "\x{2203}", role=>'FUNCTION'); # THERE EXISTS
DefMath('\neg',      "\x{00AC}", role=>'FUNCTION'); # NOT SIGN
DefMath('\flat',     "\x{266D}"); # MUSIC FLAT SIGN
DefMath('\natural',  "\x{266E}"); # MUSIC NATURAL SIGN
DefMath('\sharp',    "\x{266F}"); # MUSIC SHARP SIGN
DefMath('\backslash',"\x{005C}", role=>'MULOP');    # REVERSE SOLIDUS
DefMath('\partial',  "\x{2202}", role=>'FUNCTION'); # PARTIAL DIFFERENTIAL

DefMath('\infty',    "\x{221E}", role=>'ID', name=>'Infinity'); # INFINITY
DefMath('\Box',      "\x{25A1}");  # WHITE SQUARE
DefMath('\Diamond',  "\x{25C6}");  # WHITE DIAMOND
DefMath('\triangle', "\x{25B2}");  # WHITE UP-POINTING TRIANGLE
DefMath('\clubsuit', "\x{2663}");  # BLACK CLUB SUIT
DefMath('\diamondsuit',"\x{2662}");	# WHITE DIAMOND SUIT
DefMath('\heartsuit',"\x{2661}");	# WHITE HEART SUIT
DefMath('\spadesuit',"\x{2660}");	# BLACK SPADE SUIT

#======================================================================
# LaTeX; Table 3.8. Variable-sized Symbols, p.44.
#======================================================================
# NOTE: Almost got this right!
#  These stackscripts=>'yes' should really set it to 'yes' IFF we
# are currently in displaystyle!
# IE. we need to evaluate the properties in the digestion context!!!!

sub doStackscripts { (LookupValue('mathstyle') eq 'display' ? 'yes' : undef); }

DefMath('\sum',      "\x{2211}", role=>'SUMOP', stackscripts=>\&doStackscripts); # N-ARY SUMMATION
DefMath('\prod',     "\x{220F}", role=>'SUMOP', stackscripts=>\&doStackscripts); # N-ARY PRODUCT
DefMath('\coprod',   "\x{2210}", role=>'SUMOP', stackscripts=>\&doStackscripts); # N-ARY COPRODUCT
DefMath('\int',      "\x{222B}", role=>'INTOP'); # INTEGRAL
DefMath('\oint',     "\x{222E}", role=>'INTOP'); # CONTOUR INTEGRAL
DefMath('\bigcap',   "\x{22C2}", role=>'SUMOP', stackscripts=>\&doStackscripts); # N-ARY INTERSECTION
DefMath('\bigcup',   "\x{22C3}", role=>'SUMOP', stackscripts=>\&doStackscripts); # N-ARY UNION
DefMath('\bigsqcup', "\x{2294}", role=>'SUMOP', stackscripts=>\&doStackscripts); # SQUARE CUP (N-ARY ???)
DefMath('\bigvee',   "\x{22C1}", role=>'SUMOP', stackscripts=>\&doStackscripts); # N-ARY LOGICAL OR
DefMath('\bigwedge', "\x{22C0}", role=>'SUMOP', stackscripts=>\&doStackscripts); # N-ARY LOGICAL AND
DefMath('\bigodot',  "\x{22A1}", role=>'SUMOP', stackscripts=>\&doStackscripts); # CIRCLED DOT OPERATOR (N-ARY ???)
DefMath('\bigotimes',"\x{2297}", role=>'SUMOP', stackscripts=>\&doStackscripts); # CIRCLED TIMES (N-ARY ?)
DefMath('\bigoplus', "\x{2295}", role=>'SUMOP', stackscripts=>\&doStackscripts); # CIRCLED PLUS (N-ARY ?)
DefMath('\biguplus', "\x{2296}", role=>'SUMOP', stackscripts=>\&doStackscripts); # CIRCLED MINUS (N-ARY ?)


DefMath('\smallint',"\x{222B}", name=>'Integral', role=>'INTOP', size=>'small', stackscripts=>\&doStackscripts); # INTEGRAL

DefConstructor('\limits',  sub { $_[0]->getNode->lastChild->setAttribute(stackscripts=>'yes'); });
DefConstructor('\nolimits',sub { $_[0]->getNode->lastChild->setAttribute(stackscripts=>'no'); });

#======================================================================
# LaTeX; Table 3.9. Log-like Functions, p.44.
#======================================================================
# NOTE: Classifying some as TRIGFUNCTION might clarify 'pi' ambiguities ?
DefMath('\arccos', "arccos", role=>'FUNCTION');
DefMath('\arcsin', "arcsin", role=>'FUNCTION');
DefMath('\arctan', "arctan", role=>'FUNCTION');
DefMath('\arg',    "arg", role=>'FUNCTION');

DefMath('\cos',    "cos",  role=>'FUNCTION');
DefMath('\cosh',   "cosh", role=>'FUNCTION');
DefMath('\cot',    "cot",  role=>'FUNCTION');
DefMath('\coth',   "coth", role=>'FUNCTION');

DefMath('\csc',    "csc", role=>'FUNCTION');
DefMath('\deg',    "deg", role=>'FUNCTION');
DefMath('\det',    "det", role=>'LIMITOP', stackscripts=>\&doStackscripts);
DefMath('\dim',    "dim", role=>'LIMITOP');

DefMath('\exp',    "exp", role=>'FUNCTION');
DefMath('\gcd',    "gcd", role=>'FUNCTION', stackscripts=>\&doStackscripts);
DefMath('\hom',    "hom", role=>'FUNCTION');
DefMath('\inf',    "inf", role=>'LIMITOP', stackscripts=>\&doStackscripts);

DefMath('\ker',    "ker", role=>'FUNCTION');
DefMath('\lg',     "lg",  role=>'FUNCTION');
DefMath('\lim',    "lim", role=>'LIMITOP', stackscripts=>\&doStackscripts);
DefMath('\liminf', "lim inf", role=>'LIMITOP', stackscripts=>\&doStackscripts);

DefMath('\limsup', "lim sup", role=>'LIMITOP', stackscripts=>\&doStackscripts);
DefMath('\ln',     "ln",  role=>'FUNCTION');
DefMath('\log',    "log", role=>'FUNCTION');
DefMath('\max',    "max", role=>'LIMITOP', stackscripts=>\&doStackscripts);

DefMath('\min',    "min", role=>'LIMITOP', stackscripts=>\&doStackscripts);
DefMath('\Pr',     "Pr",  role=>'FUNCTION', stackscripts=>\&doStackscripts);
DefMath('\sec',    "sec", role=>'FUNCTION');
DefMath('\sin',    "sin", role=>'FUNCTION');

DefMath('\sinh',   "sinh", role=>'FUNCTION');
DefMath('\sup',    "sup",  role=>'LIMITOP', stackscripts=>\&doStackscripts);
DefMath('\tan',    "tan",  role=>'FUNCTION');
DefMath('\tanh',   "tanh", role=>'FUNCTION');

#======================================================================
# LaTeX; Table 3.10. Delimiters, p.47
#======================================================================

DefMath('\{',        '{',        role=>'OPEN');
DefMath('\lbrace',   "{",        role=>'OPEN');
DefMath('\lbrack',   "[",        role=>'OPEN');
DefMath('\lfloor',   "\x{230A}", role=>'OPEN'); # LEFT FLOOR
DefMath('\lceil',    "\x{2308}", role=>'OPEN'); # LEFT CEILING
DefMath('\langle',   "\x{2329}", role=>'OPEN');   # LEFT-POINTING ANGLE BRACKET
DefMath('\}',        '}',        role=>'CLOSE');
DefMath('\rbrace',   "}",        role=>'CLOSE');
DefMath('\rbrack',   "]",        role=>'CLOSE');
DefMath('\rfloor',   "\x{230B}", role=>'CLOSE'); # RIGHT FLOOR
DefMath('\rceil',    "\x{2309}", role=>'CLOSE'); # RIGHT CEILING
DefMath('\rangle',   "\x{232A}", role=>'CLOSE');	# RIGHT-POINTING ANGLE BRACKET
# Note that a variety of other arrows are also defined as delimiters,
# as far as TeX is concerned (See p.146).
# However, it isn't clear that these should get roles of OPEN|CLOSE (?)
DefConstructor('\left Token ',"<XMWrap role='OPEN'>#1</XMWrap>");
DefConstructor('\right Token ',"<XMWrap role='CLOSE'>#1</XMWrap>");

# Defined in e-Tex and other places.
DefConstructor('\middle Token ',"<XMWrap role='MIDDLE' style='stretchy'>#1</XMWrap>");

DefConstructor('\bigl Token',"<XMWrap role='OPEN' style='big'>#1</XMWrap>");
DefConstructor('\bigm Token',"<XMWrap role='MIDDLE' style='big'>#1</XMWrap>");
DefConstructor('\bigr Token',"<XMWrap role='CLOSE' style='big'>#1</XMWrap>");
DefConstructor('\Bigl Token',"<XMWrap role='OPEN' style='Big'>#1</XMWrap>");
DefConstructor('\Bigm Token',"<XMWrap role='MIDDLE' style='Big'>#1</XMWrap>");
DefConstructor('\Bigr Token',"<XMWrap role='CLOSE' style='Big'>#1</XMWrap>");
DefConstructor('\biggl Token',"<XMWrap role='OPEN' style='bigg'>#1</XMWrap>");
DefConstructor('\biggm Token',"<XMWrap role='MIDDLE' style='bigg'>#1</XMWrap>");
DefConstructor('\biggr Token',"<XMWrap role='CLOSE' style='bigg'>#1</XMWrap>");
DefConstructor('\Biggl Token',"<XMWrap role='OPEN' style='Bigg'>#1</XMWrap>");
DefConstructor('\Biggm Token',"<XMWrap role='MIDDLE' style='Bigg'>#1</XMWrap>");
DefConstructor('\Biggr Token',"<XMWrap role='CLOSE' style='Bigg'>#1</XMWrap>");

# ?
DefConstructor('\big Token',"<XMWrap style='big'>#1</XMWrap>");
DefConstructor('\Big Token',"<XMWrap style='Big'>#1</XMWrap>");
DefConstructor('\bigg Token',"<XMWrap style='bigg'>#1</XMWrap>");
DefConstructor('\Bigg Token',"<XMWrap style='Bigg'>#1</XMWrap>");

DefMath('\vert','|', role=>'VERTBAR');
DefMath('\Vert',"\x{2225}", role=>'VERTBAR'); # PARALLEL TO

DefConstructor('\phantom{}',"?#isMath(<XMHint name='phantom'/>)()");
DefConstructor('\hphantom{}',"?#isMath(<XMHint name='hphantom'/>)()");
DefConstructor('\vphantom{}',"?#isMath(<XMHint name='vphantom'/>)()");
DefConstructor('\mathstrut{}',"?#isMath(<XMHint name='mathstrut'/>)()");
DefConstructor('\smash{}',"#1"); # well, what?

#======================================================================
# Math Accents.
#======================================================================
# LaTeX; Table 3.11. Math Mode Accents, p.50.
# Are these all TeX (or LaTeX)?

DefMath('\hat{}',       "\x{005E}", operator_role=>'OVERACCENT'); # CIRCUMFLEX ACCENT
DefMath('\check{}',     "\x{2713}", operator_role=>'OVERACCENT'); # CHECK MARK
DefMath('\breve{}',     "\x{02D8}", operator_role=>'OVERACCENT'); # BREVE
DefMath('\acute{}',     "\x{00B4}", operator_role=>'OVERACCENT'); # ACUTE ACCENT
DefMath('\grave{}',     "\x{0060}", operator_role=>'OVERACCENT'); # GRAVE ACCENT
DefMath('\tilde{}',     "\x{007E}", operator_role=>'OVERACCENT'); # TILDE
DefMath('\bar{}',       "\x{00AF}", operator_role=>'OVERACCENT'); # MACRON
DefMath('\vec{}',       "\x{2192}", operator_role=>'OVERACCENT'); # RIGHTWARDS ARROW
DefMath('\dot{}',       "\x{02D9}", operator_role=>'OVERACCENT'); # DOT ABOVE
DefMath('\ddot{}',      "\x{00A8}", operator_role=>'OVERACCENT'); # DIAERESIS
DefMath('\overline{}',  "\x{00AF}", operator_role=>'OVERACCENT'); # MACRON
DefMath('\overbrace{}', "\x{FE37}", operator_role=>'OVERACCENT',  # PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET
	stackscripts=>'yes');
DefMath('\widehat{}',   "\x{005E}", operator_role=>'OVERACCENT'); # CIRCUMFLEX ACCENT [plain? also amsfonts]
DefMath('\widetilde{}', "\x{007E}", operator_role=>'OVERACCENT');  # TILDE [plain? also amsfonts]
DefMath('\underbrace{}',"\x{FE38}", operator_role=>'UNDERACCENT', # PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET
	stackscripts=>'yes');

# NOTE that all the above accents REQUIRE math mode
# EXCEPTR underline, overrightarrow and overleftarrow!

DefMath('\math@underline{}', "\x{00AF}", operator_role=>'UNDERACCENT', 
	name=>'underline', alias=>'\underline');
DefConstructor('\text@underline{}', "<underline>#1</underline>");
DefMath('\math@overrightarrow{}', "\x{2192}", operator_role=>'OVERACCENT', 
	name=>'overrightarrow', alias=>'\overrightarrow');
DefMath('\math@overleftarrow{}', "\x{2190}", operator_role=>'OVERACCENT', 
	name=>'overleftarrow', alias=>'\overleftarrow');

DefMacro('\underline{}',      '\ifmmode\math@underline{#1}\else\text@underline{#1}\fi');
DefMacro('\overrightarrow{}', '\ifmmode\math@overrightarrow{#1}\else$\math@overrightarrow{#1}$\fi');
DefMacro('\overleftarrow{}',  '\ifmmode\math@overleftarrow{#1}\else$\math@overleftarrow{#1}$\fi');
#**********************************************************************
# Stray stuff .... where to ?
#**********************************************************************

# These 3 should have some `name' assigned ... but what???

# NOTE that \mathord and \mathbin aren't really right here.
# We need a finer granularity than TeX does: an ORD could be several things,
# a BIN could be a MULOP or ADDOP.
DefConstructor('\mathord{}',"<XMWrap role='ID'>#1</XMWrap>");
DefConstructor('\mathop{}', "<XMWrap role='FUNCTION'>#1</XMWrap>");
DefConstructor('\mathbin{}', "<XMWrap role='ADDOP'>#1</XMWrap>");
DefConstructor('\mathrel{}',"<XMWrap role='RELOP'>#1</XMWrap>");
DefConstructor('\mathopen{}', "<XMWrap role='OPEN'>#1</XMWrap>");
DefConstructor('\mathclose{}', "<XMWrap role='CLOSE'>#1</XMWrap>");
DefConstructor('\mathpunct{}', "<XMWrap role='PUNCT'>#1</XMWrap>");


DefMacro('\hiderel{}', "#1"); # Just ignore, for now...
# ???? this ain't latex...
# See amsmath's \genfrac
#DefConstructor('\stacked{}{}","<STACKED/>");

DefMath('\to',"\x{2192}", role=>'ARROW'); # RIGHTWARDS ARROW??? a bit more explicitly relation-like?


# TeX's ligatures handled by rewrite regexps.
DefRewrite(regexp=>"/---/\x{2014}/"); # EM DASH
DefRewrite(regexp=>"/--/\x{2013}/"); # EN DASH (NOTE: With digits before & aft => \N{FIGURE DASH})
DefRewrite(regexp=>"/\`\`/\x{201C}/");
DefRewrite(regexp=>"/\'\'/\x{201D}/");
DefConstructor('\TeX', 'TeX');
DefConstructor('\i',"\x{0131}");	# LATIN SMALL LETTER DOTLESS I
DefConstructor('\j',"j");	# Apparently, no Unicode equivalent...


DefConstructor('\>',"<XMHint name='\>'/>");	# ??

DefConstructor('\buildrel Until:\over {}',
	       "<XMApp role='RELOP'>"
	       .  "<XMTok name='Superscript'/>"
	       .  "<XMWrap stackscripts='yes'>#2</XMWrap>"
	       .  "<XMWrap>#1</XMWrap>"
	       ."</XMApp>");

#**********************************************************************
# LaTeX Hook
#**********************************************************************
# No, \documentclass isn't really a primitive -- It's not even TeX!
# But we define it here so it will automatically load whatever class definition,
# and indirectly (hopefully), the LaTeX Package.
our %ignorable_classoptions 
  = map(($_=>1),qw(10pt 11pt 12pt 
		   letterpaper legalpaper executivepaper a4paper a5paper b5paper
		   landscape final draft oneside twoside
		   openright openany onecolumn twocolumn 
		   notitlepage titlepage openbib leqno fleqn));

DefConstructor('\documentclass[]{}',"<?latexml class='#2' ?#1(options='#1')?>",
  afterDigest=>sub {
    my($whatsit,$options,$class)=@_;
    $class   = $class->toString;
    $options = $options->toString if defined $options;
    my @options = grep( !$ignorable_classoptions{$_},  split(/,\s*/, $options||''));
    AssignValue(inPreamble=>1);	# \begin{document} will clear this.
    Input('LaTeX',['ltxml']);
    Input($class,['ltxml','cls']);
    return;});

#**********************************************************************
# Support for Declarations & Presentation/Semantic Duality
#**********************************************************************
DefConstructor('\DUAL[]{}{}',
	       "<XMDual ?#1(role='#1')>#2<XMWrap>#3</XMWrap></XMDual>",
	       reversion=>sub {
		 my($whatsit)=@_;
		 my($role,$content,$presentation)=$whatsit->getArgs;
		 if($LaTeXML::DUAL_BRANCH eq 'content'){
		   $content->revert; }
		 elsif($LaTeXML::DUAL_BRANCH eq 'presentation'){
		   $presentation->revert; }
		 else {
		   $whatsit->getDefinition->invocation($role,$content,$presentation); }});

DefConstructor('\FCN{}',    "<XMWrap role='FUNCTION'>#1</XMWrap>", reversion=>'#1', alias=>'');
DefConstructor('\ROLE{}{}', "<XMWrap role='#1'>#2</XMWrap>",       reversion=>'#2', alias=>'');

# NOTE: work through this systematically!
DefConstructor('\@SYMBOL{}', "<XMWrap role='ID'>#1</XMWrap>", reversion=>'#1');
DefConstructor('\@APPLY{}',  "<XMApp>#1</XMApp>", reversion=>'#1');
DefConstructor('\@WRAP{}',   "<XMWrap>#1</XMWrap>", reversion=>'#1');
DefConstructor('\@TOKEN{}',   "<XMTok name='#1'/>", reversion=>'');
DefMath('\@APPLYFUNCTION', "\x{2061}", reversion=>'', name=>'', role=>'APPLYOP'); # APPLY FUNCTION
DefMath('\@INVISIBLETIMES',"\x{2062}", reversion=>'', name=>'', role=>'MULOP'); # INVISIBLE TIMES

# Would be nice to make the ID argument optional, but since these can appear in
# optional arguments to other macros, we'll end up nesting [] !!
DefConstructor('\@XMArg{}{}',"<XMArg ?#1(id='#1')>#2</XMArg>", reversion=>'#2',
	       properties=>{id=>'#1'});
DefConstructor('\@XMRef{}',"<XMRef idref='#1'/>",
	       reversion=>sub{ LookupValue('xref:'.$_[0]->getArg(1)->toString)->revert; });

DefConstructor('\@ERROR{}{}', "<ERROR type='#1'>#2</ERROR>");

#**********************************************************************
DefConstructor('\WildCard',"<_WildCard_/>");
DefConstructor('\WildCardA',"<_WildCard_/>");
DefConstructor('\WildCardB',"<_WildCard_/>");
DefConstructor('\WildCardC',"<_WildCard_/>");
#**********************************************************************
# After all other rewrites have acted, a little cleanup 

DefRewrite(xpath=>'descendant-or-self::ltxml:XMWrap[count(child::*)=1]',
	  replace=>sub { my($document,$wrap)=@_;
			 my $node = $wrap->firstChild;
			 foreach my $attribute ($wrap->attributes){
			   if($attribute->nodeType == XML_ATTRIBUTE_NODE){
			     my $attr = $attribute->nodeName;
			     $node->setAttribute($attr,$attribute->getValue) unless $attr =~ /^_/; }}
#			 $wrap->parentNode->replaceChild($node,$wrap); });
			 $document->getNode->appendChild($node); });
#**********************************************************************

1;
