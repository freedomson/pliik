# -*- CPERL -*-
# /=====================================================================\ #
# |  DLMF                                                               | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

#**********************************************************************
# Document
#**********************************************************************
DocType("chapter","-//NIST LaTeXML//LaTeXML DLMF Chapter",'DLMF.dtd',
       "http://dlmf.nist.gov/LaTeXML");

RequirePackage('graphicx');
RequirePackage('amsmath');
RequirePackage('amssymb');
RequirePackage('DLMFmath');
RequirePackage('url');
RequirePackage('comment');


# If we get this, we're doing a "chapter"
#DefPrimitive('\thischapter{}', sub {
#  my($self,$ch)=@_;
#  $ch=$ch->toString;
#  DefMacro('\thechapter',$ch); 
#  DefEnvironment('{document}',"<chapter refnum='#refnum' label='#label'>#body</chapter>",
#		 beforeDigest=> sub { AssignValue(inPreamble=>0); },
#		 afterDigest=>sub { $GULLET->flush; return; },
#		 properties=>{refnum=>$ch, label=>"ch:$ch"}); });

DefPrimitive('\thischapter{}', sub {
  my($self,$ch)=@_;
  $ch=$ch->toString;
  DefMacro('\thechapter',$ch); 
  AssignValue(Chapter=>$ch,'global');
  AssignValue(ChapterLabel=>"ch:$ch",'global');  });

DefEnvironment('{document}',
	       "?&LookupValue(Chapter)"
	       ."(<chapter refnum='&LookupValue(Chapter)' label='&LookupValue(ChapterLabel)'>#body</chapter>)"
	       ."(<document>#body</document>)",
	       beforeDigest=> sub { AssignValue(inPreamble=>0); },
	       afterDigest=> sub { $GULLET->flush; return; });

#======================================================================
# DLMF's Numbering scheme.
NewCounter('part');
NewCounter('section');
NewCounter('subsection','section');
NewCounter('subsubsection','subsection');
NewCounter('paragraph','subsubsection');
NewCounter('subparagraph','paragraph');

DefMacro('\thechapter',      'XX');
DefMacro('\thepart',         '');
DefMacro('\thesection',      '\thechapter.\arabic{section}');
DefMacro('\thesubsection',   '\thesection(\roman{subsection})');
DefMacro('\thesubsubsection','\thesubsection(\roman{subsubsection})');
DefMacro('\theparagraph',    '');
DefMacro('\thesubparagraph', '');

NewCounter('equation', 'section');
NewCounter('figure',   'section');
NewCounter('table',    'section');
DefMacro('\theequation','\thesection.\arabic{equation}');
DefMacro('\thefigure',  '\thesection.\arabic{figure}');
DefMacro('\thetable',   '\thesection.\arabic{table}');

#**********************************************************************
# Frontmatter

# NOTE: Need to redo author & affiliation to handle multiple authors.
# Need to handle token lists ??
DefPrimitive('\status{}', sub{ AssignValue(chapter_status=>$_[1]); });

DefMacro('\@authorinfo','');
# Let \author & \affiliation simply collect the constructors, in order.
DefMacro('\author{}', '\xdef\@authorinfo{\@authorinfo\fmt@author{#1}}');
DefMacro('\affiliation{}', '\xdef\@authorinfo{\@authorinfo\fmt@affiliation{#1}}');

DefConstructor('\fmt@affiliation{}',"<affiliation>#1</affiliation>");

DefConstructor('\email{}', "<email>#1</email>");
DefConstructor('\addCopyright{}{}','');#"<copyright year='#1'>#2</copyright>");

DefMacro('\@acknowledgements','');
DefPrimitive('\acknowledgements{}', sub { DefMacro('\@acknowledgements',$_[1])});
DefConstructor('\fmt@acknowledgements{}', "<acknowledgements>#1</acknowledgements>");

Tag('gallery', autoClose=>1, autoOpen=>1);
DefMacro('\@galleryitems','');
DefMacro('\galleryitem Semiverbatim Semiverbatim',
	 '\xdef\@galleryitems{\@galleryitems\fmt@galleryitem{sb:\thechapter.#1}{#2}}');

DefConstructor('\fmt@galleryitem Semiverbatim Semiverbatim',
	       "<galleryitem labelref='#1' graphic='#2'/>");

DefMacro('\maketitle', 
	 '\fmt@title{\@title}\@authorinfo'
	 .'\fmt@date{\@date}'
         .'\fmt@acknowledgements{\@acknowledgements}'
	 .'\@galleryitems');

#**********************************************************************
# More environments.
DefEnvironment('{figuregroup}', "<figuregroup>#body</figuregroup>");
DefEnvironment('{figuregroup*}',"<figuregroup>#body</figuregroup>");

#**********************************************************************
# Pseudo environments.
# Not really environments that transform to elements, since they
# don't necessarily nest properly with the more important document structure.
DefEnvironment('{onecolumn}', "<begin_onecolumn/>#body<end_onecolumn/>");
# Oh, what the heck, strip out printonly, and make electroniconly disappear!
DefEnvironment('{printonly}', "<printonly>#body</printonly>");
Tag('printonly', afterClose=>sub { $_[0]->getParentNode->removeChild($_[0]); });
DefConstructor('\onlyprint{}', "");

DefEnvironment('{electroniconly}','#body');
DefConstructor('\onlyelectronic{}',"#1");

#DefEnvironment('{sidebar}{}{}{}',
#	       "<sidebar name='#1'><title>#2</title><author>#3</author>#body</sidebar>",

DefEnvironment('{sidebar}{}{}{}',
	       "<sidebar name='#1' label='#label'><title>#2</title><author>#3</author>#body</sidebar>",
	       afterDigestBegin=> sub { 
		 my($whatsit,$name,$title,$author)=@_;
		 my $label = "sb:".Digest(T_CS('\thechapter'))->toString
		   .".".$name->toString;
		 $whatsit->setProperty(label=>$label); });

#**********************************************************************
# Metadata
DefConstructor('\note{}', "^<note>#1</note>", mode=>'text', reversion=>'');
DefConstructor('\origref[]{}', "^<origref ref='#2'>#1</origref>", mode=>'text', reversion=>'');

#**********************************************************************
# More Math environments.

# Redefine to accept optional (ignored) arg.
DefEnvironment('{equation}[]',
	       "<equation refnum='#refnum'><Math mode='display'><XMath>#body</XMath></Math></equation>",
	       mode=>'display_math',
	       properties=> { refnum=> sub { refStepCounter('equation'); }});
DefEnvironment('{equation*}[]',
	       "<equation><Math mode='display'><XMath>#body</XMath></Math></equation>",
	       mode=>'display_math');

# equationmix contains several math environments, 
# Each math produces inline math, BUT we've set displaystyle in them!
DefEnvironment('{equationmix}[]',"<equationmix refnum='#refnum'>#body</equationmix>",
	       properties=> { refnum=> sub { refStepCounter('equation'); }},
	       # NOTE: We'd like to have displaystyle (but NOT mode=display!) for enclosed math env!
	       # Use displaystyles for math environments within here.
	       beforeDigest => sub {
		 DefEnvironment('{math}',"<Math mode='inline'><XMath>#body</XMath></Math>",
				mode=>'inline_math',
				beforeDigest=>sub { AssignValue(mathstyle=>'display'); });
	       }
);
DefEnvironment('{equationmix*}[]',  "<equationmix>#body</equationmix>");
# NOTE: I haven't handled the subequation case!!! (where equations themselves get numbered!0
DefEnvironment('{equationgroup}[]', "<equationgroup refnum='#refnum'>#body</equationgroup>",
	       properties=> { refnum=> sub { refStepCounter('equation'); }});
DefEnvironment('{equationgroup*}[]',"<equationgroup>#body</equationgroup>");
DefConstructor('\intertext{}',"#1");

DefConstructor('\@constraint OptionalMatch:* {}',"^<constraint hidden='?#1(yes)(no)'>#2</constraint>",
	       mode=>'text', reversion=>'');

DefExpandable('\constraint OptionalMatch:* [Default:,]{}',sub { 
  my($self,$starred,$punct,$constraint)=@_;
  if($starred){			# hidden.
    (T_CS('\@constraint'),T_OTHER('*'),T_BEGIN,$constraint->unlist,T_END); }
  else {
    SkipSpaces();
    my $ppunct = ReadMatch(T_OTHER('.'),T_OTHER(','),T_OTHER(';')) || Tokens();
    ($punct->unlist, T_CS('\@constraint'), T_BEGIN,$constraint->unlist,$ppunct->unlist,T_END); }});

#**********************************************************************
DefConstructor('\URL[]{}',"<a href='#2'>?#1(#1)(#2)</a>");
DefConstructor('\VRML{}', "<VRML href='#1'/>");
DefConstructor('\GAMSclasspackage{}{}',"<GAMS class='#1' package='#2'/>");

#**********************************************************************
1;
