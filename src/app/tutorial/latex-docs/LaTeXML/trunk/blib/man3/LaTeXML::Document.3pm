.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::Document 3pm"
.TH LaTeXML::Document 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::Document\*(C'\fR \- represents an \s-1XML\s0 document under construction.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`LaTeXML::Document\*(C'\fR represents an \s-1XML\s0 document being constructed by LaTeXML,
and also provides the methods for constructing it.  LaTeXML will have
digested the source material resulting in a LaTeXML::List (from a LaTeXML::Stomach)
of  LaTeXML::Boxs, LaTeXML::Whatsits and sublists.  At this stage, a document is created
and it is responsible for `absorbing' the digested material.
Generally, the LaTeXML::Boxs and LaTeXML::Lists create text nodes,
whereas the LaTeXML::Whatsits create \f(CW\*(C`XML\*(C'\fR document fragments, elements
and attributes according to the defining LaTeXML::Constructor.
.PP
Most document construction occurs at a \fIcurrent insertion point\fR where material will
be added, and which moves along with the inserted material.
The LaTeXML::Model, derived from various declarations and document type,
is consulted to determine whether an insertion is allowed and when elements may need
to be automatically opened or closed in order to carry out a given insertion.
For example, a \f(CW\*(C`subsection\*(C'\fR element will typically be closed automatically when it
is attempted to open a \f(CW\*(C`section\*(C'\fR element.
.PP
In the methods described here, the term \f(CW$qname\fR is used for \s-1XML\s0 qualified names.
These are tag names with a namespace prefix.  The prefix should be one
registered with the current Model, for use within the code.  This prefix is
not necessarily the same as the one used in any \s-1DTD\s0, but should be mapped
to the a Namespace \s-1URI\s0 that was registered for the \s-1DTD\s0.
.PP
The arguments named \f(CW$node\fR are an XML::LibXML node.
.PP
The methods here are grouped into three sections covering basic access to the 
document, insertion methods at the current insertion point,
and less commonly used, lower-level, document manipulation methods.
.SS "Accessors"
.IX Subsection "Accessors"
.ie n .IP """$doc = $document\->getDocument;""" 4
.el .IP "\f(CW$doc = $document\->getDocument;\fR" 4
.IX Item "$doc = $document->getDocument;"
Returns the \f(CW\*(C`XML::LibXML::Document\*(C'\fR currently being constructed.
.ie n .IP """$doc = $document\->getModel;""" 4
.el .IP "\f(CW$doc = $document\->getModel;\fR" 4
.IX Item "$doc = $document->getModel;"
Returns the \f(CW\*(C`XML::LibXML::Model\*(C'\fR that represents the document model used for this document.
.ie n .IP """$node = $document\->getNode;""" 4
.el .IP "\f(CW$node = $document\->getNode;\fR" 4
.IX Item "$node = $document->getNode;"
Returns the node at the \fIcurrent insertion point\fR during construction.  This node
is considered still to be `open'; any insertions will go into it (if possible).
The node will be an \f(CW\*(C`XML::LibXML::Element\*(C'\fR, \f(CW\*(C`XML::LibXML::Text\*(C'\fR
or, initially, \f(CW\*(C`XML::LibXML::Document\*(C'\fR.
.ie n .IP """$node = $document\->getElement;""" 4
.el .IP "\f(CW$node = $document\->getElement;\fR" 4
.IX Item "$node = $document->getElement;"
Returns the closest ancestor to the current insertion point that is an Element.
.ie n .IP """$node = $document\->getChildElement($node);""" 4
.el .IP "\f(CW$node = $document\->getChildElement($node);\fR" 4
.IX Item "$node = $document->getChildElement($node);"
Returns a list of the child elements, if any, of the \f(CW$node\fR.
.ie n .IP """@nodes = $document\->getLastChildElement($node);""" 4
.el .IP "\f(CW@nodes = $document\->getLastChildElement($node);\fR" 4
.IX Item "@nodes = $document->getLastChildElement($node);"
Returns the last child element of the \f(CW$node\fR, if it has one, else undef.
.ie n .IP """$node = $document\->getFirstChildElement($node);""" 4
.el .IP "\f(CW$node = $document\->getFirstChildElement($node);\fR" 4
.IX Item "$node = $document->getFirstChildElement($node);"
Returns the first child element of the \f(CW$node\fR, if it has one, else undef.
.ie n .IP """@nodes = $document\->findnodes($xpath,$node);""" 4
.el .IP "\f(CW@nodes = $document\->findnodes($xpath,$node);\fR" 4
.IX Item "@nodes = $document->findnodes($xpath,$node);"
Returns a list of nodes matching the given \f(CW$xpath\fR expression.
The \fIcontext node\fR for \f(CW$xpath\fR is \f(CW$node\fR, if given,
otherwise it is the document element.
.ie n .IP """$node = $document\->findnode($xpath,$node);""" 4
.el .IP "\f(CW$node = $document\->findnode($xpath,$node);\fR" 4
.IX Item "$node = $document->findnode($xpath,$node);"
Returns the first node matching the given \f(CW$xpath\fR expression.
The \fIcontext node\fR for \f(CW$xpath\fR is \f(CW$node\fR, if given,
otherwise it is the document element.
.ie n .IP """$node = $document\->getNodeQName($node);""" 4
.el .IP "\f(CW$node = $document\->getNodeQName($node);\fR" 4
.IX Item "$node = $document->getNodeQName($node);"
Returns the qualified name (localname with namespace prefix)
of the given \f(CW$node\fR.  The namespace prefix mapping is the
code mapping of the current document model.
.SS "Construction Methods"
.IX Subsection "Construction Methods"
These methods are the most common ones used for construction of documents.
They generally operate by creating new material at the \fIcurrent insertion point\fR.
That point initially is just the document itself, but it moves along to
follow any new insertions.  These methods also adapt to the document model so as to
automatically open or close elements, when it is required for the pending insertion
and allowed by the document model (See Tag).
.ie n .IP """$xmldoc = $document\->finalize;""" 4
.el .IP "\f(CW$xmldoc = $document\->finalize;\fR" 4
.IX Item "$xmldoc = $document->finalize;"
This method finalizes the document by cleaning up various temporary
attributes, and returns the XML::LibXML::Document that was constructed.
.ie n .IP """$document\->absorb($digested);""" 4
.el .IP "\f(CW$document\->absorb($digested);\fR" 4
.IX Item "$document->absorb($digested);"
Absorb the \f(CW$digested\fR object into the document at the current insertion point
according to its type.  Various of the the other methods are invoked as needed,
and document nodes may be automatically opened or closed according to the document
model.
.ie n .IP """$document\->absorbText($string,$font);""" 4
.el .IP "\f(CW$document\->absorbText($string,$font);\fR" 4
.IX Item "$document->absorbText($string,$font);"
Absorb the given \f(CW$string\fR, in the specified \f(CW$font\fR, as plain
text, or a math token, depending on the current mode.
.ie n .IP """$document\->insertElement($qname,$content,%attributes);""" 4
.el .IP "\f(CW$document\->insertElement($qname,$content,%attributes);\fR" 4
.IX Item "$document->insertElement($qname,$content,%attributes);"
This is a shorthand for creating an element \f(CW$qname\fR (with given attributes),
absorbing \f(CW$content\fR from within that new node, and then closing it.
The \f(CW$content\fR must be digested material, either a single box, or
an array of boxes, which will be absorbed into the element.
This method returns the newly created node,
although it will no longer be the current insertion point.
.ie n .IP """$document\->insertMathToken($string,%attributes);""" 4
.el .IP "\f(CW$document\->insertMathToken($string,%attributes);\fR" 4
.IX Item "$document->insertMathToken($string,%attributes);"
Insert a math token (XMTok) containing the string \f(CW$string\fR with the given attributes.
Useful attributes would be name, role, font.
Returns the newly inserted node.
.ie n .IP """$document\->insertComment($text);""" 4
.el .IP "\f(CW$document\->insertComment($text);\fR" 4
.IX Item "$document->insertComment($text);"
Insert, and return, a comment with the given \f(CW$text\fR into the current node.
.ie n .IP """$document\->insertPI($op,%attributes);""" 4
.el .IP "\f(CW$document\->insertPI($op,%attributes);\fR" 4
.IX Item "$document->insertPI($op,%attributes);"
Insert, and return,  a ProcessingInstruction into the current node.
.ie n .IP """$document\->openText($text,$font);""" 4
.el .IP "\f(CW$document\->openText($text,$font);\fR" 4
.IX Item "$document->openText($text,$font);"
Open a text node in font \f(CW$font\fR, performing any required automatic opening
and closing of intermedate nodes (including those needed for font changes)
and inserting the string \f(CW$text\fR into it.
.ie n .IP """$document\->openElement($qname,%attributes);""" 4
.el .IP "\f(CW$document\->openElement($qname,%attributes);\fR" 4
.IX Item "$document->openElement($qname,%attributes);"
Open an element, named \f(CW$qname\fR and with the given attributes.
This will be inserted into the current node while  performing 
any required automatic opening and closing of intermedate nodes.
The new element is returned, and also becomes the current insertion point.
An error (fatal if in \f(CW\*(C`Strict\*(C'\fR mode) is signalled if there is no allowed way
to insert such an element into the current node.
.ie n .IP """$document\->closeElement($qname);""" 4
.el .IP "\f(CW$document\->closeElement($qname);\fR" 4
.IX Item "$document->closeElement($qname);"
Close the closest open element named \f(CW$qname\fR including any intermedate nodes that
may be automatically closed.  If that is not possible, signal an error.
The closed node's parent becomes the current node.
This method returns the closed node.
.ie n .IP """$node = $document\->isOpenable($qname);""" 4
.el .IP "\f(CW$node = $document\->isOpenable($qname);\fR" 4
.IX Item "$node = $document->isOpenable($qname);"
Check whether it is possible to open a \f(CW$qname\fR element
at the current insertion point.
.ie n .IP """$node = $document\->isCloseable($qname);""" 4
.el .IP "\f(CW$node = $document\->isCloseable($qname);\fR" 4
.IX Item "$node = $document->isCloseable($qname);"
Check whether it is possible to close a \f(CW$qname\fR element,
returning the node that would be closed if possible,
otherwise undef.
.ie n .IP """$document\->maybeCloseElement($qname);""" 4
.el .IP "\f(CW$document\->maybeCloseElement($qname);\fR" 4
.IX Item "$document->maybeCloseElement($qname);"
Close a \f(CW$qname\fR element, if it is possible to do so,
returns the closed node if it was found, else undef.
.ie n .IP """$document\->addAttribute($key=>$value);""" 4
.el .IP "\f(CW$document\->addAttribute($key=>$value);\fR" 4
.IX Item "$document->addAttribute($key=>$value);"
Add the given attribute to the node nearest to the current insertion point
that is allowed to have it. This does not change the current insertion point.
.PP
\fIInternal Insertion Methods\fR
.IX Subsection "Internal Insertion Methods"
.PP
These are described as an aide to understanding the code;
they rarely, if ever, should be used outside this module.
.ie n .IP """$document\->setNode($node);""" 4
.el .IP "\f(CW$document\->setNode($node);\fR" 4
.IX Item "$document->setNode($node);"
Sets the \fIcurrent insertion point\fR to be  \f(CW$node\fR.
This should be rarely used, if at all; The construction methods of document
generally maintain the notion of insertion point automatically.
This may be useful to allow insertion into a different part of the document,
but you probably want to set the insertion point back to the previous
node, afterwards.
.ie n .IP """$string = $document\->getInsertionContext($levels);""" 4
.el .IP "\f(CW$string = $document\->getInsertionContext($levels);\fR" 4
.IX Item "$string = $document->getInsertionContext($levels);"
For debugging, return a string showing the context of the current insertion point;
that is, the string of the nodes leading up to it.
if \f(CW$levels\fR is defined, show only that many nodes.
.ie n .IP """$node = $document\->find_insertion_point($qname);""" 4
.el .IP "\f(CW$node = $document\->find_insertion_point($qname);\fR" 4
.IX Item "$node = $document->find_insertion_point($qname);"
This internal method is used to find the appropriate point,
relative to the current insertion point, that an element with
the specified \f(CW$qname\fR can be inserted.  That position may
require automatic opening or closing of elements, according
to what is allowed by the document model.
.ie n .IP """@nodes = getInsertionCandidates($node);""" 4
.el .IP "\f(CW@nodes = getInsertionCandidates($node);\fR" 4
.IX Item "@nodes = getInsertionCandidates($node);"
Returns a list of elements where an arbitrary insertion might take place.
Roughly this is a list starting with \f(CW$node\fR,
followed by its parent and the parents siblings (in reverse order), 
followed by the grandparent and siblings (in reverse order).
.ie n .IP """$node = $document\->floatToElement($qname);""" 4
.el .IP "\f(CW$node = $document\->floatToElement($qname);\fR" 4
.IX Item "$node = $document->floatToElement($qname);"
Finds the nearest element at or preceding the current insertion point
(see \f(CW\*(C`getInsertionCandidates\*(C'\fR), that can accept an element \f(CW$qname\fR;
it moves the insertion point to that point, and returns the previous insertion point.
Generally, after doing whatever you need at the new insertion point,
you should call \f(CW\*(C`$document\->setNode($node);\*(C'\fR to
restore the insertion point.
If no such point is found, the insertion point is left unchanged,
and undef is returned.
.ie n .IP """$node = $document\->floatToAttribute($key);""" 4
.el .IP "\f(CW$node = $document\->floatToAttribute($key);\fR" 4
.IX Item "$node = $document->floatToAttribute($key);"
This method works the same as \f(CW\*(C`floatToElement\*(C'\fR, but find
the nearest element that can accept the attribute \f(CW$key\fR.
.ie n .IP """$node = $document\->openText_internal($text);""" 4
.el .IP "\f(CW$node = $document\->openText_internal($text);\fR" 4
.IX Item "$node = $document->openText_internal($text);"
This is an internal method,  used by \f(CW\*(C`openText\*(C'\fR, that assumes the insertion point has
been appropriately adjusted.)
.ie n .IP """$node = $document\->openMathText_internal($text);""" 4
.el .IP "\f(CW$node = $document\->openMathText_internal($text);\fR" 4
.IX Item "$node = $document->openMathText_internal($text);"
This internal method appends \f(CW$text\fR to the current insertion point,
which is assumed to be a math node.  It checks for math ligatures and
carries out any combinations called for.
.ie n .IP """$node = $document\->closeText_internal();""" 4
.el .IP "\f(CW$node = $document\->closeText_internal();\fR" 4
.IX Item "$node = $document->closeText_internal();"
This internal method closes the current node, which should be a text node.
It carries out any text ligatures on the content.
.ie n .IP """$node = $document\->closeNode_internal($node);""" 4
.el .IP "\f(CW$node = $document\->closeNode_internal($node);\fR" 4
.IX Item "$node = $document->closeNode_internal($node);"
This internal method closes any open text or element nodes starting
at the current insertion point, up to and including \f(CW$node\fR.
Afterwards, the parent of \f(CW$node\fR will be the current insertion point.
It condenses the tree to avoid redundant font switching elements.
.ie n .IP """$document\->afterOpen($node);""" 4
.el .IP "\f(CW$document\->afterOpen($node);\fR" 4
.IX Item "$document->afterOpen($node);"
Carries out any afterOpen operations that have been recorded (using \f(CW\*(C`Tag\*(C'\fR)
for the element name of \f(CW$node\fR.
.ie n .IP """$document\->afterClose($node);""" 4
.el .IP "\f(CW$document\->afterClose($node);\fR" 4
.IX Item "$document->afterClose($node);"
Carries out any afterClose operations that have been recorded (using \f(CW\*(C`Tag\*(C'\fR)
for the element name of \f(CW$node\fR.
.SS "Document Modification"
.IX Subsection "Document Modification"
The following methods are used to perform various sorts of modification
and rearrangements of the document, after the normal flow of insertion
has taken place.  These may be needed after an environment (or perhaps the whole document)
has been completed and one needs to analyze what it contains to decide
on the appropriate representation.
.ie n .IP """$document\->setAttribute($node,$key,$value);""" 4
.el .IP "\f(CW$document\->setAttribute($node,$key,$value);\fR" 4
.IX Item "$document->setAttribute($node,$key,$value);"
Sets the attribute \f(CW$key\fR to \f(CW$value\fR on \f(CW$node\fR.
This method is prefered over the direct LibXML one, since it
takes care of decoding namespaces (if \f(CW$key\fR is a qname),
and also manages recording of xml:id's.
.ie n .IP """$document\->recordID($id,$node);""" 4
.el .IP "\f(CW$document\->recordID($id,$node);\fR" 4
.IX Item "$document->recordID($id,$node);"
Records the association of the given \f(CW$node\fR with the \f(CW$id\fR,
which should be the \f(CW\*(C`xml:id\*(C'\fR attribute of the \f(CW$node\fR.
Usually this association will be maintained by the methods
that create nodes or set attributes.
.ie n .IP """$document\->unRecordID($id);""" 4
.el .IP "\f(CW$document\->unRecordID($id);\fR" 4
.IX Item "$document->unRecordID($id);"
Removes the node associated with the given \f(CW$id\fR, if any.
This might be needed if a node is deleted.
.ie n .IP """$document\->modifyID($id);""" 4
.el .IP "\f(CW$document\->modifyID($id);\fR" 4
.IX Item "$document->modifyID($id);"
Adjusts \f(CW$id\fR, if needed, so that it is unique.
It does this by appending a letter and incrementing until it
finds an id that is not yet associated with a node.
.ie n .IP """$node = $document\->lookupID($id);""" 4
.el .IP "\f(CW$node = $document\->lookupID($id);\fR" 4
.IX Item "$node = $document->lookupID($id);"
Returns the node, if any, that is associated with the given \f(CW$id\fR.
.ie n .IP """$document\->setNodeBox($node,$box);""" 4
.el .IP "\f(CW$document\->setNodeBox($node,$box);\fR" 4
.IX Item "$document->setNodeBox($node,$box);"
Records the \f(CW$box\fR (being a Box, Whatsit or List), that
was (presumably) responsible for the creation of the element \f(CW$node\fR.
This information is useful for determining source locations,
original TeX strings, and so forth.
.ie n .IP """$box = $document\->getNodeBox($node);""" 4
.el .IP "\f(CW$box = $document\->getNodeBox($node);\fR" 4
.IX Item "$box = $document->getNodeBox($node);"
Returns the \f(CW$box\fR that was responsible for creating the element \f(CW$node\fR.
.ie n .IP """$document\->setNodeFont($node,$font);""" 4
.el .IP "\f(CW$document\->setNodeFont($node,$font);\fR" 4
.IX Item "$document->setNodeFont($node,$font);"
Records the font object that encodes the font that should be
used to display any text within the element \f(CW$node\fR.
.ie n .IP """$font = $document\->getNodeFont($node);""" 4
.el .IP "\f(CW$font = $document\->getNodeFont($node);\fR" 4
.IX Item "$font = $document->getNodeFont($node);"
Returns the font object associated with the element \f(CW$node\fR.
.ie n .IP """$node = $document\->openElementAt($point,$qname,%attributes);""" 4
.el .IP "\f(CW$node = $document\->openElementAt($point,$qname,%attributes);\fR" 4
.IX Item "$node = $document->openElementAt($point,$qname,%attributes);"
Opens a new child element in \f(CW$point\fR with the qualified name \f(CW$qname\fR
and with the given attributes.  This method is not affected by, nor does
it affect, the current insertion point.  It does manage namespaces,
xml:id's and associating a box, font and locator with the new element,
as well as running any \f(CW\*(C`afterOpen\*(C'\fR operations.
.ie n .IP """$node = $document\->closeElementAt($node);""" 4
.el .IP "\f(CW$node = $document\->closeElementAt($node);\fR" 4
.IX Item "$node = $document->closeElementAt($node);"
Closes \f(CW$node\fR.  This method is not affected by, nor does
it affect, the current insertion point.
However, it does run any \f(CW\*(C`afterClose\*(C'\fR operations, so any element
that was created using the lower-level \f(CW\*(C`openElementAt\*(C'\fR should
be closed using this method.
.ie n .IP """$node = $document\->appendClone($node,@newchildren);""" 4
.el .IP "\f(CW$node = $document\->appendClone($node,@newchildren);\fR" 4
.IX Item "$node = $document->appendClone($node,@newchildren);"
Appends clones of \f(CW@newchildren\fR to \f(CW$node\fR.
This method modifies any ids found within \f(CW@newchildren\fR
(using \f(CW\*(C`modifyID\*(C'\fR), and fixes up any references to those ids
within the clones so that they refer to the modified id.
.ie n .IP """$node = $document\->wrapNodes($qname,@nodes);""" 4
.el .IP "\f(CW$node = $document\->wrapNodes($qname,@nodes);\fR" 4
.IX Item "$node = $document->wrapNodes($qname,@nodes);"
This method wraps the \f(CW@nodes\fR by a new element with qualified name \f(CW$qname\fR,
that new node replaces the first of \f(CW@node\fR.
The remaining nodes in \f(CW@nodes\fR must be following siblings of the first one.
.Sp
\&\s-1NOTE:\s0 Does this need multiple nodes?
If so, perhaps some kind of movenodes helper?
Otherwise, what about attributes?
.ie n .IP """$node = $document\->unwrapNodes($node);""" 4
.el .IP "\f(CW$node = $document\->unwrapNodes($node);\fR" 4
.IX Item "$node = $document->unwrapNodes($node);"
Unwrap the children of \f(CW$node\fR, by replacing \f(CW$node\fR by its children.
.ie n .IP """$node = $document\->replaceNode($node,@nodes);""" 4
.el .IP "\f(CW$node = $document\->replaceNode($node,@nodes);\fR" 4
.IX Item "$node = $document->replaceNode($node,@nodes);"
Replace \f(CW$node\fR by \f(CW@nodes\fR; presumably they are some sort of descendant nodes.
.ie n .IP """$node = $document\->renameNode($node,$newname);""" 4
.el .IP "\f(CW$node = $document\->renameNode($node,$newname);\fR" 4
.IX Item "$node = $document->renameNode($node,$newname);"
Rename \f(CW$node\fR to the tagname \f(CW$newname\fR; equivalently replace \f(CW$node\fR by
a new node with name \f(CW$newname\fR and copy the attributes and contents.
It is assumed that \f(CW$newname\fR can contain those attributes and contents.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
