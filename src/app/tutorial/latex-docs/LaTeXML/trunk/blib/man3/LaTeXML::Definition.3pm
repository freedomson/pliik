.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::Definition 3pm"
.TH LaTeXML::Definition 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::Definition\*(C'\fR  \- Control sequence definitions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These represent the various executables corresponding to control sequences.
See LaTeXML::Package for the most convenient means to create them.
.ie n .IP """LaTeXML::Expandable""" 4
.el .IP "\f(CWLaTeXML::Expandable\fR" 4
.IX Item "LaTeXML::Expandable"
represents macros and other expandable control sequences
that are carried out in the Gullet during expansion. The results of invoking an
\&\f(CW\*(C`LaTeXML::Expandable\*(C'\fR should be a list of \f(CW\*(C`LaTeXML::Token\*(C'\fRs.
.ie n .IP """LaTeXML::Primitive""" 4
.el .IP "\f(CWLaTeXML::Primitive\fR" 4
.IX Item "LaTeXML::Primitive"
represents primitive control sequences that are converted directly to
Boxes or Lists containing basic Unicode content, rather than structured \s-1XML\s0,
or those executed for side effect during digestion in the LaTeXML::Stomach,
changing the LaTeXML::State.  The results of invoking a \f(CW\*(C`LaTeXML::Primitive\*(C'\fR, if any,
should be a list of digested items (\f(CW\*(C`LaTeXML::Box\*(C'\fR, \f(CW\*(C`LaTeXML::List\*(C'\fR
or \f(CW\*(C`LaTeXML::Whatsit\*(C'\fR).
.ie n .IP """LaTeXML::Register""" 4
.el .IP "\f(CWLaTeXML::Register\fR" 4
.IX Item "LaTeXML::Register"
is set up as a speciallized primitive with a getter and setter
to access and store values in the Stomach.
.ie n .IP """LaTeXML::CharDef""" 4
.el .IP "\f(CWLaTeXML::CharDef\fR" 4
.IX Item "LaTeXML::CharDef"
represents a further specialized Register for chardef.
.ie n .IP """LaTeXML::Constructor""" 4
.el .IP "\f(CWLaTeXML::Constructor\fR" 4
.IX Item "LaTeXML::Constructor"
represents control sequences that contribute arbitrary \s-1XML\s0 fragments
to the document tree.  During digestion, a \f(CW\*(C`LaTeXML::Constuctor\*(C'\fR records the arguments 
used in the invokation to produce a LaTeXML::Whatsit.  The resulting LaTeXML::Whatsit
(usually) generates an \s-1XML\s0 document fragment when absorbed by an instance of LaTeXML::Document.
Additionally, a \f(CW\*(C`LaTeXML::Constructor\*(C'\fR may have beforeDigest and afterDigest daemons
defined which are executed for side effect, or for adding additional boxes to the output.
.PP
More documentation needed, but see LaTeXML::Package for the main user access to these.
.SS "Methods in general"
.IX Subsection "Methods in general"
.ie n .IP """$token = $defn\->getCS;""" 4
.el .IP "\f(CW$token = $defn\->getCS;\fR" 4
.IX Item "$token = $defn->getCS;"
Returns the (main) token that is bound to this definition.
.ie n .IP """$string = $defn\->getCSName;""" 4
.el .IP "\f(CW$string = $defn\->getCSName;\fR" 4
.IX Item "$string = $defn->getCSName;"
Returns the string form of the token bound to this definition,
taking into account any alias for this definition.
.ie n .IP """$defn\->readArguments($gullet);""" 4
.el .IP "\f(CW$defn\->readArguments($gullet);\fR" 4
.IX Item "$defn->readArguments($gullet);"
Reads the arguments for this \f(CW$defn\fR from the \f(CW$gullet\fR,
returning a list of LaTeXML::Tokens.
.ie n .IP """$parameters = $defn\->getParameters;""" 4
.el .IP "\f(CW$parameters = $defn\->getParameters;\fR" 4
.IX Item "$parameters = $defn->getParameters;"
Return the \f(CW\*(C`LaTeXML::Parameters\*(C'\fR object representing the formal parameters
of the definition.
.ie n .IP """@tokens = $defn\->invocation(@args);""" 4
.el .IP "\f(CW@tokens = $defn\->invocation(@args);\fR" 4
.IX Item "@tokens = $defn->invocation(@args);"
Return the tokens that would invoke the given definition with the
provided arguments.  This is used to recreate the TeX code (or it's
equivalent).
.ie n .IP """$defn\->invoke;""" 4
.el .IP "\f(CW$defn\->invoke;\fR" 4
.IX Item "$defn->invoke;"
Invoke the action of the \f(CW$defn\fR.  For expandable definitions, this is done in
the Gullet, and returns a list of LaTeXML::Tokens.  For primitives, it
is carried out in the Stomach, and returns a list of LaTeXML::Boxes.
For a constructor, it is also carried out by the Stomach, and returns a LaTeXML::Whatsit.
That whatsit will be responsible for constructing the \s-1XML\s0 document fragment, when the
LaTeXML::Document invokes \f(CW\*(C`$whatsit\-\*(C'\fRbeAbsorbed($document);>.
.Sp
Primitives and Constructors also support before and after daemons, lists of subroutines
that are executed before and after digestion.  These can be useful for changing modes, etc.
.SS "More about Primitives"
.IX Subsection "More about Primitives"
Primitive definitions may have lists of daemon subroutines, \f(CW\*(C`beforeDigest\*(C'\fR and \f(CW\*(C`afterDigest\*(C'\fR,
that are executed before (and before the arguments are read) and after digestion.
These should either end with \f(CW\*(C`return;\*(C'\fR, \f(CW\*(C`()\*(C'\fR, or return a list of digested 
objects (LaTeXML::Box, etc) that will be contributed to the current list.
.SS "More about Registers"
.IX Subsection "More about Registers"
Registers generally store some value in the current \f(CW\*(C`LaTeXML::State\*(C'\fR, but are not
required to. Like TeX's registers, when they are digested, they expect an optional
\&\f(CW\*(C`=\*(C'\fR, and then a value of the appropriate type. Register definitions support these
additional methods:
.ie n .IP """$value = $register\->valueOf(@args);""" 4
.el .IP "\f(CW$value = $register\->valueOf(@args);\fR" 4
.IX Item "$value = $register->valueOf(@args);"
Return the value associated with the register, by invoking it's \f(CW\*(C`getter\*(C'\fR function.
The additional args are used by some registers
to index into a set, such as the index to \f(CW\*(C`\ecount\*(C'\fR.
.ie n .IP """$register\->setValue($value,@args);""" 4
.el .IP "\f(CW$register\->setValue($value,@args);\fR" 4
.IX Item "$register->setValue($value,@args);"
Assign a value to the register, by invoking it's \f(CW\*(C`setter\*(C'\fR function.
.SS "More about Constructors"
.IX Subsection "More about Constructors"
A constructor has as it's \f(CW\*(C`replacement\*(C'\fR a subroutine or a string pattern representing
the \s-1XML\s0 fragment it should generate.  In the case of a string pattern, the pattern is
compiled into a subroutine on first usage by the internal class \f(CW\*(C`LaTeXML::ConstructorCompiler\*(C'\fR.
Like primitives, constructors may have \f(CW\*(C`beforeDigest\*(C'\fR and \f(CW\*(C`afterDigest\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
