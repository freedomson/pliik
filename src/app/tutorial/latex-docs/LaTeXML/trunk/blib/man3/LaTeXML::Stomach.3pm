.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::Stomach 3pm"
.TH LaTeXML::Stomach 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::Stomach\*(C'\fR \- digests tokens into boxes, lists, etc.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`LaTeXML::Stomach\*(C'\fR digests tokens read from a LaTeXML::Gullet
(they will have already been expanded).
.PP
There are basically four cases when digesting a LaTeXML::Token:
.IP "A plain character" 4
.IX Item "A plain character"
is simply converted to a LaTeXML::Box (or LaTeXML::MathBox in math mode),
recording the current LaTeXML::Font.
.IP "A primitive" 4
.IX Item "A primitive"
If a control sequence represents LaTeXML::Primitive, the primitive is invoked, executing its
stored subroutine.  This is typically done for side effect (changing the state in the LaTeXML::State),
although they may also contribute digested material.
As with macros, any arguments to the primitive are read from the LaTeXML::Gullet.
.IP "Grouping (or environment bodies)" 4
.IX Item "Grouping (or environment bodies)"
are collected into a LaTeXML::List.
.IP "Constructors" 4
.IX Item "Constructors"
A special class of control sequence, called a LaTeXML::Constructor produces a 
LaTeXML::Whatsit which remembers the control sequence and arguments that
created it, and defines its own translation into \f(CW\*(C`XML\*(C'\fR elements, attributes and data.
Arguments to a constructor are read from the gullet and also digested.
.SS "Digestion"
.IX Subsection "Digestion"
.ie n .IP """$list = $stomach\->digestNextBody;""" 4
.el .IP "\f(CW$list = $stomach\->digestNextBody;\fR" 4
.IX Item "$list = $stomach->digestNextBody;"
Return the digested LaTeXML::List after reading and digesting a `body'
from the its Gullet.  The body extends until the current
level of boxing or environment is closed.
.ie n .IP """$list = $stomach\->digest($tokens);""" 4
.el .IP "\f(CW$list = $stomach\->digest($tokens);\fR" 4
.IX Item "$list = $stomach->digest($tokens);"
Return the LaTeXML::List resuting from digesting the given tokens.
This is typically used to digest arguments to primitives or
constructors.
.ie n .IP """@boxes = $stomach\->invokeToken($token);""" 4
.el .IP "\f(CW@boxes = $stomach\->invokeToken($token);\fR" 4
.IX Item "@boxes = $stomach->invokeToken($token);"
Invoke the given (expanded) token.  If it corresponds to a
Primitive or Constructor, the definition will be invoked,
reading any needed arguments fromt he current input source.
Otherwise, the token will be digested.
A List of Box's, Lists, Whatsit's is returned.
.ie n .IP """@boxes = $stomach\->regurgitate;""" 4
.el .IP "\f(CW@boxes = $stomach\->regurgitate;\fR" 4
.IX Item "@boxes = $stomach->regurgitate;"
Removes and returns a list of the boxes already digested 
at the current level.  This peculiar beast is used
by things like \echoose (which is a Primitive in TeX, but
a Constructor in LaTeXML).
.SS "Grouping"
.IX Subsection "Grouping"
.ie n .IP """$stomach\->bgroup;""" 4
.el .IP "\f(CW$stomach\->bgroup;\fR" 4
.IX Item "$stomach->bgroup;"
Begin a new level of binding by pushing a new stack frame,
and a new level of boxing the digested output.
.ie n .IP """$stomach\->egroup;""" 4
.el .IP "\f(CW$stomach\->egroup;\fR" 4
.IX Item "$stomach->egroup;"
End a level of binding by popping the last stack frame,
undoing whatever bindings appeared there, and also
decrementing the level of boxing.
.ie n .IP """$stomach\->begingroup;""" 4
.el .IP "\f(CW$stomach\->begingroup;\fR" 4
.IX Item "$stomach->begingroup;"
Begin a new level of binding by pushing a new stack frame.
.ie n .IP """$stomach\->endgroup;""" 4
.el .IP "\f(CW$stomach\->endgroup;\fR" 4
.IX Item "$stomach->endgroup;"
End a level of binding by popping the last stack frame,
undoing whatever bindings appeared there.
.SS "Modes"
.IX Subsection "Modes"
.ie n .IP """$stomach\->beginMode($mode);""" 4
.el .IP "\f(CW$stomach\->beginMode($mode);\fR" 4
.IX Item "$stomach->beginMode($mode);"
Begin processing in \f(CW$mode\fR; one of 'text', 'display\-math' or 'inline\-math'.
This also begins a new level of grouping and switches to a font
appropriate for the mode.
.ie n .IP """$stomach\->endMode($mode);""" 4
.el .IP "\f(CW$stomach\->endMode($mode);\fR" 4
.IX Item "$stomach->endMode($mode);"
End processing in \f(CW$mode\fR; an error is signalled if \f(CW$stomach\fR is not
currently in \f(CW$mode\fR.  This also ends a level of grouping.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
