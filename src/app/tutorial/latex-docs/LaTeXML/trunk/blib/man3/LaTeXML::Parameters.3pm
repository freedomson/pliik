.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::Parameters 3pm"
.TH LaTeXML::Parameters 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::Parameters\*(C'\fR \- formal parameters,
including \f(CW\*(C`LaTeXML::Parameter\*(C'\fR.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a representation for the formal parameters of LaTeXML::Definitions:
.ie n .IP """LaTeXML::Parameter""" 4
.el .IP "\f(CWLaTeXML::Parameter\fR" 4
.IX Item "LaTeXML::Parameter"
represents an individual parameter.
.SS "Parameters Methods"
.IX Subsection "Parameters Methods"
.ie n .IP """$parameters = parseParameters($prototype,$for);""" 4
.el .IP "\f(CW$parameters = parseParameters($prototype,$for);\fR" 4
.IX Item "$parameters = parseParameters($prototype,$for);"
Parses a string for a sequence of parameter specifications.
Each specification should be of the form
.Sp
.Vb 10
\& {}     reads a regular TeX argument, a sequence of
\&        tokens delimited by braces, or a single token.
\& {spec} reads a regular TeX argument, then reparses it
\&        to match the given spec. The spec is parsed
\&        recursively, but usually should correspond to
\&        a single argument.
\& [spec] reads an LaTeX\-style optional argument. If the
\&        spec is of the form Default:stuff, then stuff
\&        would be the default value.
\& Type   Reads an argument of the given type, where either
\&        Type has been declared, or there exists a ReadType
\&        function accessible from LaTeXML::Package::Pool.
\& Type:value, or Type:value1:value2...    These forms
\&        pass additional Tokens to the reader function.
\& OptionalType  Similar to Type, but it is not considered
\&        an error if the reader returns undef.
\& SkipType  Similar to OptionalType, but the value returned
\&        from the reader is ignored, and does not occupy a
\&        position in the arguments list.
.Ve
.ie n .IP """@parameters = $parameters\->getParameters;""" 4
.el .IP "\f(CW@parameters = $parameters\->getParameters;\fR" 4
.IX Item "@parameters = $parameters->getParameters;"
Return the list of \f(CW\*(C`LaTeXML::Parameter\*(C'\fR contained in \f(CW$parameters\fR.
.ie n .IP """@tokens = $parameters\->revertArguments(@args);""" 4
.el .IP "\f(CW@tokens = $parameters\->revertArguments(@args);\fR" 4
.IX Item "@tokens = $parameters->revertArguments(@args);"
Return a list of LaTeXML::Token that would represent the arguments
such that they can be parsed by the Gullet.
.ie n .IP """@args = $parameters\->readArguments($gullet,$fordefn);""" 4
.el .IP "\f(CW@args = $parameters\->readArguments($gullet,$fordefn);\fR" 4
.IX Item "@args = $parameters->readArguments($gullet,$fordefn);"
Read the arguments according to this \f(CW$parameters\fR from the \f(CW$gullet\fR.
This takes into account any special forms of arguments, such as optional,
delimited, etc.
.ie n .IP """@args = $parameters\->readArgumentsAndDigest($stomach,$fordefn);""" 4
.el .IP "\f(CW@args = $parameters\->readArgumentsAndDigest($stomach,$fordefn);\fR" 4
.IX Item "@args = $parameters->readArgumentsAndDigest($stomach,$fordefn);"
Reads and digests the arguments according to this \f(CW$parameters\fR, in sequence.
this method is used by Constructors.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
