.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::Box 3pm"
.TH LaTeXML::Box 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::Box\*(C'\fR \- Representations of digested objects.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These represent various kinds of digested objects
.ie n .IP """LaTeXML::Box""" 4
.el .IP "\f(CWLaTeXML::Box\fR" 4
.IX Item "LaTeXML::Box"
represents text in a particular font;
.ie n .IP """LaTeXML::MathBox""" 4
.el .IP "\f(CWLaTeXML::MathBox\fR" 4
.IX Item "LaTeXML::MathBox"
represents a math token in a particular font;
.ie n .IP """LaTeXML::List""" 4
.el .IP "\f(CWLaTeXML::List\fR" 4
.IX Item "LaTeXML::List"
represents a sequence of digested things in text;
.ie n .IP """LaTeXML::MathList""" 4
.el .IP "\f(CWLaTeXML::MathList\fR" 4
.IX Item "LaTeXML::MathList"
represents a sequence of digested things in math;
.ie n .IP """LaTeXML::Whatsit""" 4
.el .IP "\f(CWLaTeXML::Whatsit\fR" 4
.IX Item "LaTeXML::Whatsit"
represents a digested object that can generate arbitrary elements in the \s-1XML\s0 Document.
.SS "Common Methods"
.IX Subsection "Common Methods"
All these classes extend LaTeXML::Object and so implement
the \f(CW\*(C`stringify\*(C'\fR and \f(CW\*(C`equals\*(C'\fR operations.
.ie n .IP """$font = $digested\->getFont;""" 4
.el .IP "\f(CW$font = $digested\->getFont;\fR" 4
.IX Item "$font = $digested->getFont;"
Returns the font used by \f(CW$digested\fR.
.ie n .IP """$boole = $digested\->isMath;""" 4
.el .IP "\f(CW$boole = $digested\->isMath;\fR" 4
.IX Item "$boole = $digested->isMath;"
Returns whether \f(CW$digested\fR was created in math mode.
.ie n .IP """@boxes = $digested\->unlist;""" 4
.el .IP "\f(CW@boxes = $digested\->unlist;\fR" 4
.IX Item "@boxes = $digested->unlist;"
Returns a list of the boxes contained in \f(CW$digested\fR.
It is also defined for the Boxes and Whatsit (which just
return themselves) so they can stand-in for a List.
.ie n .IP """$string = $digested\->toString;""" 4
.el .IP "\f(CW$string = $digested\->toString;\fR" 4
.IX Item "$string = $digested->toString;"
Returns a string representing this \f(CW$digested\fR.
.ie n .IP """$string = $digested\->revert;""" 4
.el .IP "\f(CW$string = $digested\->revert;\fR" 4
.IX Item "$string = $digested->revert;"
Reverts the box to the list of \f(CW\*(C`Token\*(C'\fRs that created (or could have
created) it.
.ie n .IP """$string = $digested\->getLocator;""" 4
.el .IP "\f(CW$string = $digested\->getLocator;\fR" 4
.IX Item "$string = $digested->getLocator;"
Get a string describing the location in the original source that gave rise
to \f(CW$digested\fR.
.ie n .IP """$digested\->beAbsorbed($document);""" 4
.el .IP "\f(CW$digested\->beAbsorbed($document);\fR" 4
.IX Item "$digested->beAbsorbed($document);"
\&\f(CW$digested\fR should get itself absorbed into the \f(CW$document\fR in whatever way
is apppropriate.
.SS "Box Methods"
.IX Subsection "Box Methods"
The following methods are specific to \f(CW\*(C`LaTeXML::Box\*(C'\fR and \f(CW\*(C`LaTeXML::MathBox\*(C'\fR.
.ie n .IP """$string = $box\->getString;""" 4
.el .IP "\f(CW$string = $box\->getString;\fR" 4
.IX Item "$string = $box->getString;"
Returns the string part of the \f(CW$box\fR.
.SS "Whatsit Methods"
.IX Subsection "Whatsit Methods"
Note that the font is stored in the data properties under 'font'.
.ie n .IP """$defn = $whatsit\->getDefinition;""" 4
.el .IP "\f(CW$defn = $whatsit\->getDefinition;\fR" 4
.IX Item "$defn = $whatsit->getDefinition;"
Returns the LaTeXML::Definition responsible for creating \f(CW$whatsit\fR.
.ie n .IP """$value = $whatsit\->getProperty($key);""" 4
.el .IP "\f(CW$value = $whatsit\->getProperty($key);\fR" 4
.IX Item "$value = $whatsit->getProperty($key);"
Returns the value associated with \f(CW$key\fR in the \f(CW$whatsit\fR's property list.
.ie n .IP """$whatsit\->setProperty($key,$value);""" 4
.el .IP "\f(CW$whatsit\->setProperty($key,$value);\fR" 4
.IX Item "$whatsit->setProperty($key,$value);"
Sets the \f(CW$value\fR associated with the \f(CW$key\fR in the \f(CW$whatsit\fR's property list.
.ie n .IP """$props = $whatsit\->getProperties();""" 4
.el .IP "\f(CW$props = $whatsit\->getProperties();\fR" 4
.IX Item "$props = $whatsit->getProperties();"
Returns the hash of properties stored on this Whatsit.
(Note that this hash is modifiable).
.ie n .IP """$props = $whatsit\->setProperties(%keysvalues);""" 4
.el .IP "\f(CW$props = $whatsit\->setProperties(%keysvalues);\fR" 4
.IX Item "$props = $whatsit->setProperties(%keysvalues);"
Sets several properties, like setProperty.
.ie n .IP """$list = $whatsit\->getArg($n);""" 4
.el .IP "\f(CW$list = $whatsit\->getArg($n);\fR" 4
.IX Item "$list = $whatsit->getArg($n);"
Returns the \f(CW$n\fR\-th argument (starting from 1) for this \f(CW$whatsit\fR.
.ie n .IP """@args = $whatsit\->getArgs;""" 4
.el .IP "\f(CW@args = $whatsit\->getArgs;\fR" 4
.IX Item "@args = $whatsit->getArgs;"
Returns the list of arguments for this \f(CW$whatsit\fR.
.ie n .IP """$whatsit\->setArgs(@args);""" 4
.el .IP "\f(CW$whatsit\->setArgs(@args);\fR" 4
.IX Item "$whatsit->setArgs(@args);"
Sets the list of arguments for this \f(CW$whatsit\fR to \f(CW@args\fR (each arg should be
a \f(CW\*(C`LaTeXML::List\*(C'\fR or \f(CW\*(C`LaTeXML::MathList\*(C'\fR).
.ie n .IP """$list = $whatsit\->getBody;""" 4
.el .IP "\f(CW$list = $whatsit\->getBody;\fR" 4
.IX Item "$list = $whatsit->getBody;"
Return the body for this \f(CW$whatsit\fR. This is only defined for environments or
top-level math formula.  The body is stored in the properties under 'body'.
.ie n .IP """$whatsit\->setBody(@body);""" 4
.el .IP "\f(CW$whatsit\->setBody(@body);\fR" 4
.IX Item "$whatsit->setBody(@body);"
Sets the body of the \f(CW$whatsit\fR to the boxes in \f(CW@body\fR.  The last \f(CW$box\fR in \f(CW@body\fR
is assumed to represent the `trailer', that is the result of the invocation
that closed the environment or math.  It is stored separately in the properties
under 'trailer'.
.ie n .IP """$list = $whatsit\->getTrailer;""" 4
.el .IP "\f(CW$list = $whatsit\->getTrailer;\fR" 4
.IX Item "$list = $whatsit->getTrailer;"
Return the trailer for this \f(CW$whatsit\fR. See \f(CW\*(C`setBody\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
