.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::Mouth 3pm"
.TH LaTeXML::Mouth 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::Mouth\*(C'\fR \- tokenize the input.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`LaTeXML::Mouth\*(C'\fR (and subclasses) is responsible for \fItokenizing\fR, ie.
converting plain text and strings into LaTeXML::Tokens according to the
current category codes (catcodes) stored in the \f(CW\*(C`LaTeXML::State\*(C'\fR.
.ie n .IP """LaTeXML::FileMouth""" 4
.el .IP "\f(CWLaTeXML::FileMouth\fR" 4
.IX Item "LaTeXML::FileMouth"
specializes \f(CW\*(C`LaTeXML::Mouth\*(C'\fR to tokenize from a file.
.ie n .IP """LaTeXML::StyleMouth""" 4
.el .IP "\f(CWLaTeXML::StyleMouth\fR" 4
.IX Item "LaTeXML::StyleMouth"
further specializes \f(CW\*(C`LaTeXML::FileMouth\*(C'\fR for processing
style files, setting the catcode for \f(CW\*(C`@\*(C'\fR and ignoring comments.
.ie n .IP """LaTeXML::PerlMouth""" 4
.el .IP "\f(CWLaTeXML::PerlMouth\fR" 4
.IX Item "LaTeXML::PerlMouth"
is not really a Mouth in the above sense, but is used
to definitions from perl modules with exensions \f(CW\*(C`.ltxml\*(C'\fR and \f(CW\*(C`.latexml\*(C'\fR.
.SS "Creating Mouths"
.IX Subsection "Creating Mouths"
.ie n .IP """$mouth = LaTeXML::Mouth\->new($string);""" 4
.el .IP "\f(CW$mouth = LaTeXML::Mouth\->new($string);\fR" 4
.IX Item "$mouth = LaTeXML::Mouth->new($string);"
Creates a new Mouth reading from \f(CW$string\fR.
.ie n .IP """$mouth = LaTeXML::FileMouth\->new($pathname);""" 4
.el .IP "\f(CW$mouth = LaTeXML::FileMouth\->new($pathname);\fR" 4
.IX Item "$mouth = LaTeXML::FileMouth->new($pathname);"
Creates a new FileMouth to read from the given file.
.ie n .IP """$mouth = LaTeXML::StyleMouth\->new($pathname);""" 4
.el .IP "\f(CW$mouth = LaTeXML::StyleMouth\->new($pathname);\fR" 4
.IX Item "$mouth = LaTeXML::StyleMouth->new($pathname);"
Creates a new StyleMouth to read from the given style file.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP """$token = $mouth\->readToken;""" 4
.el .IP "\f(CW$token = $mouth\->readToken;\fR" 4
.IX Item "$token = $mouth->readToken;"
Returns the next LaTeXML::Token from the source.
.ie n .IP """$boole = $mouth\->hasMoreInput;""" 4
.el .IP "\f(CW$boole = $mouth\->hasMoreInput;\fR" 4
.IX Item "$boole = $mouth->hasMoreInput;"
Returns whether there is more data to read.
.ie n .IP """$string = $mouth\->getLocator($long);""" 4
.el .IP "\f(CW$string = $mouth\->getLocator($long);\fR" 4
.IX Item "$string = $mouth->getLocator($long);"
Return a description of current position in the source, for reporting errors.
.ie n .IP """$tokens = $mouth\->readTokens($until);""" 4
.el .IP "\f(CW$tokens = $mouth\->readTokens($until);\fR" 4
.IX Item "$tokens = $mouth->readTokens($until);"
Reads tokens until one matches \f(CW$until\fR (comparing the character, but not catcode).
This is useful for the \f(CW\*(C`\everb\*(C'\fR command.
.ie n .IP """$lines = $mouth\->readRawLines($endline,$exact);""" 4
.el .IP "\f(CW$lines = $mouth\->readRawLines($endline,$exact);\fR" 4
.IX Item "$lines = $mouth->readRawLines($endline,$exact);"
Reads raw (untokenized) lines from \f(CW$mouth\fR until a line matching \f(CW$endline\fR
is found.
If \f(CW$exact\fR is true, \f(CW$endline\fR is matched exactly, with no leading or trailing
data (like in the c<comment> package).
Otherwise, the match is done like with the c<verbatim> environment;
any text preceding \f(CW$endline\fR is returned as the last line, and any characters
after \f(CW$endline\fR remains in the mouth to be tokenized.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
