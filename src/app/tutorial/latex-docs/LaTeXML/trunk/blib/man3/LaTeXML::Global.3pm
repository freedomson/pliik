.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::Global 3pm"
.TH LaTeXML::Global 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::Global\*(C'\fR \- global exports used within LaTeXML, and in Packages.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use LaTeXML::Global;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module exports the various constants and constructors that are useful
throughout LaTeXML, and in Package implementations.
.SS "Global state"
.IX Subsection "Global state"
.ie n .IP """$STATE;""" 4
.el .IP "\f(CW$STATE;\fR" 4
.IX Item "$STATE;"
This is bound to the currently active LaTeXML::State by an instance
of LaTeXML during processing.
.SS "Tokens"
.IX Subsection "Tokens"
.ie n .IP """$catcode = CC_ESCAPE;""" 4
.el .IP "\f(CW$catcode = CC_ESCAPE;\fR" 4
.IX Item "$catcode = CC_ESCAPE;"
Constants for the category codes:
.Sp
.Vb 4
\&  CC_BEGIN, CC_END, CC_MATH, CC_ALIGN, CC_EOL,
\&  CC_PARAM, CC_SUPER, CC_SUB, CC_IGNORE,
\&  CC_SPACE, CC_LETTER, CC_OTHER, CC_ACTIVE,
\&  CC_COMMENT, CC_INVALID, CC_CS, CC_NOTEXPANDED.
.Ve
.Sp
[The last 2 are (apparent) extensions,
with catcodes 16 and 17, respectively].
.ie n .IP """$token = Token($string,$cc);""" 4
.el .IP "\f(CW$token = Token($string,$cc);\fR" 4
.IX Item "$token = Token($string,$cc);"
Creates a LaTeXML::Token with the given content and catcode.
The following shorthand versions are also exported for convenience:
.Sp
.Vb 4
\&  T_BEGIN, T_END, T_MATH, T_ALIGN, T_PARAM,
\&  T_SUB, T_SUPER, T_SPACE, T_LETTER($letter),
\&  T_OTHER($char), T_ACTIVE($char),
\&  T_COMMENT($comment), T_CS($cs)
.Ve
.ie n .IP """$tokens = Tokens(@token);""" 4
.el .IP "\f(CW$tokens = Tokens(@token);\fR" 4
.IX Item "$tokens = Tokens(@token);"
Creates a LaTeXML::Tokens from a list of LaTeXML::Token's
.ie n .IP """$tokens = Tokenize($string);""" 4
.el .IP "\f(CW$tokens = Tokenize($string);\fR" 4
.IX Item "$tokens = Tokenize($string);"
Tokenizes the \f(CW$string\fR according to the standard cattable, returning a LaTeXML::Tokens.
.ie n .IP """$tokens = TokenizeInternal($string);""" 4
.el .IP "\f(CW$tokens = TokenizeInternal($string);\fR" 4
.IX Item "$tokens = TokenizeInternal($string);"
Tokenizes the \f(CW$string\fR according to the internal cattable (where @ is a letter),
returning a LaTeXML::Tokens.
.ie n .IP """@tokens = Explode($string);""" 4
.el .IP "\f(CW@tokens = Explode($string);\fR" 4
.IX Item "@tokens = Explode($string);"
Returns a list of the tokens corresponding to the characters in \f(CW$string\fR.
All tokens have catcode \s-1CC_OTHER\s0, except for spaces which have catcode \s-1CC_SPACE\s0.
.ie n .IP """@tokens = ExplodeText($string);""" 4
.el .IP "\f(CW@tokens = ExplodeText($string);\fR" 4
.IX Item "@tokens = ExplodeText($string);"
Returns a list of the tokens corresponding to the characters in \f(CW$string\fR.
All (roman) letters have catcode \s-1CC_LETTER\s0, all others have catcode \s-1CC_OTHER\s0,
except for spaces which have catcode \s-1CC_SPACE\s0.
.ie n .IP """$tokens = Revert($object);""" 4
.el .IP "\f(CW$tokens = Revert($object);\fR" 4
.IX Item "$tokens = Revert($object);"
Returns a Tokens list containing the TeX that would create \f(CW$object\fR.
Note that this is not necessarily the original TeX code;
expansions or other substitutions may have taken place.
.ie n .IP """StartSemiVerbatim(); ... ; EndSemiVerbatim();""" 4
.el .IP "\f(CWStartSemiVerbatim(); ... ; EndSemiVerbatim();\fR" 4
.IX Item "StartSemiVerbatim(); ... ; EndSemiVerbatim();"
Desable disable most TeX catcodes.
.SS "Boxes, etc."
.IX Subsection "Boxes, etc."
.ie n .IP """$box = Box($string,$font,$locator,$tokens);""" 4
.el .IP "\f(CW$box = Box($string,$font,$locator,$tokens);\fR" 4
.IX Item "$box = Box($string,$font,$locator,$tokens);"
Creates a Box representing the \f(CW$string\fR in the given \f(CW$font\fR.
The \f(CW$locator\fR records the document source position.
The \f(CW$tokens\fR is a Tokens list containing the TeX that created
(or could have) the Box (See UnTeX).
If \f(CW$font\fR or \f(CW$locator\fR are undef, they are obtained from the
currently active LaTeXML::State.  Note that \f(CW$string\fR can
be undef which contributes nothing to the generated document,
but does record the TeX code (in \f(CW$tokens\fR).
.SS "Numbers, etc."
.IX Subsection "Numbers, etc."
.ie n .IP """$number = Number($num);""" 4
.el .IP "\f(CW$number = Number($num);\fR" 4
.IX Item "$number = Number($num);"
Creates a Number object representing \f(CW$num\fR.
.ie n .IP """$number = Float($num);""" 4
.el .IP "\f(CW$number = Float($num);\fR" 4
.IX Item "$number = Float($num);"
Creates a floating point object representing \f(CW$num\fR;
This is not part of TeX, but useful.
.ie n .IP """$dimension = Dimension($dim);""" 4
.el .IP "\f(CW$dimension = Dimension($dim);\fR" 4
.IX Item "$dimension = Dimension($dim);"
Creates a Dimension object.  \f(CW$num\fR can be a string with the number and units
(with any of the usual TeX recognized units), or just a number standing for
scaled points (sp).
.ie n .IP """$mudimension = MuDimension($dim);""" 4
.el .IP "\f(CW$mudimension = MuDimension($dim);\fR" 4
.IX Item "$mudimension = MuDimension($dim);"
Creates a MuDimension object; similar to Dimension.
.ie n .IP """$glue = Glue($gluespec);""" 4
.el .IP "\f(CW$glue = Glue($gluespec);\fR" 4
.IX Item "$glue = Glue($gluespec);"
.PD 0
.ie n .IP """$glue = Glue($sp,$plus,$pfill,$minus,$mfill);""" 4
.el .IP "\f(CW$glue = Glue($sp,$plus,$pfill,$minus,$mfill);\fR" 4
.IX Item "$glue = Glue($sp,$plus,$pfill,$minus,$mfill);"
.PD
Creates a Glue object.  \f(CW$gluespec\fR can be a string in the
form that TeX recognizes (number units optional plus and minus parts).
Alternatively, the dimension, plus and minus parts can be given separately:
\&\f(CW$pfill\fR and \f(CW$mfill\fR are 0 (when the \f(CW$plus\fR or \f(CW$minus\fR part is in sp)
or 1,2,3 for fil, fill or filll.
.ie n .IP """$glue = MuGlue($gluespec);""" 4
.el .IP "\f(CW$glue = MuGlue($gluespec);\fR" 4
.IX Item "$glue = MuGlue($gluespec);"
.PD 0
.ie n .IP """$glue = MuGlue($sp,$plus,$pfill,$minus,$mfill);""" 4
.el .IP "\f(CW$glue = MuGlue($sp,$plus,$pfill,$minus,$mfill);\fR" 4
.IX Item "$glue = MuGlue($sp,$plus,$pfill,$minus,$mfill);"
.PD
Creates a MuGlue object, similar to Glue.
.ie n .IP """$pair = Pair($num1,$num2);""" 4
.el .IP "\f(CW$pair = Pair($num1,$num2);\fR" 4
.IX Item "$pair = Pair($num1,$num2);"
Creates an object representing a pair of numbers;
Not a part of TeX, but useful for graphical objects.
The two components can be any numerical object.
.ie n .IP """$pair = PairList(@pairs);""" 4
.el .IP "\f(CW$pair = PairList(@pairs);\fR" 4
.IX Item "$pair = PairList(@pairs);"
Creates an object representing a list of pairs of numbers;
Not a part of TeX, but useful for graphical objects.
.SS "Error Reporting"
.IX Subsection "Error Reporting"
.ie n .IP """Fatal($message);""" 4
.el .IP "\f(CWFatal($message);\fR" 4
.IX Item "Fatal($message);"
Signals an fatal error, printing \f(CW$message\fR along with some context.
In verbose mode a stack trace is printed.
.ie n .IP """Error($message);""" 4
.el .IP "\f(CWError($message);\fR" 4
.IX Item "Error($message);"
Signals an error, printing \f(CW$message\fR along with some context.
If in strict mode, this is the same as \fIFatal()\fR.
Otherwise, it attempts to continue processing..
.ie n .IP """Warn($message);""" 4
.el .IP "\f(CWWarn($message);\fR" 4
.IX Item "Warn($message);"
Prints a warning message along with a short indicator of
the input context, unless verbosity is quiet.
.ie n .IP """NoteProgress($message);""" 4
.el .IP "\f(CWNoteProgress($message);\fR" 4
.IX Item "NoteProgress($message);"
Prints \f(CW$message\fR unless the verbosity level below 0.
.SS "Generic functions"
.IX Subsection "Generic functions"
.ie n .IP """Stringify($object);""" 4
.el .IP "\f(CWStringify($object);\fR" 4
.IX Item "Stringify($object);"
Returns a string identifying \f(CW$object\fR, for debugging.
Works on any values and objects, but invokes the stringify method on 
blessed objects.
More informative than the default perl conversion to a string.
.ie n .IP """ToString($object);""" 4
.el .IP "\f(CWToString($object);\fR" 4
.IX Item "ToString($object);"
Converts \f(CW$object\fR to string attempting, when possible,
to generate straight text without TeX markup.
This is most useful for converting Tokens or Boxes to document
content or attribute values, or values to be used for pathnames,
keywords, etc.   Generally, however, it is not possible
to convert Whatsits generated by Constructors into clean strings,
without TeX markup.
Works on any values and objects, but invokes
the toString method on blessed objects.
.ie n .IP """Equals($a,$b);""" 4
.el .IP "\f(CWEquals($a,$b);\fR" 4
.IX Item "Equals($a,$b);"
Compares the two objects for equality.  Works on any values and objects, 
but invokes the equals method on blessed objects, which does a
deep comparison of the two objects.
.ie n .IP """Revert($object);""" 4
.el .IP "\f(CWRevert($object);\fR" 4
.IX Item "Revert($object);"
Converts \f(CW$object\fR to a Tokens list containing the TeX that created it (or could have).
Note that this is not necessarily the original TeX code; expansions
or other substitutions may have taken place.
.ie n .IP """UnTeX($object);""" 4
.el .IP "\f(CWUnTeX($object);\fR" 4
.IX Item "UnTeX($object);"
Converts \f(CW$object\fR to a string containing TeX that created it (or could have).
Note that this is not necessarily the original TeX code; expansions
or other substitutions may have taken place.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
