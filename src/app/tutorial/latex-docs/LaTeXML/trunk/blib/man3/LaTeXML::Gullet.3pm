.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::Gullet 3pm"
.TH LaTeXML::Gullet 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::Gullet\*(C'\fR \- expands expandable tokens and parses common token sequences.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`LaTeXML::Gullet\*(C'\fR reads tokens (LaTeXML::Token) from a LaTeXML::Mouth.
It is responsible for expanding macros and expandable control sequences,
if the current definition associated with the token in the LaTeXML::State
is an LaTeXML::Expandable definition. The \f(CW\*(C`LaTeXML::Gullet\*(C'\fR also provides a
variety of methods for reading  various types of input such as arguments, optional arguments,
as well as for parsing LaTeXML::Number, LaTeXML::Dimension, etc, according
to TeX's rules.
.SS "Managing Input"
.IX Subsection "Managing Input"
.ie n .IP """$gullet\->input($file,$types,%options);""" 4
.el .IP "\f(CW$gullet\->input($file,$types,%options);\fR" 4
.IX Item "$gullet->input($file,$types,%options);"
Input the file named \f(CW$file\fR; Searches for matching files in the
current \f(CW\*(C`searchpath\*(C'\fR with an extension being one of  \f(CW$types\fR (an array
of strings). If the found file has a perl extension (pm, ltxml, or latexml), 
it will be executed (loaded).  If the found file has a TeX extension
(tex, sty, cls) it will be opened and latexml will prepare to read
from it.
.ie n .IP """$gullet\->openMouth($mouth, $noautoclose);""" 4
.el .IP "\f(CW$gullet\->openMouth($mouth, $noautoclose);\fR" 4
.IX Item "$gullet->openMouth($mouth, $noautoclose);"
Is this public? Prepares to read tokens from \f(CW$mouth\fR.
If \f(CW$noautoclose\fR is true, the Mouth will not be automatically closed
when it is exhausted.
.ie n .IP """$gullet\->closeMouth;""" 4
.el .IP "\f(CW$gullet\->closeMouth;\fR" 4
.IX Item "$gullet->closeMouth;"
Is this public? Finishes reading from the current mouth, and
reverts to the one in effect before the last openMouth.
.ie n .IP """$gullet\->flush;""" 4
.el .IP "\f(CW$gullet\->flush;\fR" 4
.IX Item "$gullet->flush;"
Is this public? Clears all inputs.
.ie n .IP """$gullet\->getLocator;""" 4
.el .IP "\f(CW$gullet\->getLocator;\fR" 4
.IX Item "$gullet->getLocator;"
Returns a string describing the current location in the input stream.
.SS "Low-level methods"
.IX Subsection "Low-level methods"
.ie n .IP """$tokens = $gullet\->expandTokens($tokens);""" 4
.el .IP "\f(CW$tokens = $gullet\->expandTokens($tokens);\fR" 4
.IX Item "$tokens = $gullet->expandTokens($tokens);"
Return the LaTeXML::Tokens resulting from expanding all the tokens in \f(CW$tokens\fR.
This is actually only used in a few circumstances where the arguments to
an expandable need explicit expansion; usually expansion happens at the right time.
.ie n .IP """@tokens = $gullet\->neutralizeTokens(@tokens);""" 4
.el .IP "\f(CW@tokens = $gullet\->neutralizeTokens(@tokens);\fR" 4
.IX Item "@tokens = $gullet->neutralizeTokens(@tokens);"
Another unusual method: Used for things like \eedef and token registers, to
inhibit further expansion of control sequences and proper spawning of register tokens.
.ie n .IP """$token = $gullet\->readToken;""" 4
.el .IP "\f(CW$token = $gullet\->readToken;\fR" 4
.IX Item "$token = $gullet->readToken;"
Return the next token from the input source, or undef if there is no more input.
.ie n .IP """$token = $gullet\->readXToken($toplevel);""" 4
.el .IP "\f(CW$token = $gullet\->readXToken($toplevel);\fR" 4
.IX Item "$token = $gullet->readXToken($toplevel);"
Return the next unexpandable token from the input source, or undef if there is no more input.
If the next token is expandable, it is expanded, and its expansion is reinserted into the input.
.ie n .IP """$gullet\->unread(@tokens);""" 4
.el .IP "\f(CW$gullet\->unread(@tokens);\fR" 4
.IX Item "$gullet->unread(@tokens);"
Push the \f(CW@tokens\fR back into the input stream to be re-read.
.SS "Mid-level methods"
.IX Subsection "Mid-level methods"
.ie n .IP """$token = $gullet\->readNonSpace;""" 4
.el .IP "\f(CW$token = $gullet\->readNonSpace;\fR" 4
.IX Item "$token = $gullet->readNonSpace;"
Read and return the next non-space token from the input after discarding any spaces.
.ie n .IP """$gullet\->skipSpaces;""" 4
.el .IP "\f(CW$gullet\->skipSpaces;\fR" 4
.IX Item "$gullet->skipSpaces;"
Skip the next spaces from the input.
.ie n .IP """$gullet\->skip1Space;""" 4
.el .IP "\f(CW$gullet\->skip1Space;\fR" 4
.IX Item "$gullet->skip1Space;"
Skip the next token from the input if it is a space.
.ie n .IP """$tokens = $gullet\->readBalanced;""" 4
.el .IP "\f(CW$tokens = $gullet\->readBalanced;\fR" 4
.IX Item "$tokens = $gullet->readBalanced;"
Read a sequence of tokens from the input until the balancing '}' (assuming the '{' has
already been read). Returns a LaTeXML::Tokens.
.ie n .IP """$boole = $gullet\->ifNext($token);""" 4
.el .IP "\f(CW$boole = $gullet\->ifNext($token);\fR" 4
.IX Item "$boole = $gullet->ifNext($token);"
Returns true if the next token in the input matches \f(CW$token\fR;
the possibly matching token remains in the input.
.ie n .IP """$tokens = $gullet\->readMatch(@choices);""" 4
.el .IP "\f(CW$tokens = $gullet\->readMatch(@choices);\fR" 4
.IX Item "$tokens = $gullet->readMatch(@choices);"
Read and return whichever of \f(CW@choices\fR (each are LaTeXML::Tokens)
matches the input, or undef if none do.
.ie n .IP """$keyword = $gullet\->readKeyword(@keywords);""" 4
.el .IP "\f(CW$keyword = $gullet\->readKeyword(@keywords);\fR" 4
.IX Item "$keyword = $gullet->readKeyword(@keywords);"
Read and return whichever of \f(CW@keywords\fR (each a string) matches the input, or undef
if none do.  This is similar to readMatch, but case and catcodes are ignored.
Also, leading spaces are skipped.
.ie n .IP """$tokens = $gullet\->readUntil(@delims);""" 4
.el .IP "\f(CW$tokens = $gullet\->readUntil(@delims);\fR" 4
.IX Item "$tokens = $gullet->readUntil(@delims);"
Read and return a (balanced) sequence of LaTeXML::Tokens until  matching one of the tokens
in \f(CW@delims\fR.  In a list context, it also returns which of the delimiters ended the sequence.
.SS "High-level methods"
.IX Subsection "High-level methods"
.ie n .IP """$tokens = $gullet\->readArg;""" 4
.el .IP "\f(CW$tokens = $gullet\->readArg;\fR" 4
.IX Item "$tokens = $gullet->readArg;"
Read and return a TeX argument; the next Token or Tokens (if surrounded by braces).
.ie n .IP """$tokens = $gullet\->readOptional($default);""" 4
.el .IP "\f(CW$tokens = $gullet\->readOptional($default);\fR" 4
.IX Item "$tokens = $gullet->readOptional($default);"
Read and return a LaTeX optional argument; returns \f(CW$default\fR if there is no '[',
otherwise the contents of the [].
.ie n .IP """$thing = $gullet\->readValue($type);""" 4
.el .IP "\f(CW$thing = $gullet\->readValue($type);\fR" 4
.IX Item "$thing = $gullet->readValue($type);"
Reads an argument of a given type: one of 'Number', 'Dimension', 'Glue', 'MuGlue' or 'any'.
.ie n .IP """$value = $gullet\->readRegisterValue($type);""" 4
.el .IP "\f(CW$value = $gullet\->readRegisterValue($type);\fR" 4
.IX Item "$value = $gullet->readRegisterValue($type);"
Read a control sequence token (and possibly it's arguments) that names a register,
and return the value.  Returns undef if the next token isn't such a register.
.ie n .IP """$number = $gullet\->readNumber;""" 4
.el .IP "\f(CW$number = $gullet\->readNumber;\fR" 4
.IX Item "$number = $gullet->readNumber;"
Read a LaTeXML::Number according to TeX's rules of the various things that
can be used as a numerical value.
.ie n .IP """$dimension = $gullet\->readDimension;""" 4
.el .IP "\f(CW$dimension = $gullet\->readDimension;\fR" 4
.IX Item "$dimension = $gullet->readDimension;"
Read a LaTeXML::Dimension according to TeX's rules of the various things that
can be used as a dimension value.
.ie n .IP """$mudimension = $gullet\->readMuDimension;""" 4
.el .IP "\f(CW$mudimension = $gullet\->readMuDimension;\fR" 4
.IX Item "$mudimension = $gullet->readMuDimension;"
Read a LaTeXML::MuDimension according to TeX's rules of the various things that
can be used as a mudimension value.
.ie n .IP """$glue = $gullet\->readGlue;""" 4
.el .IP "\f(CW$glue = $gullet\->readGlue;\fR" 4
.IX Item "$glue = $gullet->readGlue;"
Read a  LaTeXML::Glue according to TeX's rules of the various things that
can be used as a glue value.
.ie n .IP """$muglue = $gullet\->readMuGlue;""" 4
.el .IP "\f(CW$muglue = $gullet\->readMuGlue;\fR" 4
.IX Item "$muglue = $gullet->readMuGlue;"
Read a LaTeXML::MuGlue according to TeX's rules of the various things that
can be used as a muglue value.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
