.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LaTeXML::State 3pm"
.TH LaTeXML::State 3pm "2012-07-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\f(CW\*(C`LaTeXML::State\*(C'\fR \- stores the current state of processing.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`LaTeXML::State\*(C'\fR object stores the current state of processing.
It recording catcodes, variables values, definitions and so forth,
as well as mimicing TeX's scoping rules.
.SS "Access to State and Processing"
.IX Subsection "Access to State and Processing"
.ie n .IP """$STATE\->getStomach;""" 4
.el .IP "\f(CW$STATE\->getStomach;\fR" 4
.IX Item "$STATE->getStomach;"
Returns the current Stomach used for digestion.
.ie n .IP """$STATE\->getModel;""" 4
.el .IP "\f(CW$STATE\->getModel;\fR" 4
.IX Item "$STATE->getModel;"
Returns the current Model representing the document model.
.SS "Scoping"
.IX Subsection "Scoping"
The assignment methods, described below, generally take a \f(CW$scope\fR argument, which
determines how the assignment is made.  The allowed values and thier implications are:
.PP
.Vb 5
\& global   : global assignment.
\& local    : local assignment, within the current grouping.
\& undef    : global if \eglobal preceded, else local (default)
\& <name>   : stores the assignment in a \`scope\*(Aq which
\&            can be loaded later.
.Ve
.PP
If no scoping is specified, then the assignment will be global
if a preceding \f(CW\*(C`\eglobal\*(C'\fR has set the global flag, otherwise
the value will be assigned within the current grouping.
.ie n .IP """$STATE\->pushFrame;""" 4
.el .IP "\f(CW$STATE\->pushFrame;\fR" 4
.IX Item "$STATE->pushFrame;"
Starts a new level of grouping.
Note that this is lower level than \f(CW\*(C`\ebgroup\*(C'\fR; See LaTeXML::Stomach.
.ie n .IP """$STATE\->popFrame;""" 4
.el .IP "\f(CW$STATE\->popFrame;\fR" 4
.IX Item "$STATE->popFrame;"
Ends the current level of grouping.
Note that this is lower level than \f(CW\*(C`\eegroup\*(C'\fR; See LaTeXML::Stomach.
.ie n .IP """$STATE\->setPrefix($prefix);""" 4
.el .IP "\f(CW$STATE\->setPrefix($prefix);\fR" 4
.IX Item "$STATE->setPrefix($prefix);"
Sets a prefix (eg. \f(CW\*(C`global\*(C'\fR for \f(CW\*(C`\eglobal\*(C'\fR, etc) for the next operation, if applicable.
.ie n .IP """$STATE\->clearPrefixes;""" 4
.el .IP "\f(CW$STATE\->clearPrefixes;\fR" 4
.IX Item "$STATE->clearPrefixes;"
Clears any prefixes.
.SS "Values"
.IX Subsection "Values"
.ie n .IP """$value = $STATE\->lookupValue($name);""" 4
.el .IP "\f(CW$value = $STATE\->lookupValue($name);\fR" 4
.IX Item "$value = $STATE->lookupValue($name);"
Lookup the current value associated with the the string \f(CW$name\fR.
.ie n .IP """$STATE\->assignValue($name,$value,$scope);""" 4
.el .IP "\f(CW$STATE\->assignValue($name,$value,$scope);\fR" 4
.IX Item "$STATE->assignValue($name,$value,$scope);"
Assign \f(CW$value\fR to be associated with the the string \f(CW$name\fR, according
to the given scoping rule.
.Sp
Values are also used to specify most configuration parameters (which can
therefor also be scoped).  The recognized configuration parameters are:
.Sp
.Vb 12
\& VERBOSITY         : the level of verbosity for debugging
\&                     output, with 0 being default.
\& STRICT            : whether errors (eg. undefined macros)
\&                     are fatal.
\& INCLUDE_COMMENTS  : whether to preserve comments in the
\&                     source, and to add occasional line
\&                     number comments. (Default true).
\& PRESERVE_NEWLINES : whether newlines in the source should
\&                     be preserved (not 100% TeX\-like).
\&                     By default this is true.
\& SEARCHPATHS       : a list of directories to search for
\&                     sources, implementations, etc.
.Ve
.ie n .IP """$STATE\->pushValue($name,$value);""" 4
.el .IP "\f(CW$STATE\->pushValue($name,$value);\fR" 4
.IX Item "$STATE->pushValue($name,$value);"
This is like \f(CW\*(C`\->assign\*(C'\fR, but pushes a value onto the end of the stored value,
which should be a \s-1LIST\s0 reference.
Scoping is not handled here (yet?), it simply pushes the value
onto the last binding of \f(CW$name\fR.
.ie n .IP """$boole = $STATE\->isValuebound($type,$name,$frame);""" 4
.el .IP "\f(CW$boole = $STATE\->isValuebound($type,$name,$frame);\fR" 4
.IX Item "$boole = $STATE->isValuebound($type,$name,$frame);"
Returns whether the value \f(CW$name\fR is bound. If  \f(CW$frame\fR is given, check
whether it is bound in the \f(CW$frame\fR\-th frame, with 0 being the top frame.
.SS "Category Codes"
.IX Subsection "Category Codes"
.ie n .IP """$value = $STATE\->lookupCatcode($char);""" 4
.el .IP "\f(CW$value = $STATE\->lookupCatcode($char);\fR" 4
.IX Item "$value = $STATE->lookupCatcode($char);"
Lookup the current catcode associated with the the character \f(CW$char\fR.
.ie n .IP """$STATE\->assignCatcode($char,$catcode,$scope);""" 4
.el .IP "\f(CW$STATE\->assignCatcode($char,$catcode,$scope);\fR" 4
.IX Item "$STATE->assignCatcode($char,$catcode,$scope);"
Set \f(CW$char\fR to have the given \f(CW$catcode\fR, with the assignment made
according to the given scoping rule.
.Sp
This method is also used to specify whether a given character is
active in math mode, by using \f(CW\*(C`math:$char\*(C'\fR for the character,
and using a value of 1 to specify that it is active.
.SS "Definitions"
.IX Subsection "Definitions"
.ie n .IP """$defn = $STATE\->lookupMeaning($token);""" 4
.el .IP "\f(CW$defn = $STATE\->lookupMeaning($token);\fR" 4
.IX Item "$defn = $STATE->lookupMeaning($token);"
Get the \*(L"meaning\*(R" currently associated with \f(CW$token\fR,
either the definition (if it is a control sequence or active character)
 or the token itself if it shouldn't be executable.
(See LaTeXML::Definition)
.ie n .IP """$STATE\->assignMeaning($token,$defn,$scope);""" 4
.el .IP "\f(CW$STATE\->assignMeaning($token,$defn,$scope);\fR" 4
.IX Item "$STATE->assignMeaning($token,$defn,$scope);"
Set the definition associated with \f(CW$token\fR to \f(CW$defn\fR.
If \f(CW$globally\fR is true, it makes this the global definition
rather than bound within the current group.
(See LaTeXML::Definition, and LaTeXML::Package)
.ie n .IP """$STATE\->installDefinition($definition, $scope);""" 4
.el .IP "\f(CW$STATE\->installDefinition($definition, $scope);\fR" 4
.IX Item "$STATE->installDefinition($definition, $scope);"
Install the definition into the current stack frame under its normal control sequence.
.SS "Named Scopes"
.IX Subsection "Named Scopes"
Named scopes can be used to set variables or redefine control sequences within
a scope other than the standard TeX grouping. For example, the LaTeX implementation
will automatically activate any definitions that were defined with a named
scope of, say \*(L"section:4\*(R", during the portion of the document that has
the section counter equal to 4.  Similarly, a scope named \*(L"label:foo\*(R" will
be activated in portions of the document where \f(CW\*(C`\elabel{foo}\*(C'\fR is in effect.
.ie n .IP """$STATE\->activateScope($scope);""" 4
.el .IP "\f(CW$STATE\->activateScope($scope);\fR" 4
.IX Item "$STATE->activateScope($scope);"
Installs any definitions that were associated with the named \f(CW$scope\fR.
Note that these are placed in the current grouping frame and will disappear when that
grouping ends.
.ie n .IP """$STATE\->deactivateScope($scope);""" 4
.el .IP "\f(CW$STATE\->deactivateScope($scope);\fR" 4
.IX Item "$STATE->deactivateScope($scope);"
Removes any definitions that were associated with the named \f(CW$scope\fR.
Normally not needed, since a scopes definitions are locally bound anyway.
.ie n .IP """$sp = $STATE\->convertUnit($unit);""" 4
.el .IP "\f(CW$sp = $STATE\->convertUnit($unit);\fR" 4
.IX Item "$sp = $STATE->convertUnit($unit);"
Converts a TeX unit of the form \f(CW\*(Aq10em\*(Aq\fR (or whatever TeX unit) into
scaled points.  (Defined here since in principle it could track the
size of ems and so forth (but currently doesn't))
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US\s0.
